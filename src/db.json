{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/github-actions-sample-eslint-in-pull-request.md","hash":"d8d26a081af1360062c354f884a2c6de84872710","modified":1704273216691},{"_id":"source/_posts/react-zustand.md","hash":"346576eb884e3157eb3e630225a314d9f0cd36fe","modified":1704273216695},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1704270132837},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704270133201},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1704270133209},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1704270133205},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704270133205},{"_id":"public/github-actions-sample-eslint-in-pull-request/index.html","hash":"0366960252153542bd6a44de803df425abccf461","modified":1704274772719},{"_id":"public/react-zustand/index.html","hash":"d9565db33546b00cc7a932eea86bf1150fd1f9af","modified":1704274772719},{"_id":"public/archives/index.html","hash":"241bc28d1071dad52b1bb69ec0c0ae51540f1fe6","modified":1704274772719},{"_id":"public/archives/2023/index.html","hash":"6d39b731601d97855830cb60f92f4081f76b6318","modified":1704274772719},{"_id":"public/archives/2023/12/index.html","hash":"2f283e10e26482c320a0316ed238069a38ddf2a1","modified":1704274772719},{"_id":"public/categories/工程化/index.html","hash":"b36e8938fc1544ae2d8db7b842b02c78df413f98","modified":1704274772719},{"_id":"public/categories/React/index.html","hash":"67365337d98ed352892245af1a43c64eff603e55","modified":1704274772719},{"_id":"public/index.html","hash":"91d4421d5f9d516be139b43faf6fa23f4f798253","modified":1704274772719},{"_id":"public/tags/github-actions/index.html","hash":"48634e2b43b3a59b479273eddea4c19c37248d42","modified":1704274772719},{"_id":"public/tags/zustand/index.html","hash":"542f2341b26449f3636474a1ee300f02c7a9eca5","modified":1704274772719},{"_id":"public/tags/react-store/index.html","hash":"9558065c8ec24918312cee7dbbadeac245dfe00a","modified":1704274772719},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1704273217808},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1704273217808},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1704273217808},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1704273217808},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1704273217808},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1704273217808},{"_id":"source/_posts/ast-in-css-module-auto-match.md","hash":"57243d11328b5b236e753cf43e3aeaf92581d5c8","modified":1704273767087},{"_id":"source/_posts/changesets-in-monorepo.md","hash":"028e5a939286e4d64d530cfce91dfd8ce48ff8bc","modified":1704273767079},{"_id":"source/_posts/tsconfig-json.md","hash":"7b1afc50798072eb2c6872bf14a39e362b5a9384","modified":1704273767095},{"_id":"source/_posts/typescript-means.md","hash":"bc4c5fbcdf3d022678d478ee7393daeb696ee0b8","modified":1704273767095},{"_id":"public/changesets-in-monorepo/index.html","hash":"34fb11485a314408cff4990513d66c22ab9d6a68","modified":1704274772719},{"_id":"public/tsconfig-json/index.html","hash":"53d73f92759f5cf18f13257aae9820e64ea9580c","modified":1704274772719},{"_id":"public/typescript-means/index.html","hash":"66eefbdaca01493e6f69275b7f16efeb7a30f18e","modified":1704274772719},{"_id":"public/ast-in-css-module-auto-match/index.html","hash":"e9f1926bff4d4fb012f20130c4e8e0bca6822b05","modified":1704274772719},{"_id":"public/archives/2023/07/index.html","hash":"d5e08f4932d7be0a07db01a19c28c0f78215f9a3","modified":1704274772719},{"_id":"public/archives/2023/08/index.html","hash":"2194fd6762122e49d5dea01086819c07e9d628df","modified":1704274772719},{"_id":"public/archives/2023/09/index.html","hash":"82ef9d2305e3432a3f41868ad925bab153d8d0ff","modified":1704274772719},{"_id":"public/categories/JavaScript/index.html","hash":"df260a340c95ffc25aa9b3e24532407300ee705f","modified":1704274772719},{"_id":"public/categories/TypeScript/index.html","hash":"9c9eb552dcd6c37f0cce67828b1d9a1f566a85ab","modified":1704274772719},{"_id":"public/tags/ast/index.html","hash":"7eafe44b890156f34c23659619dc0d2dc5fe9bf1","modified":1704274772719},{"_id":"public/tags/css-module/index.html","hash":"2ccb77207bbf33d35c6653609495959cd7784930","modified":1704274772719},{"_id":"public/tags/changesets/index.html","hash":"97ff0a34a1faac79fef307017fe087bf8cc0aee5","modified":1704274772719},{"_id":"public/tags/typescript/index.html","hash":"f700737050db364220090206a98011e988e9ffbe","modified":1704274772719},{"_id":"source/_posts/es6-promise.md","hash":"65ecdccb17128c0680d96667944dc9c89a386ac5","modified":1704274771556},{"_id":"source/_posts/what-is-es6.md","hash":"fd3d6c8c60ca914b00153cba27a84b3ad395a0b3","modified":1704274771604},{"_id":"source/_posts/write-components-elegantly-using-radix.md","hash":"a50deb6fbb3d782319c9c426dd24547d95d9298e","modified":1704274771604},{"_id":"public/write-components-elegantly-using-radix/index.html","hash":"b4df924f50033a480f05ba28fb3e1a3219277553","modified":1704274772719},{"_id":"public/es6-promise/index.html","hash":"1feddb5b27821b149cd0a834338606d84fc13840","modified":1704274772719},{"_id":"public/what-is-es6/index.html","hash":"ef68d02a4dea037f1f8bd21a6657f10361f570be","modified":1704274772719},{"_id":"public/tags/es6/index.html","hash":"156c4f7278611e5c07ce5439f0cce3023d9f4882","modified":1704274772719},{"_id":"public/tags/javascript/index.html","hash":"bcbad6c435cbe0c7eb7a84e233eee151fe4baa89","modified":1704274772719},{"_id":"public/tags/radix/index.html","hash":"7fb639688baf378dbe4e2c3100dfc0d01427351b","modified":1704274772719}],"Category":[{"name":"工程化","_id":"clqxk9r670003joorffjb03fe"},{"name":"React","_id":"clqxk9r680005joor13xp87sb"},{"name":"JavaScript","_id":"clqxkljy50004jgq90cj62vr0"},{"name":"TypeScript","_id":"clqxkljy70007jgq9hnyx6t6v"}],"Data":[],"Page":[],"Post":[{"title":"7. GitHub Actions - 在pull request中执行eslint检测的工作流例子","date":"2023-12-28T19:56:49.000Z","url":"github-actions-sample-eslint-in-pull-request","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/36](https://github.com/taoliujun/blog/issues/36)\n\n<!--hexo\n---\nurl: github-actions-sample-eslint-in-pull-request\ntags:\n  - github actions\n---\n-->\n\n一个在pull request发起的时候执行eslint检测的workflow，[点此查看完整代码](https://github.com/taoliujun/npm-packages/blob/master/.github/workflows/check-pull-request.yml)，它实现的功能如下：\n\n- 在pull request创建、更新的时候执行。\n- 先回复一个评论，告诉用户正在运行。\n- 初始化仓库，并安装依赖，产生依赖缓存。\n- 运行eslint增量检查。\n- 运行typescript检查。\n- 运行jest检查。\n- 更新之前的评论，回复检查的结果。\n\n运行截图：\n\n![Alt text](https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e)\n\n为避免歧义，涉及到github action的术语都是英文的。术语介绍如下：\n\n* workflow，工作流，可以理解为yml文件。\n* jobs，工作，一个workflow可以包含多个job，并行执行。\n* steps，作业，一个job可以包含多个step，串行执行。\n* action，操作，作业中具体的执行。\n\n## 步骤\n\n- [初始化workflow](https://github.com/taoliujun/blog/issues/36#issuecomment-1871790603)\n- [reply checking](https://github.com/taoliujun/blog/issues/36#issuecomment-1871806576)\n- [./.github/actions/unique-comment](https://github.com/taoliujun/blog/issues/36#issuecomment-1871818126)\n- [init](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862632)\n- [eslint](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862779)\n- [typescript](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862850)\n- [unit test](https://github.com/taoliujun/blog/issues/36#issuecomment-1871863037)\n- [reply result](https://github.com/taoliujun/blog/issues/36#issuecomment-1871863117)\n\n<!--hexo-->\n\n# 初始化workflow\n\n在项目中新建文件`.github/workflows/check-pull-request.yml`，内容如下：\n\n```yaml\nname: test check pull request\nrun-name: 'check pull request #${{ github.event.pull_request.number }}'\non:\n    pull_request:\n        types: [opened, synchronize, reopened]\njobs:\n    replyChecking:\n        runs-on: ubuntu-latest\n        steps:\n            - run: echo 'replyChecking'\n\n    init:\n        runs-on: ubuntu-latest\n        steps:\n            - run: echo 'init'\n\n    eslint:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'eslint'\n\n    typescript:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'typescript'\n\n    unitTest:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'unitTest'\n\n    replyResult:\n        runs-on: ubuntu-latest\n        needs: [replyChecking, eslint, typescript, unitTest]\n        steps:\n            - run: echo 'replyResult'\n```\n\n## name和run-name\n\n给workflow命名为`check pull request`，它会出现在Actions页面的左侧菜单中。运行实例名为`check pull request #44`，出现在右侧的运行列表中。如图：\n\n![](https://github.com/taoliujun/blog/assets/5689134/c1371ff2-8fc3-4e5b-8b60-3c572419938b)\n\n`run-name`中的`${{ github.event.pull_request.number }}`是workflow的上下文，这里读取了上下文中的pr编号。\n\n## on\n\n`on`指定了workflow的触发条件，这里配置了在pr创建、同步、重新打开的时候，触发该workflow。\n\n## jobs\n\n按照设想，需要定义几个job，分别是：\n\n-   replyChecking：回复用户正在检查中\n-   init：初始化仓库，缓存依赖项\n-   eslint：运行eslint检查\n-   typescript：运行typescript检查\n-   unitTest：运行单元测试\n-   replyResult：回复用户检查结果\n\n`jobs`是并行运行的，聪明如你肯定发现了，eslint、typescript、unitTest这三个job会涉及到安装npm依赖，所以它们最好在init后执行，确保依赖已经缓存了。\n\n其次，replyResult肯定要拿到eslint等job的结果才能执行，所以使用了`needs`管理它们的执行依赖关系。\n\n### runs-on\n\n每个job都运行在独立的容器中，github官方提供了windows、macos、linux多种容器，这里使用了ubuntu容器。\n\n## 测试\n\n发起一个pr，看到Actions页面出现了新的运行实例，点击进去，可以看到各个job的运行情况和依赖关系：\n\n![](https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e)\n\n<!--hexo-->\n\n# replyChecking\n\n在进行eslint检测之前，先在pr里回复`checking`，并且带上拽酷炫的话。将replyChecking改成如下：\n\n```yaml\nreplyChecking:\n    runs-on: ubuntu-latest\n    steps:\n        - name: Checkout\n          uses: actions/checkout@v4\n          with:\n              ref: ${{github.head_ref}}\n        - name: Get date time\n          id: getDateTime\n          run: echo \"result=$(TZ=Asia/Shanghai date)\" >> \"$GITHUB_OUTPUT\"\n        - name: Create or update a comment\n          uses: ./.github/actions/unique-comment\n          with:\n              uniqueIdentifier: ${{ github.workflow }}\n              body: |\n                  **Checking...**\n\n                  ---\n\n                  Commented by Action [${{github.workflow}}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.\n```\n\n`steps`每一步里`name`、`id`是可选的，`name`在Actions详情页面里会显示，更直观的看到step的名称，推荐写上。\n\n## Checkout\n\n`uses`表示使用一个action，名为`actions/checkout@v4`，它用来拉取仓库。\n\n> 同其他编程语言一样，重复的action可以封装起来。[action市场](https://github.com/marketplace?type=actions)提供了很多。\n\n`with`属性指定了该action的输入参数，每个action的参数不尽相同。\n\n`ref`参数表示要拉取的分支，`${{github.head_ref}}`也是一个上下文，表示当前pr的源分支。\n\n\n## Get Date time\n\n这step还写了`id`，表示该step在该job中的唯一标识，为什么要写呢？是为了下一步step能根据`id`读取到它的`output`。\n\n> **output**是workflow中非常重要的概念，它用于在step之间、job之间分享简单的数据。\n\n`run`就是在容器中跑一个命令，这里跑了一个unix bash命令，将当前时间写入到`$GITHUB_OUTPUT`中，键名为`result`。\n\n> `$GITHUB_OUTPUT`是workflow注入到容器中的一个路径，用于存放output。\n\n## Create or update a comment\n\n`uses`使用了本地的action，这个action用于创建或更新一个唯一回复，下一节说。\n\n> 有时候，官方或市场的action并不能满足你的需要，就得自己写一个了。\n\n同理，该action也有`with`属性，`uniqueIdentifier`是回复评论的唯一标识，`body`是回复的内容，内容使用了markdown语法，里面还涉及到上下文不一一细讲了。只说`${{steps.getDateTime.outputs.result}}`这个上下文表示获取getDateTime这个step中，键名为`result`的值。\n\n如果你不需要在内容里插入时间，那么上面的`Get Date time`就可以省略了。\n\n## 测试\n\n因为我已经有完整的代码了，所以运行后，pr中会有一个回复，如图：\n\n![](https://github.com/taoliujun/blog/assets/5689134/42396a84-b798-4f4e-9f39-5bf92a8acb15)\n<!--hexo-->\n\n# ./.github/actions/unique-comment\n\n这是一个封装的javascript action，用于对issue创建、更新唯一评论。\n\n## 目录结构\n\n创建目录`./.github/actions/unique-comment`，最终目录结构如下：\n\n```bash\n.\n├── action.yml\n├── config\n│   └── webpack.config.js\n├── dist\n│   ├── index.js\n│   └── index.js.LICENSE.txt\n├── package.json\n└── src\n    └── index.js\n```\n\n## action.yml\n\n这是action的配置文件，必须存在，内容如下：\n\n```yaml\nname: unique-comment\ndescription: create or update a unique comment\n\nruns:\n    using: 'node20'\n    main: './dist/index.js'\n\ninputs:\n    token:\n        description: 'GitHub token'\n        required: false\n        default: ${{ github.token }}\n    owner:\n        description: 'Repository owner'\n        required: false\n        default: ${{ github.event.repository.owner.login }}\n    repo:\n        description: 'Repository name'\n        required: false\n        default: ${{ github.event.repository.name }}\n    issue_number:\n        description: 'Issue number'\n        required: false\n        default: ${{ github.event.number }}\n    body:\n        description: 'Comment body'\n        required: false\n    uniqueIdentifier:\n        description: 'Unique identifier for comment'\n        required: false\n        default: 'unique-comment'\n```\n\n大部分属性不一一细讲了，都是简单的英文望文生义即可。\n\n`runs`表示运行在`node20`环境下，入口文件为`./dist/index.js`。\n\n`inputs`表示接受的参数，也就是之前提到的`with`属性里要输入的参数。用`required`表示是否必须传入，`default`表示默认值。\n\n## src/index.js\n\n为什么入口文件是`dist/index.js`，而不是`src/index.js`呢？因为要引用一些github官方提供的快捷操作github REST API的js包去操作issue评论(pull request也是一种issue)，最终打包后的文件才能在工作流中稳妥的运行。所以，写好`src/index.js`，再打包就行。\n\n该文件代码如下：\n\n```javascript\nconst core = require('@actions/core');\nconst github = require('@actions/github');\n\nconst main = async () => {\n    const token = core.getInput('token');\n    const owner = core.getInput('owner');\n    const repo = core.getInput('repo');\n    const issueNumber = core.getInput('issue_number');\n    const uniqueIdentifier = `[^uniqueIdentifier]: ${core.getInput('uniqueIdentifier')}`;\n    const body = `${core.getInput('body')}\\n\\n${uniqueIdentifier}`;\n\n    core.debug(`uniqueIdentifier is ${uniqueIdentifier}`);\n\n    const octokit = github.getOctokit(token);\n\n    const comments = await octokit.rest.issues.listComments({\n        owner,\n        repo,\n        issue_number: issueNumber,\n    });\n\n    const botComment = comments.data.find((v) => v.body.includes(uniqueIdentifier));\n\n    if (botComment) {\n        core.info('update comment successfully.');\n        await octokit.rest.issues.updateComment({\n            owner,\n            repo,\n            comment_id: botComment.id,\n            body,\n        });\n    } else {\n        core.info('create comment successfully.');\n        await octokit.rest.issues.createComment({\n            owner,\n            repo,\n            issue_number: issueNumber,\n            body,\n        });\n    }\n};\n\ntry {\n    main();\n} catch (err) {\n    core.setFailed(err.message);\n}\n```\n\n`@actions/core`和`@actions/github`是github官方提供的js包，前者可以方便的读取入参等，后者可以方便的操作github REST API。\n\n`main`函数的代码就是原生javascript，不一一解释了，主要通过`uniqueIdentifier`来判断是否发布过评论，如果是，就更新评论，否则就创建评论。\n\n> markdown语法`[^uniqueIdentifier]`表示脚注，不会被渲染。\n\n`core.setFailed(err.message);`表示抛出退出代码。\n\n## config/webpack.config.js\n\n打包用的，配置简单可用即可：\n\n```javascript\nmodule.exports = {\n    mode: 'production',\n    target: 'node20',\n    entry: './src/index.js',\n    output: {\n        filename: 'index.js',\n        clean: true,\n    },\n};\n```\n\n## package.json\n\n```json\n{\n  \"name\": \"unique-comment\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"webpack --config ./config/webpack.config.js\"\n  },\n  \"dependencies\": {\n    \"@actions/core\": \"^1.10.1\",\n    \"@actions/github\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^5.89.0\",\n    \"webpack-cli\": \"^5.1.4\"\n  }\n}\n```\n\n没啥好说的，列出了依赖项。和一个打包脚本。\n\n## 测试\n\n修改了`src/index.js`得`build`，然后push到github仓库。\n\n记得将**dist**目录也提交到github仓库。\n\n<!--hexo-->\n\n# init\n\n现在，开始搞正经的了。\n\n先初始化项目，这个job的目的仅仅是为了缓存pnpm依赖项，如果你的项目的依赖项不经常更新，可以省略这个job，后续也不要`needs`这个job。\n\n将init改成如下：\n\n```yaml\ninit:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n```\n\n相信经过对之前的job的了解，这里的配置就看起来很简单了。\n\n## Init pnpm\n\n使用第三方action，安装pnpm@^8。\n\n## Init node\n\n`cache: 'pnpm'`指定缓存机制，它内部是利用了workflow的cache机制。\n\n## Install dependencies\n\n安装依赖项，触发缓存。\n<!--hexo-->\n\n# eslint\n\n将eslint改成如下：\n\n```yaml\neslint:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n                  fetch-depth: 0\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n\n            - name: Run eslint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n                      let diffFiles = '';\n\n                      await exec.exec(\n                        `git diff --name-only origin/${{github.base_ref}}`,\n                        [],\n                        {\n                          // silent: true,\n                          // ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                diffFiles += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      const lintFiles = diffFiles.split(`\\n`).filter((file) => {\n                        return file.endsWith('.js') || file.endsWith('.ts') || file.endsWith('.tsx')\n                      }).join(' ');\n\n                      await exec.exec(\n                        // \"pnpm run lint --format stylish\",\n                        `pnpm eslint ${lintFiles}`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      if (outerr) {\n                        return `:x: Some command execution errors, non-eslint business errors.`;\n                      }\n\n                      const errorMatch = output.match(/(\\d+) errors?/);\n                      const warnMatch = output.match(/(\\d+) warnings?/);\n\n                      if (errorMatch && errorMatch?.[1] !== '0') {\n                        return `:x: ${errorMatch?.[0]} ${warnMatch?.[0]}`;\n                      }\n\n                      return `:white_check_mark: ${errorMatch?.[0] || '0 error'} ${warnMatch?.[0] || '0 warning'}`;\n```\n\n## needs\n\n使用`needs`依赖init，可以使用到pnpm的缓存项，防止install太慢。\n\n> 因为eslint、typescript、unitTest都需要pnpm install，所以一个前置的init去缓存pnpm依赖项，可以加快后续的install速度。\n\n## outputs\n\njob里的outputs，可以在依赖它的其他job中访问到。这里使用`${{ steps.lint.outputs.result }}`去获取该job中lint这个step里的output里的result。\n\n> output有job和step两个维度，注意区分。\n\n\n## Run eslint\n\n它uses了`actions/github-script@v7`，这是github官方提供的一个action，可以在`with.script`里写js代码去执行，同时它会注入一些变量到script中去，见它的[官方文档](https://github.com/actions/github-script/tree/v7/)。\n\n> 对于简单的js代码，可以使用这个action去完成，不用再去写一个js文件。\n\n`result-encoding`是指定script返回的数据格式的，默认是json，这指定为string。\n\n> 为什么script里return了string，还要指定为string呢？\n> 因为`return 'hello'`在json encode后是`'\"hello\"'`，而string encode后为`'hello'`。\n\nscript里是原生的js代码了，里面的`exec`是该action注入的变量，用来执行shell命令。\n\n这段js代码做了两个事情，一是`git diff`获取pr中改动的文件列表，二是`eslint`检查这些增量文件，最后返回处理的结果。\n\n## fetch-depth\n\nInit repo这个step里设置了`fetch-depth: 0`，不然获取不到完整的git分支，具体看`actions/checkout`的解释，涉及到git的知识不展开细说了。\n\n## steps.lint.outputs.result\n\n`steps.lint.outputs.result`为什么能拿到lint step里的output.result呢？因为`actions/github-script`这个action内部将script的返回值，设置到`$GITHUB_OUTPUT`里了，且键名为`result`。\n<!--hexo-->\n\n# typescript\n\n和eslint的配置大同小异，只是改了对检测结果的判断。\n\n```yaml\ntypescript:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n\n            - name: Run lint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n\n                      await exec.exec(\n                        `pnpm run -r lint:ts`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      if (outerr) {\n                        return `:x: Some command execution errors, no business errors.`;\n                      }\n\n                      const errorMatch = output.match(/error TS/g);\n\n                      if (errorMatch) {\n                        return `:x: ${errorMatch?.length} errors`;\n                      }\n\n                      return `:white_check_mark: ${'0 error'}`;\n```\n<!--hexo-->\n\n# unitTest\n\n和eslint的配置大同小异，只是改了对检测结果的判断。唯一的区别是jest的检测结果是输出到stderr，见https://github.com/jestjs/jest/issues/5064。\n\n```yaml\nunitTest:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: |\n                  pnpm remove @nike/eslint-multi-formatter || true\n                  pnpm remove @nike/svg-packer || true\n                  pnpm install\n\n            - name: Run lint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n\n                      await exec.exec(\n                        `pnpm run test`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      // why use outerr? https://github.com/jestjs/jest/issues/5064\n\n                      const failMatch = outerr.match(/Test Suites: \\d+ failed/);\n\n                      if (failMatch) {\n                        return `:x: ${failMatch?.[0]}`;\n                      }\n\n                      const errorMatch = outerr.match(/Jest: \"global\" coverage threshold for lines \\([0-9\\.]+%\\) not met: [0-9\\.]+%/);\n\n                      if (errorMatch) {\n                        return `:x: ${errorMatch?.[0]}`;\n                      }\n\n                      return `:white_check_mark: passed`;\n```\n<!--hexo-->\n\n# replyResult\n\n最后，将几个检测的结果进行汇总，回复到pr里就行了。\n\n```yaml\nreplyResult:\n        runs-on: ubuntu-latest\n        needs: [replyChecking, eslint, typescript, unitTest]\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n            - name: Get date time\n              id: getDateTime\n              run: echo \"result=$(TZ=Asia/Shanghai date)\" >> \"$GITHUB_OUTPUT\"\n            - name: Create or update a comment\n              uses: ./.github/actions/unique-comment\n              with:\n                  uniqueIdentifier: ${{ github.workflow }}\n                  body: |\n                      ## Eslint Check Result\n\n                      ${{needs.eslint.outputs.result}}\n\n                      ## Typescript Check Result\n\n                      ${{needs.typescript.outputs.result}}\n\n                      ## UnitTest Check Result\n\n                      ${{needs.unitTest.outputs.result}}\n\n                      ---\n\n                      Commented by Action [${{github.workflow}}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.\n```\n\n和replyChecking差不多，在body里使用`${{needs.eslint.outputs.result}}`去读取了eslint job的outputs。\n\n## 测试\n\n去发起新的pr，故意提交一个有eslint error的js/ts文件，看看表现吧~\n\n","source":"_posts/github-actions-sample-eslint-in-pull-request.md","raw":"---\ntitle: \"7. GitHub Actions - 在pull request中执行eslint检测的工作流例子\"\ndate: \"2023-12-29T03:56:49Z\"\ncategories:\n  - [工程化]\n\nurl: github-actions-sample-eslint-in-pull-request\ntags:\n  - github actions\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/36](https://github.com/taoliujun/blog/issues/36)\n\n<!--hexo\n---\nurl: github-actions-sample-eslint-in-pull-request\ntags:\n  - github actions\n---\n-->\n\n一个在pull request发起的时候执行eslint检测的workflow，[点此查看完整代码](https://github.com/taoliujun/npm-packages/blob/master/.github/workflows/check-pull-request.yml)，它实现的功能如下：\n\n- 在pull request创建、更新的时候执行。\n- 先回复一个评论，告诉用户正在运行。\n- 初始化仓库，并安装依赖，产生依赖缓存。\n- 运行eslint增量检查。\n- 运行typescript检查。\n- 运行jest检查。\n- 更新之前的评论，回复检查的结果。\n\n运行截图：\n\n![Alt text](https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e)\n\n为避免歧义，涉及到github action的术语都是英文的。术语介绍如下：\n\n* workflow，工作流，可以理解为yml文件。\n* jobs，工作，一个workflow可以包含多个job，并行执行。\n* steps，作业，一个job可以包含多个step，串行执行。\n* action，操作，作业中具体的执行。\n\n## 步骤\n\n- [初始化workflow](https://github.com/taoliujun/blog/issues/36#issuecomment-1871790603)\n- [reply checking](https://github.com/taoliujun/blog/issues/36#issuecomment-1871806576)\n- [./.github/actions/unique-comment](https://github.com/taoliujun/blog/issues/36#issuecomment-1871818126)\n- [init](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862632)\n- [eslint](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862779)\n- [typescript](https://github.com/taoliujun/blog/issues/36#issuecomment-1871862850)\n- [unit test](https://github.com/taoliujun/blog/issues/36#issuecomment-1871863037)\n- [reply result](https://github.com/taoliujun/blog/issues/36#issuecomment-1871863117)\n\n<!--hexo-->\n\n# 初始化workflow\n\n在项目中新建文件`.github/workflows/check-pull-request.yml`，内容如下：\n\n```yaml\nname: test check pull request\nrun-name: 'check pull request #${{ github.event.pull_request.number }}'\non:\n    pull_request:\n        types: [opened, synchronize, reopened]\njobs:\n    replyChecking:\n        runs-on: ubuntu-latest\n        steps:\n            - run: echo 'replyChecking'\n\n    init:\n        runs-on: ubuntu-latest\n        steps:\n            - run: echo 'init'\n\n    eslint:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'eslint'\n\n    typescript:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'typescript'\n\n    unitTest:\n        runs-on: ubuntu-latest\n        needs: [init]\n        steps:\n            - run: echo 'unitTest'\n\n    replyResult:\n        runs-on: ubuntu-latest\n        needs: [replyChecking, eslint, typescript, unitTest]\n        steps:\n            - run: echo 'replyResult'\n```\n\n## name和run-name\n\n给workflow命名为`check pull request`，它会出现在Actions页面的左侧菜单中。运行实例名为`check pull request #44`，出现在右侧的运行列表中。如图：\n\n![](https://github.com/taoliujun/blog/assets/5689134/c1371ff2-8fc3-4e5b-8b60-3c572419938b)\n\n`run-name`中的`${{ github.event.pull_request.number }}`是workflow的上下文，这里读取了上下文中的pr编号。\n\n## on\n\n`on`指定了workflow的触发条件，这里配置了在pr创建、同步、重新打开的时候，触发该workflow。\n\n## jobs\n\n按照设想，需要定义几个job，分别是：\n\n-   replyChecking：回复用户正在检查中\n-   init：初始化仓库，缓存依赖项\n-   eslint：运行eslint检查\n-   typescript：运行typescript检查\n-   unitTest：运行单元测试\n-   replyResult：回复用户检查结果\n\n`jobs`是并行运行的，聪明如你肯定发现了，eslint、typescript、unitTest这三个job会涉及到安装npm依赖，所以它们最好在init后执行，确保依赖已经缓存了。\n\n其次，replyResult肯定要拿到eslint等job的结果才能执行，所以使用了`needs`管理它们的执行依赖关系。\n\n### runs-on\n\n每个job都运行在独立的容器中，github官方提供了windows、macos、linux多种容器，这里使用了ubuntu容器。\n\n## 测试\n\n发起一个pr，看到Actions页面出现了新的运行实例，点击进去，可以看到各个job的运行情况和依赖关系：\n\n![](https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e)\n\n<!--hexo-->\n\n# replyChecking\n\n在进行eslint检测之前，先在pr里回复`checking`，并且带上拽酷炫的话。将replyChecking改成如下：\n\n```yaml\nreplyChecking:\n    runs-on: ubuntu-latest\n    steps:\n        - name: Checkout\n          uses: actions/checkout@v4\n          with:\n              ref: ${{github.head_ref}}\n        - name: Get date time\n          id: getDateTime\n          run: echo \"result=$(TZ=Asia/Shanghai date)\" >> \"$GITHUB_OUTPUT\"\n        - name: Create or update a comment\n          uses: ./.github/actions/unique-comment\n          with:\n              uniqueIdentifier: ${{ github.workflow }}\n              body: |\n                  **Checking...**\n\n                  ---\n\n                  Commented by Action [${{github.workflow}}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.\n```\n\n`steps`每一步里`name`、`id`是可选的，`name`在Actions详情页面里会显示，更直观的看到step的名称，推荐写上。\n\n## Checkout\n\n`uses`表示使用一个action，名为`actions/checkout@v4`，它用来拉取仓库。\n\n> 同其他编程语言一样，重复的action可以封装起来。[action市场](https://github.com/marketplace?type=actions)提供了很多。\n\n`with`属性指定了该action的输入参数，每个action的参数不尽相同。\n\n`ref`参数表示要拉取的分支，`${{github.head_ref}}`也是一个上下文，表示当前pr的源分支。\n\n\n## Get Date time\n\n这step还写了`id`，表示该step在该job中的唯一标识，为什么要写呢？是为了下一步step能根据`id`读取到它的`output`。\n\n> **output**是workflow中非常重要的概念，它用于在step之间、job之间分享简单的数据。\n\n`run`就是在容器中跑一个命令，这里跑了一个unix bash命令，将当前时间写入到`$GITHUB_OUTPUT`中，键名为`result`。\n\n> `$GITHUB_OUTPUT`是workflow注入到容器中的一个路径，用于存放output。\n\n## Create or update a comment\n\n`uses`使用了本地的action，这个action用于创建或更新一个唯一回复，下一节说。\n\n> 有时候，官方或市场的action并不能满足你的需要，就得自己写一个了。\n\n同理，该action也有`with`属性，`uniqueIdentifier`是回复评论的唯一标识，`body`是回复的内容，内容使用了markdown语法，里面还涉及到上下文不一一细讲了。只说`${{steps.getDateTime.outputs.result}}`这个上下文表示获取getDateTime这个step中，键名为`result`的值。\n\n如果你不需要在内容里插入时间，那么上面的`Get Date time`就可以省略了。\n\n## 测试\n\n因为我已经有完整的代码了，所以运行后，pr中会有一个回复，如图：\n\n![](https://github.com/taoliujun/blog/assets/5689134/42396a84-b798-4f4e-9f39-5bf92a8acb15)\n<!--hexo-->\n\n# ./.github/actions/unique-comment\n\n这是一个封装的javascript action，用于对issue创建、更新唯一评论。\n\n## 目录结构\n\n创建目录`./.github/actions/unique-comment`，最终目录结构如下：\n\n```bash\n.\n├── action.yml\n├── config\n│   └── webpack.config.js\n├── dist\n│   ├── index.js\n│   └── index.js.LICENSE.txt\n├── package.json\n└── src\n    └── index.js\n```\n\n## action.yml\n\n这是action的配置文件，必须存在，内容如下：\n\n```yaml\nname: unique-comment\ndescription: create or update a unique comment\n\nruns:\n    using: 'node20'\n    main: './dist/index.js'\n\ninputs:\n    token:\n        description: 'GitHub token'\n        required: false\n        default: ${{ github.token }}\n    owner:\n        description: 'Repository owner'\n        required: false\n        default: ${{ github.event.repository.owner.login }}\n    repo:\n        description: 'Repository name'\n        required: false\n        default: ${{ github.event.repository.name }}\n    issue_number:\n        description: 'Issue number'\n        required: false\n        default: ${{ github.event.number }}\n    body:\n        description: 'Comment body'\n        required: false\n    uniqueIdentifier:\n        description: 'Unique identifier for comment'\n        required: false\n        default: 'unique-comment'\n```\n\n大部分属性不一一细讲了，都是简单的英文望文生义即可。\n\n`runs`表示运行在`node20`环境下，入口文件为`./dist/index.js`。\n\n`inputs`表示接受的参数，也就是之前提到的`with`属性里要输入的参数。用`required`表示是否必须传入，`default`表示默认值。\n\n## src/index.js\n\n为什么入口文件是`dist/index.js`，而不是`src/index.js`呢？因为要引用一些github官方提供的快捷操作github REST API的js包去操作issue评论(pull request也是一种issue)，最终打包后的文件才能在工作流中稳妥的运行。所以，写好`src/index.js`，再打包就行。\n\n该文件代码如下：\n\n```javascript\nconst core = require('@actions/core');\nconst github = require('@actions/github');\n\nconst main = async () => {\n    const token = core.getInput('token');\n    const owner = core.getInput('owner');\n    const repo = core.getInput('repo');\n    const issueNumber = core.getInput('issue_number');\n    const uniqueIdentifier = `[^uniqueIdentifier]: ${core.getInput('uniqueIdentifier')}`;\n    const body = `${core.getInput('body')}\\n\\n${uniqueIdentifier}`;\n\n    core.debug(`uniqueIdentifier is ${uniqueIdentifier}`);\n\n    const octokit = github.getOctokit(token);\n\n    const comments = await octokit.rest.issues.listComments({\n        owner,\n        repo,\n        issue_number: issueNumber,\n    });\n\n    const botComment = comments.data.find((v) => v.body.includes(uniqueIdentifier));\n\n    if (botComment) {\n        core.info('update comment successfully.');\n        await octokit.rest.issues.updateComment({\n            owner,\n            repo,\n            comment_id: botComment.id,\n            body,\n        });\n    } else {\n        core.info('create comment successfully.');\n        await octokit.rest.issues.createComment({\n            owner,\n            repo,\n            issue_number: issueNumber,\n            body,\n        });\n    }\n};\n\ntry {\n    main();\n} catch (err) {\n    core.setFailed(err.message);\n}\n```\n\n`@actions/core`和`@actions/github`是github官方提供的js包，前者可以方便的读取入参等，后者可以方便的操作github REST API。\n\n`main`函数的代码就是原生javascript，不一一解释了，主要通过`uniqueIdentifier`来判断是否发布过评论，如果是，就更新评论，否则就创建评论。\n\n> markdown语法`[^uniqueIdentifier]`表示脚注，不会被渲染。\n\n`core.setFailed(err.message);`表示抛出退出代码。\n\n## config/webpack.config.js\n\n打包用的，配置简单可用即可：\n\n```javascript\nmodule.exports = {\n    mode: 'production',\n    target: 'node20',\n    entry: './src/index.js',\n    output: {\n        filename: 'index.js',\n        clean: true,\n    },\n};\n```\n\n## package.json\n\n```json\n{\n  \"name\": \"unique-comment\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"webpack --config ./config/webpack.config.js\"\n  },\n  \"dependencies\": {\n    \"@actions/core\": \"^1.10.1\",\n    \"@actions/github\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^5.89.0\",\n    \"webpack-cli\": \"^5.1.4\"\n  }\n}\n```\n\n没啥好说的，列出了依赖项。和一个打包脚本。\n\n## 测试\n\n修改了`src/index.js`得`build`，然后push到github仓库。\n\n记得将**dist**目录也提交到github仓库。\n\n<!--hexo-->\n\n# init\n\n现在，开始搞正经的了。\n\n先初始化项目，这个job的目的仅仅是为了缓存pnpm依赖项，如果你的项目的依赖项不经常更新，可以省略这个job，后续也不要`needs`这个job。\n\n将init改成如下：\n\n```yaml\ninit:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n```\n\n相信经过对之前的job的了解，这里的配置就看起来很简单了。\n\n## Init pnpm\n\n使用第三方action，安装pnpm@^8。\n\n## Init node\n\n`cache: 'pnpm'`指定缓存机制，它内部是利用了workflow的cache机制。\n\n## Install dependencies\n\n安装依赖项，触发缓存。\n<!--hexo-->\n\n# eslint\n\n将eslint改成如下：\n\n```yaml\neslint:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n                  fetch-depth: 0\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n\n            - name: Run eslint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n                      let diffFiles = '';\n\n                      await exec.exec(\n                        `git diff --name-only origin/${{github.base_ref}}`,\n                        [],\n                        {\n                          // silent: true,\n                          // ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                diffFiles += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      const lintFiles = diffFiles.split(`\\n`).filter((file) => {\n                        return file.endsWith('.js') || file.endsWith('.ts') || file.endsWith('.tsx')\n                      }).join(' ');\n\n                      await exec.exec(\n                        // \"pnpm run lint --format stylish\",\n                        `pnpm eslint ${lintFiles}`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      if (outerr) {\n                        return `:x: Some command execution errors, non-eslint business errors.`;\n                      }\n\n                      const errorMatch = output.match(/(\\d+) errors?/);\n                      const warnMatch = output.match(/(\\d+) warnings?/);\n\n                      if (errorMatch && errorMatch?.[1] !== '0') {\n                        return `:x: ${errorMatch?.[0]} ${warnMatch?.[0]}`;\n                      }\n\n                      return `:white_check_mark: ${errorMatch?.[0] || '0 error'} ${warnMatch?.[0] || '0 warning'}`;\n```\n\n## needs\n\n使用`needs`依赖init，可以使用到pnpm的缓存项，防止install太慢。\n\n> 因为eslint、typescript、unitTest都需要pnpm install，所以一个前置的init去缓存pnpm依赖项，可以加快后续的install速度。\n\n## outputs\n\njob里的outputs，可以在依赖它的其他job中访问到。这里使用`${{ steps.lint.outputs.result }}`去获取该job中lint这个step里的output里的result。\n\n> output有job和step两个维度，注意区分。\n\n\n## Run eslint\n\n它uses了`actions/github-script@v7`，这是github官方提供的一个action，可以在`with.script`里写js代码去执行，同时它会注入一些变量到script中去，见它的[官方文档](https://github.com/actions/github-script/tree/v7/)。\n\n> 对于简单的js代码，可以使用这个action去完成，不用再去写一个js文件。\n\n`result-encoding`是指定script返回的数据格式的，默认是json，这指定为string。\n\n> 为什么script里return了string，还要指定为string呢？\n> 因为`return 'hello'`在json encode后是`'\"hello\"'`，而string encode后为`'hello'`。\n\nscript里是原生的js代码了，里面的`exec`是该action注入的变量，用来执行shell命令。\n\n这段js代码做了两个事情，一是`git diff`获取pr中改动的文件列表，二是`eslint`检查这些增量文件，最后返回处理的结果。\n\n## fetch-depth\n\nInit repo这个step里设置了`fetch-depth: 0`，不然获取不到完整的git分支，具体看`actions/checkout`的解释，涉及到git的知识不展开细说了。\n\n## steps.lint.outputs.result\n\n`steps.lint.outputs.result`为什么能拿到lint step里的output.result呢？因为`actions/github-script`这个action内部将script的返回值，设置到`$GITHUB_OUTPUT`里了，且键名为`result`。\n<!--hexo-->\n\n# typescript\n\n和eslint的配置大同小异，只是改了对检测结果的判断。\n\n```yaml\ntypescript:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: pnpm install\n\n            - name: Run lint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n\n                      await exec.exec(\n                        `pnpm run -r lint:ts`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      if (outerr) {\n                        return `:x: Some command execution errors, no business errors.`;\n                      }\n\n                      const errorMatch = output.match(/error TS/g);\n\n                      if (errorMatch) {\n                        return `:x: ${errorMatch?.length} errors`;\n                      }\n\n                      return `:white_check_mark: ${'0 error'}`;\n```\n<!--hexo-->\n\n# unitTest\n\n和eslint的配置大同小异，只是改了对检测结果的判断。唯一的区别是jest的检测结果是输出到stderr，见https://github.com/jestjs/jest/issues/5064。\n\n```yaml\nunitTest:\n        runs-on: ubuntu-latest\n        needs: [init]\n        outputs:\n            result: ${{ steps.lint.outputs.result }}\n        steps:\n            - name: Init repo\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n\n            - name: Init pnpm\n              uses: pnpm/action-setup@v2\n              with:\n                  version: 8\n\n            - name: Init node\n              uses: actions/setup-node@v4\n              with:\n                  node-version: 20\n                  cache: 'pnpm'\n\n            - name: Install dependencies\n              run: |\n                  pnpm remove @nike/eslint-multi-formatter || true\n                  pnpm remove @nike/svg-packer || true\n                  pnpm install\n\n            - name: Run lint\n              id: lint\n              uses: actions/github-script@v7\n              with:\n                  result-encoding: string\n                  script: |\n                      let output = '';\n                      let outerr = '';\n\n                      await exec.exec(\n                        `pnpm run test`,\n                        [],\n                        {\n                          // silent: true,\n                          ignoreReturnCode: true,\n                          listeners: {\n                            stdout: (data) => {\n                                output += data.toString();\n                            },\n                            stderr: (data) => {\n                                outerr += data.toString();\n                            },\n                          },\n                        }\n                      );\n\n                      // why use outerr? https://github.com/jestjs/jest/issues/5064\n\n                      const failMatch = outerr.match(/Test Suites: \\d+ failed/);\n\n                      if (failMatch) {\n                        return `:x: ${failMatch?.[0]}`;\n                      }\n\n                      const errorMatch = outerr.match(/Jest: \"global\" coverage threshold for lines \\([0-9\\.]+%\\) not met: [0-9\\.]+%/);\n\n                      if (errorMatch) {\n                        return `:x: ${errorMatch?.[0]}`;\n                      }\n\n                      return `:white_check_mark: passed`;\n```\n<!--hexo-->\n\n# replyResult\n\n最后，将几个检测的结果进行汇总，回复到pr里就行了。\n\n```yaml\nreplyResult:\n        runs-on: ubuntu-latest\n        needs: [replyChecking, eslint, typescript, unitTest]\n        steps:\n            - name: Checkout\n              uses: actions/checkout@v4\n              with:\n                  ref: ${{github.head_ref}}\n            - name: Get date time\n              id: getDateTime\n              run: echo \"result=$(TZ=Asia/Shanghai date)\" >> \"$GITHUB_OUTPUT\"\n            - name: Create or update a comment\n              uses: ./.github/actions/unique-comment\n              with:\n                  uniqueIdentifier: ${{ github.workflow }}\n                  body: |\n                      ## Eslint Check Result\n\n                      ${{needs.eslint.outputs.result}}\n\n                      ## Typescript Check Result\n\n                      ${{needs.typescript.outputs.result}}\n\n                      ## UnitTest Check Result\n\n                      ${{needs.unitTest.outputs.result}}\n\n                      ---\n\n                      Commented by Action [${{github.workflow}}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.\n```\n\n和replyChecking差不多，在body里使用`${{needs.eslint.outputs.result}}`去读取了eslint job的outputs。\n\n## 测试\n\n去发起新的pr，故意提交一个有eslint error的js/ts文件，看看表现吧~\n\n","slug":"github-actions-sample-eslint-in-pull-request","published":1,"updated":"2024-01-03T09:13:36.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxk9r600000joor84vf3yg8","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/36\">https://github.com/taoliujun/blog/issues/36</a></p>\n<!--hexo\n---\nurl: github-actions-sample-eslint-in-pull-request\ntags:\n  - github actions\n---\n-->\n\n<p>一个在pull request发起的时候执行eslint检测的workflow，<a href=\"https://github.com/taoliujun/npm-packages/blob/master/.github/workflows/check-pull-request.yml\">点此查看完整代码</a>，它实现的功能如下：</p>\n<ul>\n<li>在pull request创建、更新的时候执行。</li>\n<li>先回复一个评论，告诉用户正在运行。</li>\n<li>初始化仓库，并安装依赖，产生依赖缓存。</li>\n<li>运行eslint增量检查。</li>\n<li>运行typescript检查。</li>\n<li>运行jest检查。</li>\n<li>更新之前的评论，回复检查的结果。</li>\n</ul>\n<p>运行截图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e\" alt=\"Alt text\"></p>\n<p>为避免歧义，涉及到github action的术语都是英文的。术语介绍如下：</p>\n<ul>\n<li>workflow，工作流，可以理解为yml文件。</li>\n<li>jobs，工作，一个workflow可以包含多个job，并行执行。</li>\n<li>steps，作业，一个job可以包含多个step，串行执行。</li>\n<li>action，操作，作业中具体的执行。</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871790603\">初始化workflow</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871806576\">reply checking</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871818126\">.&#x2F;.github&#x2F;actions&#x2F;unique-comment</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862632\">init</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862779\">eslint</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862850\">typescript</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871863037\">unit test</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871863117\">reply result</a></li>\n</ul>\n<!--hexo-->\n\n<h1 id=\"初始化workflow\"><a href=\"#初始化workflow\" class=\"headerlink\" title=\"初始化workflow\"></a>初始化workflow</h1><p>在项目中新建文件<code>.github/workflows/check-pull-request.yml</code>，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">test</span> <span class=\"string\">check</span> <span class=\"string\">pull</span> <span class=\"string\">request</span></span><br><span class=\"line\"><span class=\"attr\">run-name:</span> <span class=\"string\">&#x27;check pull request #$<span class=\"template-variable\">&#123;&#123; github.event.pull_request.number &#125;&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">    <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">        <span class=\"attr\">types:</span> [<span class=\"string\">opened</span>, <span class=\"string\">synchronize</span>, <span class=\"string\">reopened</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">    <span class=\"attr\">replyChecking:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;replyChecking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">init:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">eslint:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;eslint&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">typescript:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;typescript&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">unitTest:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;unitTest&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">replyResult:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">replyChecking</span>, <span class=\"string\">eslint</span>, <span class=\"string\">typescript</span>, <span class=\"string\">unitTest</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;replyResult&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"name和run-name\"><a href=\"#name和run-name\" class=\"headerlink\" title=\"name和run-name\"></a>name和run-name</h2><p>给workflow命名为<code>check pull request</code>，它会出现在Actions页面的左侧菜单中。运行实例名为<code>check pull request #44</code>，出现在右侧的运行列表中。如图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/c1371ff2-8fc3-4e5b-8b60-3c572419938b\"></p>\n<p><code>run-name</code>中的<code>$&#123;&#123; github.event.pull_request.number &#125;&#125;</code>是workflow的上下文，这里读取了上下文中的pr编号。</p>\n<h2 id=\"on\"><a href=\"#on\" class=\"headerlink\" title=\"on\"></a>on</h2><p><code>on</code>指定了workflow的触发条件，这里配置了在pr创建、同步、重新打开的时候，触发该workflow。</p>\n<h2 id=\"jobs\"><a href=\"#jobs\" class=\"headerlink\" title=\"jobs\"></a>jobs</h2><p>按照设想，需要定义几个job，分别是：</p>\n<ul>\n<li>replyChecking：回复用户正在检查中</li>\n<li>init：初始化仓库，缓存依赖项</li>\n<li>eslint：运行eslint检查</li>\n<li>typescript：运行typescript检查</li>\n<li>unitTest：运行单元测试</li>\n<li>replyResult：回复用户检查结果</li>\n</ul>\n<p><code>jobs</code>是并行运行的，聪明如你肯定发现了，eslint、typescript、unitTest这三个job会涉及到安装npm依赖，所以它们最好在init后执行，确保依赖已经缓存了。</p>\n<p>其次，replyResult肯定要拿到eslint等job的结果才能执行，所以使用了<code>needs</code>管理它们的执行依赖关系。</p>\n<h3 id=\"runs-on\"><a href=\"#runs-on\" class=\"headerlink\" title=\"runs-on\"></a>runs-on</h3><p>每个job都运行在独立的容器中，github官方提供了windows、macos、linux多种容器，这里使用了ubuntu容器。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>发起一个pr，看到Actions页面出现了新的运行实例，点击进去，可以看到各个job的运行情况和依赖关系：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e\"></p>\n<!--hexo-->\n\n<h1 id=\"replyChecking\"><a href=\"#replyChecking\" class=\"headerlink\" title=\"replyChecking\"></a>replyChecking</h1><p>在进行eslint检测之前，先在pr里回复<code>checking</code>，并且带上拽酷炫的话。将replyChecking改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">replyChecking:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">          <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">          <span class=\"attr\">with:</span></span><br><span class=\"line\">              <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">date</span> <span class=\"string\">time</span></span><br><span class=\"line\">          <span class=\"attr\">id:</span> <span class=\"string\">getDateTime</span></span><br><span class=\"line\">          <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;result=$(TZ=Asia/Shanghai date)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">&quot;$GITHUB_OUTPUT&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">comment</span></span><br><span class=\"line\">          <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/unique-comment</span></span><br><span class=\"line\">          <span class=\"attr\">with:</span></span><br><span class=\"line\">              <span class=\"attr\">uniqueIdentifier:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workflow</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">              <span class=\"attr\">body:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                  **Checking...**</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                  <span class=\"string\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"string\">Commented</span> <span class=\"string\">by</span> <span class=\"string\">Action</span> [<span class=\"string\">$<span class=\"template-variable\">&#123;&#123;github.workflow&#125;&#125;</span></span>]<span class=\"string\">($&#123;&#123;github.event.repository.html_url&#125;&#125;/actions/runs/$&#123;&#123;github.run_id&#125;&#125;),</span> <span class=\"string\">last</span> <span class=\"string\">updated</span> <span class=\"string\">on</span> <span class=\"string\">$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>steps</code>每一步里<code>name</code>、<code>id</code>是可选的，<code>name</code>在Actions详情页面里会显示，更直观的看到step的名称，推荐写上。</p>\n<h2 id=\"Checkout\"><a href=\"#Checkout\" class=\"headerlink\" title=\"Checkout\"></a>Checkout</h2><p><code>uses</code>表示使用一个action，名为<code>actions/checkout@v4</code>，它用来拉取仓库。</p>\n<blockquote>\n<p>同其他编程语言一样，重复的action可以封装起来。<a href=\"https://github.com/marketplace?type=actions\">action市场</a>提供了很多。</p>\n</blockquote>\n<p><code>with</code>属性指定了该action的输入参数，每个action的参数不尽相同。</p>\n<p><code>ref</code>参数表示要拉取的分支，<code>$&#123;&#123;github.head_ref&#125;&#125;</code>也是一个上下文，表示当前pr的源分支。</p>\n<h2 id=\"Get-Date-time\"><a href=\"#Get-Date-time\" class=\"headerlink\" title=\"Get Date time\"></a>Get Date time</h2><p>这step还写了<code>id</code>，表示该step在该job中的唯一标识，为什么要写呢？是为了下一步step能根据<code>id</code>读取到它的<code>output</code>。</p>\n<blockquote>\n<p><strong>output</strong>是workflow中非常重要的概念，它用于在step之间、job之间分享简单的数据。</p>\n</blockquote>\n<p><code>run</code>就是在容器中跑一个命令，这里跑了一个unix bash命令，将当前时间写入到<code>$GITHUB_OUTPUT</code>中，键名为<code>result</code>。</p>\n<blockquote>\n<p><code>$GITHUB_OUTPUT</code>是workflow注入到容器中的一个路径，用于存放output。</p>\n</blockquote>\n<h2 id=\"Create-or-update-a-comment\"><a href=\"#Create-or-update-a-comment\" class=\"headerlink\" title=\"Create or update a comment\"></a>Create or update a comment</h2><p><code>uses</code>使用了本地的action，这个action用于创建或更新一个唯一回复，下一节说。</p>\n<blockquote>\n<p>有时候，官方或市场的action并不能满足你的需要，就得自己写一个了。</p>\n</blockquote>\n<p>同理，该action也有<code>with</code>属性，<code>uniqueIdentifier</code>是回复评论的唯一标识，<code>body</code>是回复的内容，内容使用了markdown语法，里面还涉及到上下文不一一细讲了。只说<code>$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;</code>这个上下文表示获取getDateTime这个step中，键名为<code>result</code>的值。</p>\n<p>如果你不需要在内容里插入时间，那么上面的<code>Get Date time</code>就可以省略了。</p>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>因为我已经有完整的代码了，所以运行后，pr中会有一个回复，如图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/42396a84-b798-4f4e-9f39-5bf92a8acb15\"></p>\n<!--hexo-->\n\n<h1 id=\"x2F-github-x2F-actions-x2F-unique-comment\"><a href=\"#x2F-github-x2F-actions-x2F-unique-comment\" class=\"headerlink\" title=\".&#x2F;.github&#x2F;actions&#x2F;unique-comment\"></a>.&#x2F;.github&#x2F;actions&#x2F;unique-comment</h1><p>这是一个封装的javascript action，用于对issue创建、更新唯一评论。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>创建目录<code>./.github/actions/unique-comment</code>，最终目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── action.yml</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   └── webpack.config.js</span><br><span class=\"line\">├── dist</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── index.js.LICENSE.txt</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── index.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"action-yml\"><a href=\"#action-yml\" class=\"headerlink\" title=\"action.yml\"></a>action.yml</h2><p>这是action的配置文件，必须存在，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">unique-comment</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">unique</span> <span class=\"string\">comment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">runs:</span></span><br><span class=\"line\">    <span class=\"attr\">using:</span> <span class=\"string\">&#x27;node20&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">main:</span> <span class=\"string\">&#x27;./dist/index.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">inputs:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;GitHub token&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.token</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Repository owner&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.repository.owner.login</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Repository name&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.repository.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">issue_number:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Issue number&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.number</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">body:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Comment body&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">uniqueIdentifier:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Unique identifier for comment&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">&#x27;unique-comment&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>大部分属性不一一细讲了，都是简单的英文望文生义即可。</p>\n<p><code>runs</code>表示运行在<code>node20</code>环境下，入口文件为<code>./dist/index.js</code>。</p>\n<p><code>inputs</code>表示接受的参数，也就是之前提到的<code>with</code>属性里要输入的参数。用<code>required</code>表示是否必须传入，<code>default</code>表示默认值。</p>\n<h2 id=\"src-x2F-index-js\"><a href=\"#src-x2F-index-js\" class=\"headerlink\" title=\"src&#x2F;index.js\"></a>src&#x2F;index.js</h2><p>为什么入口文件是<code>dist/index.js</code>，而不是<code>src/index.js</code>呢？因为要引用一些github官方提供的快捷操作github REST API的js包去操作issue评论(pull request也是一种issue)，最终打包后的文件才能在工作流中稳妥的运行。所以，写好<code>src/index.js</code>，再打包就行。</p>\n<p>该文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> core = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@actions/core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> github = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@actions/github&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">main</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> owner = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;owner&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> repo = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;repo&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> issueNumber = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;issue_number&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uniqueIdentifier = <span class=\"string\">`[^uniqueIdentifier]: <span class=\"subst\">$&#123;core.getInput(<span class=\"string\">&#x27;uniqueIdentifier&#x27;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"string\">`<span class=\"subst\">$&#123;core.getInput(<span class=\"string\">&#x27;body&#x27;</span>)&#125;</span>\\n\\n<span class=\"subst\">$&#123;uniqueIdentifier&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"title function_\">debug</span>(<span class=\"string\">`uniqueIdentifier is <span class=\"subst\">$&#123;uniqueIdentifier&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> octokit = github.<span class=\"title function_\">getOctokit</span>(token);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> comments = <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">listComments</span>(&#123;</span><br><span class=\"line\">        owner,</span><br><span class=\"line\">        repo,</span><br><span class=\"line\">        <span class=\"attr\">issue_number</span>: issueNumber,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> botComment = comments.<span class=\"property\">data</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.<span class=\"property\">body</span>.<span class=\"title function_\">includes</span>(uniqueIdentifier));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (botComment) &#123;</span><br><span class=\"line\">        core.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;update comment successfully.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">updateComment</span>(&#123;</span><br><span class=\"line\">            owner,</span><br><span class=\"line\">            repo,</span><br><span class=\"line\">            <span class=\"attr\">comment_id</span>: botComment.<span class=\"property\">id</span>,</span><br><span class=\"line\">            body,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        core.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;create comment successfully.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">createComment</span>(&#123;</span><br><span class=\"line\">            owner,</span><br><span class=\"line\">            repo,</span><br><span class=\"line\">            <span class=\"attr\">issue_number</span>: issueNumber,</span><br><span class=\"line\">            body,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">main</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    core.<span class=\"title function_\">setFailed</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@actions/core</code>和<code>@actions/github</code>是github官方提供的js包，前者可以方便的读取入参等，后者可以方便的操作github REST API。</p>\n<p><code>main</code>函数的代码就是原生javascript，不一一解释了，主要通过<code>uniqueIdentifier</code>来判断是否发布过评论，如果是，就更新评论，否则就创建评论。</p>\n<blockquote>\n<p>markdown语法<code>[^uniqueIdentifier]</code>表示脚注，不会被渲染。</p>\n</blockquote>\n<p><code>core.setFailed(err.message);</code>表示抛出退出代码。</p>\n<h2 id=\"config-x2F-webpack-config-js\"><a href=\"#config-x2F-webpack-config-js\" class=\"headerlink\" title=\"config&#x2F;webpack.config.js\"></a>config&#x2F;webpack.config.js</h2><p>打包用的，配置简单可用即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;node20&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;unique-comment&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;private&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/webpack.config.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@actions/core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.10.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@actions/github&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^6.0.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.89.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack-cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.1.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>没啥好说的，列出了依赖项。和一个打包脚本。</p>\n<h2 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>修改了<code>src/index.js</code>得<code>build</code>，然后push到github仓库。</p>\n<p>记得将<strong>dist</strong>目录也提交到github仓库。</p>\n<!--hexo-->\n\n<h1 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h1><p>现在，开始搞正经的了。</p>\n<p>先初始化项目，这个job的目的仅仅是为了缓存pnpm依赖项，如果你的项目的依赖项不经常更新，可以省略这个job，后续也不要<code>needs</code>这个job。</p>\n<p>将init改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">init:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br></pre></td></tr></table></figure>\n\n<p>相信经过对之前的job的了解，这里的配置就看起来很简单了。</p>\n<h2 id=\"Init-pnpm\"><a href=\"#Init-pnpm\" class=\"headerlink\" title=\"Init pnpm\"></a>Init pnpm</h2><p>使用第三方action，安装pnpm@^8。</p>\n<h2 id=\"Init-node\"><a href=\"#Init-node\" class=\"headerlink\" title=\"Init node\"></a>Init node</h2><p><code>cache: &#39;pnpm&#39;</code>指定缓存机制，它内部是利用了workflow的cache机制。</p>\n<h2 id=\"Install-dependencies\"><a href=\"#Install-dependencies\" class=\"headerlink\" title=\"Install dependencies\"></a>Install dependencies</h2><p>安装依赖项，触发缓存。</p>\n<!--hexo-->\n\n<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p>将eslint改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eslint:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">                  <span class=\"attr\">fetch-depth:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">eslint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let diffFiles = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`git</span> <span class=\"string\">diff</span> <span class=\"string\">--name-only</span> <span class=\"string\">origin/$&#123;&#123;github.base_ref&#125;&#125;`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">diffFiles</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">lintFiles</span> <span class=\"string\">=</span> <span class=\"string\">diffFiles.split(`\\n`).filter((file)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">file.endsWith(&#x27;.js&#x27;)</span> <span class=\"string\">||</span> <span class=\"string\">file.endsWith(&#x27;.ts&#x27;)</span> <span class=\"string\">||</span> <span class=\"string\">file.endsWith(&#x27;.tsx&#x27;)</span></span><br><span class=\"line\">                      &#125;<span class=\"string\">).join(&#x27;</span> <span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      await exec.exec(</span></span><br><span class=\"line\"><span class=\"string\">                        // &quot;pnpm run lint --format stylish&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                        `pnpm eslint $&#123;lintFiles&#125;`,</span></span><br><span class=\"line\"><span class=\"string\">                        [],</span></span><br><span class=\"line\"><span class=\"string\">                        &#123;</span></span><br><span class=\"line\"><span class=\"string\">                          // silent: true,</span></span><br><span class=\"line\"><span class=\"string\">                          ignoreReturnCode: true,</span></span><br><span class=\"line\"><span class=\"string\">                          listeners: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                            stdout: (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                                output += data.toString();</span></span><br><span class=\"line\"><span class=\"string\">                            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                            stderr: (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                                outerr += data.toString();</span></span><br><span class=\"line\"><span class=\"string\">                            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#125;</span></span><br><span class=\"line\"><span class=\"string\">                      );</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      if (outerr) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        return `:x: Some command execution errors, non-eslint business errors.`;</span></span><br><span class=\"line\"><span class=\"string\">                      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      const errorMatch = output.match(/(\\d+) errors?/);</span></span><br><span class=\"line\"><span class=\"string\">                      const warnMatch = output.match(/(\\d+) warnings?/);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      if (errorMatch &amp;&amp; errorMatch?.[1] !== &#x27;</span><span class=\"number\">0</span><span class=\"string\">&#x27;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        return `:x: $&#123;errorMatch?.[0]&#125; $&#123;warnMatch?.[0]&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      return `:white_check_mark: $&#123;errorMatch?.[0] || &#x27;</span><span class=\"number\">0</span> <span class=\"string\">error&#x27;&#125;</span> <span class=\"string\">$&#123;warnMatch?.[0]</span> <span class=\"string\">||</span> <span class=\"string\">&#x27;0 warning&#x27;</span><span class=\"string\">&#125;`;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"needs\"><a href=\"#needs\" class=\"headerlink\" title=\"needs\"></a>needs</h2><p>使用<code>needs</code>依赖init，可以使用到pnpm的缓存项，防止install太慢。</p>\n<blockquote>\n<p>因为eslint、typescript、unitTest都需要pnpm install，所以一个前置的init去缓存pnpm依赖项，可以加快后续的install速度。</p>\n</blockquote>\n<h2 id=\"outputs\"><a href=\"#outputs\" class=\"headerlink\" title=\"outputs\"></a>outputs</h2><p>job里的outputs，可以在依赖它的其他job中访问到。这里使用<code>$&#123;&#123; steps.lint.outputs.result &#125;&#125;</code>去获取该job中lint这个step里的output里的result。</p>\n<blockquote>\n<p>output有job和step两个维度，注意区分。</p>\n</blockquote>\n<h2 id=\"Run-eslint\"><a href=\"#Run-eslint\" class=\"headerlink\" title=\"Run eslint\"></a>Run eslint</h2><p>它uses了<code>actions/github-script@v7</code>，这是github官方提供的一个action，可以在<code>with.script</code>里写js代码去执行，同时它会注入一些变量到script中去，见它的<a href=\"https://github.com/actions/github-script/tree/v7/\">官方文档</a>。</p>\n<blockquote>\n<p>对于简单的js代码，可以使用这个action去完成，不用再去写一个js文件。</p>\n</blockquote>\n<p><code>result-encoding</code>是指定script返回的数据格式的，默认是json，这指定为string。</p>\n<blockquote>\n<p>为什么script里return了string，还要指定为string呢？<br>因为<code>return &#39;hello&#39;</code>在json encode后是<code>&#39;&quot;hello&quot;&#39;</code>，而string encode后为<code>&#39;hello&#39;</code>。</p>\n</blockquote>\n<p>script里是原生的js代码了，里面的<code>exec</code>是该action注入的变量，用来执行shell命令。</p>\n<p>这段js代码做了两个事情，一是<code>git diff</code>获取pr中改动的文件列表，二是<code>eslint</code>检查这些增量文件，最后返回处理的结果。</p>\n<h2 id=\"fetch-depth\"><a href=\"#fetch-depth\" class=\"headerlink\" title=\"fetch-depth\"></a>fetch-depth</h2><p>Init repo这个step里设置了<code>fetch-depth: 0</code>，不然获取不到完整的git分支，具体看<code>actions/checkout</code>的解释，涉及到git的知识不展开细说了。</p>\n<h2 id=\"steps-lint-outputs-result\"><a href=\"#steps-lint-outputs-result\" class=\"headerlink\" title=\"steps.lint.outputs.result\"></a>steps.lint.outputs.result</h2><p><code>steps.lint.outputs.result</code>为什么能拿到lint step里的output.result呢？因为<code>actions/github-script</code>这个action内部将script的返回值，设置到<code>$GITHUB_OUTPUT</code>里了，且键名为<code>result</code>。</p>\n<!--hexo-->\n\n<h1 id=\"typescript\"><a href=\"#typescript\" class=\"headerlink\" title=\"typescript\"></a>typescript</h1><p>和eslint的配置大同小异，只是改了对检测结果的判断。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">typescript:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`pnpm</span> <span class=\"string\">run</span> <span class=\"string\">-r</span> <span class=\"string\">lint:ts`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">output</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">stderr:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">outerr</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(outerr)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">Some</span> <span class=\"string\">command</span> <span class=\"string\">execution</span> <span class=\"string\">errors</span>, <span class=\"literal\">no</span> <span class=\"string\">business</span> <span class=\"string\">errors.`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">errorMatch</span> <span class=\"string\">=</span> <span class=\"string\">output.match(/error</span> <span class=\"string\">TS/g);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(errorMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">errorMatch?.length</span>&#125; <span class=\"string\">errors`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">return</span> <span class=\"string\">`:white_check_mark:</span> <span class=\"string\">$&#123;&#x27;0</span> <span class=\"string\">error&#x27;&#125;`;</span></span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"unitTest\"><a href=\"#unitTest\" class=\"headerlink\" title=\"unitTest\"></a>unitTest</h1><p>和eslint的配置大同小异，只是改了对检测结果的判断。唯一的区别是jest的检测结果是输出到stderr，见<a href=\"https://github.com/jestjs/jest/issues/5064%E3%80%82\">https://github.com/jestjs/jest/issues/5064。</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unitTest:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm remove @nike/eslint-multi-formatter || true</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm remove @nike/svg-packer || true</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`pnpm</span> <span class=\"string\">run</span> <span class=\"string\">test`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">output</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">stderr:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">outerr</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">//</span> <span class=\"string\">why</span> <span class=\"string\">use</span> <span class=\"string\">outerr?</span> <span class=\"string\">https://github.com/jestjs/jest/issues/5064</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">failMatch</span> <span class=\"string\">=</span> <span class=\"string\">outerr.match(/Test</span> <span class=\"attr\">Suites:</span> <span class=\"string\">\\d+</span> <span class=\"string\">failed/);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(failMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">failMatch?.</span>[<span class=\"number\">0</span>]&#125;<span class=\"string\">`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">errorMatch</span> <span class=\"string\">=</span> <span class=\"string\">outerr.match(/Jest:</span> <span class=\"string\">&quot;global&quot;</span> <span class=\"string\">coverage</span> <span class=\"string\">threshold</span> <span class=\"string\">for</span> <span class=\"string\">lines</span> <span class=\"string\">\\([0-9\\.]+%\\)</span> <span class=\"attr\">not met:</span> [<span class=\"number\">0</span><span class=\"number\">-9</span><span class=\"string\">\\.</span>]<span class=\"string\">+%/);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(errorMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">errorMatch?.</span>[<span class=\"number\">0</span>]&#125;<span class=\"string\">`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">return</span> <span class=\"string\">`:white_check_mark:</span> <span class=\"string\">passed`;</span></span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"replyResult\"><a href=\"#replyResult\" class=\"headerlink\" title=\"replyResult\"></a>replyResult</h1><p>最后，将几个检测的结果进行汇总，回复到pr里就行了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">replyResult:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">replyChecking</span>, <span class=\"string\">eslint</span>, <span class=\"string\">typescript</span>, <span class=\"string\">unitTest</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">date</span> <span class=\"string\">time</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">getDateTime</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;result=$(TZ=Asia/Shanghai date)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">&quot;$GITHUB_OUTPUT&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">comment</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/unique-comment</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">uniqueIdentifier:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workflow</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">                  <span class=\"attr\">body:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      ## Eslint Check Result</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.eslint.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">## Typescript Check Result</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.typescript.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">## UnitTest Check Result</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.unitTest.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">Commented</span> <span class=\"string\">by</span> <span class=\"string\">Action</span> [<span class=\"string\">$<span class=\"template-variable\">&#123;&#123;github.workflow&#125;&#125;</span></span>]<span class=\"string\">($&#123;&#123;github.event.repository.html_url&#125;&#125;/actions/runs/$&#123;&#123;github.run_id&#125;&#125;),</span> <span class=\"string\">last</span> <span class=\"string\">updated</span> <span class=\"string\">on</span> <span class=\"string\">$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;.</span></span><br></pre></td></tr></table></figure>\n\n<p>和replyChecking差不多，在body里使用<code>$&#123;&#123;needs.eslint.outputs.result&#125;&#125;</code>去读取了eslint job的outputs。</p>\n<h2 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>去发起新的pr，故意提交一个有eslint error的js&#x2F;ts文件，看看表现吧~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/36\">https://github.com/taoliujun/blog/issues/36</a></p>\n<!--hexo\n---\nurl: github-actions-sample-eslint-in-pull-request\ntags:\n  - github actions\n---\n-->\n\n<p>一个在pull request发起的时候执行eslint检测的workflow，<a href=\"https://github.com/taoliujun/npm-packages/blob/master/.github/workflows/check-pull-request.yml\">点此查看完整代码</a>，它实现的功能如下：</p>\n<ul>\n<li>在pull request创建、更新的时候执行。</li>\n<li>先回复一个评论，告诉用户正在运行。</li>\n<li>初始化仓库，并安装依赖，产生依赖缓存。</li>\n<li>运行eslint增量检查。</li>\n<li>运行typescript检查。</li>\n<li>运行jest检查。</li>\n<li>更新之前的评论，回复检查的结果。</li>\n</ul>\n<p>运行截图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e\" alt=\"Alt text\"></p>\n<p>为避免歧义，涉及到github action的术语都是英文的。术语介绍如下：</p>\n<ul>\n<li>workflow，工作流，可以理解为yml文件。</li>\n<li>jobs，工作，一个workflow可以包含多个job，并行执行。</li>\n<li>steps，作业，一个job可以包含多个step，串行执行。</li>\n<li>action，操作，作业中具体的执行。</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871790603\">初始化workflow</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871806576\">reply checking</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871818126\">.&#x2F;.github&#x2F;actions&#x2F;unique-comment</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862632\">init</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862779\">eslint</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871862850\">typescript</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871863037\">unit test</a></li>\n<li><a href=\"https://github.com/taoliujun/blog/issues/36#issuecomment-1871863117\">reply result</a></li>\n</ul>\n<!--hexo-->\n\n<h1 id=\"初始化workflow\"><a href=\"#初始化workflow\" class=\"headerlink\" title=\"初始化workflow\"></a>初始化workflow</h1><p>在项目中新建文件<code>.github/workflows/check-pull-request.yml</code>，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">test</span> <span class=\"string\">check</span> <span class=\"string\">pull</span> <span class=\"string\">request</span></span><br><span class=\"line\"><span class=\"attr\">run-name:</span> <span class=\"string\">&#x27;check pull request #$<span class=\"template-variable\">&#123;&#123; github.event.pull_request.number &#125;&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">    <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">        <span class=\"attr\">types:</span> [<span class=\"string\">opened</span>, <span class=\"string\">synchronize</span>, <span class=\"string\">reopened</span>]</span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">    <span class=\"attr\">replyChecking:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;replyChecking&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">init:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;init&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">eslint:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;eslint&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">typescript:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;typescript&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">unitTest:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;unitTest&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">replyResult:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">replyChecking</span>, <span class=\"string\">eslint</span>, <span class=\"string\">typescript</span>, <span class=\"string\">unitTest</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;replyResult&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"name和run-name\"><a href=\"#name和run-name\" class=\"headerlink\" title=\"name和run-name\"></a>name和run-name</h2><p>给workflow命名为<code>check pull request</code>，它会出现在Actions页面的左侧菜单中。运行实例名为<code>check pull request #44</code>，出现在右侧的运行列表中。如图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/c1371ff2-8fc3-4e5b-8b60-3c572419938b\"></p>\n<p><code>run-name</code>中的<code>$&#123;&#123; github.event.pull_request.number &#125;&#125;</code>是workflow的上下文，这里读取了上下文中的pr编号。</p>\n<h2 id=\"on\"><a href=\"#on\" class=\"headerlink\" title=\"on\"></a>on</h2><p><code>on</code>指定了workflow的触发条件，这里配置了在pr创建、同步、重新打开的时候，触发该workflow。</p>\n<h2 id=\"jobs\"><a href=\"#jobs\" class=\"headerlink\" title=\"jobs\"></a>jobs</h2><p>按照设想，需要定义几个job，分别是：</p>\n<ul>\n<li>replyChecking：回复用户正在检查中</li>\n<li>init：初始化仓库，缓存依赖项</li>\n<li>eslint：运行eslint检查</li>\n<li>typescript：运行typescript检查</li>\n<li>unitTest：运行单元测试</li>\n<li>replyResult：回复用户检查结果</li>\n</ul>\n<p><code>jobs</code>是并行运行的，聪明如你肯定发现了，eslint、typescript、unitTest这三个job会涉及到安装npm依赖，所以它们最好在init后执行，确保依赖已经缓存了。</p>\n<p>其次，replyResult肯定要拿到eslint等job的结果才能执行，所以使用了<code>needs</code>管理它们的执行依赖关系。</p>\n<h3 id=\"runs-on\"><a href=\"#runs-on\" class=\"headerlink\" title=\"runs-on\"></a>runs-on</h3><p>每个job都运行在独立的容器中，github官方提供了windows、macos、linux多种容器，这里使用了ubuntu容器。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>发起一个pr，看到Actions页面出现了新的运行实例，点击进去，可以看到各个job的运行情况和依赖关系：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/09c86bc1-ada1-41c3-9f8f-7e6c46f8204e\"></p>\n<!--hexo-->\n\n<h1 id=\"replyChecking\"><a href=\"#replyChecking\" class=\"headerlink\" title=\"replyChecking\"></a>replyChecking</h1><p>在进行eslint检测之前，先在pr里回复<code>checking</code>，并且带上拽酷炫的话。将replyChecking改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">replyChecking:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">          <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">          <span class=\"attr\">with:</span></span><br><span class=\"line\">              <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">date</span> <span class=\"string\">time</span></span><br><span class=\"line\">          <span class=\"attr\">id:</span> <span class=\"string\">getDateTime</span></span><br><span class=\"line\">          <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;result=$(TZ=Asia/Shanghai date)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">&quot;$GITHUB_OUTPUT&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">comment</span></span><br><span class=\"line\">          <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/unique-comment</span></span><br><span class=\"line\">          <span class=\"attr\">with:</span></span><br><span class=\"line\">              <span class=\"attr\">uniqueIdentifier:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workflow</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">              <span class=\"attr\">body:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                  **Checking...**</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                  <span class=\"string\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">                  <span class=\"string\">Commented</span> <span class=\"string\">by</span> <span class=\"string\">Action</span> [<span class=\"string\">$<span class=\"template-variable\">&#123;&#123;github.workflow&#125;&#125;</span></span>]<span class=\"string\">($&#123;&#123;github.event.repository.html_url&#125;&#125;/actions/runs/$&#123;&#123;github.run_id&#125;&#125;),</span> <span class=\"string\">last</span> <span class=\"string\">updated</span> <span class=\"string\">on</span> <span class=\"string\">$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;.</span></span><br></pre></td></tr></table></figure>\n\n<p><code>steps</code>每一步里<code>name</code>、<code>id</code>是可选的，<code>name</code>在Actions详情页面里会显示，更直观的看到step的名称，推荐写上。</p>\n<h2 id=\"Checkout\"><a href=\"#Checkout\" class=\"headerlink\" title=\"Checkout\"></a>Checkout</h2><p><code>uses</code>表示使用一个action，名为<code>actions/checkout@v4</code>，它用来拉取仓库。</p>\n<blockquote>\n<p>同其他编程语言一样，重复的action可以封装起来。<a href=\"https://github.com/marketplace?type=actions\">action市场</a>提供了很多。</p>\n</blockquote>\n<p><code>with</code>属性指定了该action的输入参数，每个action的参数不尽相同。</p>\n<p><code>ref</code>参数表示要拉取的分支，<code>$&#123;&#123;github.head_ref&#125;&#125;</code>也是一个上下文，表示当前pr的源分支。</p>\n<h2 id=\"Get-Date-time\"><a href=\"#Get-Date-time\" class=\"headerlink\" title=\"Get Date time\"></a>Get Date time</h2><p>这step还写了<code>id</code>，表示该step在该job中的唯一标识，为什么要写呢？是为了下一步step能根据<code>id</code>读取到它的<code>output</code>。</p>\n<blockquote>\n<p><strong>output</strong>是workflow中非常重要的概念，它用于在step之间、job之间分享简单的数据。</p>\n</blockquote>\n<p><code>run</code>就是在容器中跑一个命令，这里跑了一个unix bash命令，将当前时间写入到<code>$GITHUB_OUTPUT</code>中，键名为<code>result</code>。</p>\n<blockquote>\n<p><code>$GITHUB_OUTPUT</code>是workflow注入到容器中的一个路径，用于存放output。</p>\n</blockquote>\n<h2 id=\"Create-or-update-a-comment\"><a href=\"#Create-or-update-a-comment\" class=\"headerlink\" title=\"Create or update a comment\"></a>Create or update a comment</h2><p><code>uses</code>使用了本地的action，这个action用于创建或更新一个唯一回复，下一节说。</p>\n<blockquote>\n<p>有时候，官方或市场的action并不能满足你的需要，就得自己写一个了。</p>\n</blockquote>\n<p>同理，该action也有<code>with</code>属性，<code>uniqueIdentifier</code>是回复评论的唯一标识，<code>body</code>是回复的内容，内容使用了markdown语法，里面还涉及到上下文不一一细讲了。只说<code>$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;</code>这个上下文表示获取getDateTime这个step中，键名为<code>result</code>的值。</p>\n<p>如果你不需要在内容里插入时间，那么上面的<code>Get Date time</code>就可以省略了。</p>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>因为我已经有完整的代码了，所以运行后，pr中会有一个回复，如图：</p>\n<p><img src=\"https://github.com/taoliujun/blog/assets/5689134/42396a84-b798-4f4e-9f39-5bf92a8acb15\"></p>\n<!--hexo-->\n\n<h1 id=\"x2F-github-x2F-actions-x2F-unique-comment\"><a href=\"#x2F-github-x2F-actions-x2F-unique-comment\" class=\"headerlink\" title=\".&#x2F;.github&#x2F;actions&#x2F;unique-comment\"></a>.&#x2F;.github&#x2F;actions&#x2F;unique-comment</h1><p>这是一个封装的javascript action，用于对issue创建、更新唯一评论。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>创建目录<code>./.github/actions/unique-comment</code>，最终目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── action.yml</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   └── webpack.config.js</span><br><span class=\"line\">├── dist</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   └── index.js.LICENSE.txt</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    └── index.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"action-yml\"><a href=\"#action-yml\" class=\"headerlink\" title=\"action.yml\"></a>action.yml</h2><p>这是action的配置文件，必须存在，内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">unique-comment</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">unique</span> <span class=\"string\">comment</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">runs:</span></span><br><span class=\"line\">    <span class=\"attr\">using:</span> <span class=\"string\">&#x27;node20&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">main:</span> <span class=\"string\">&#x27;./dist/index.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">inputs:</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;GitHub token&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.token</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">owner:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Repository owner&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.repository.owner.login</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Repository name&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.repository.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">issue_number:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Issue number&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.event.number</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">body:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Comment body&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">uniqueIdentifier:</span></span><br><span class=\"line\">        <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Unique identifier for comment&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">required:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">default:</span> <span class=\"string\">&#x27;unique-comment&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>大部分属性不一一细讲了，都是简单的英文望文生义即可。</p>\n<p><code>runs</code>表示运行在<code>node20</code>环境下，入口文件为<code>./dist/index.js</code>。</p>\n<p><code>inputs</code>表示接受的参数，也就是之前提到的<code>with</code>属性里要输入的参数。用<code>required</code>表示是否必须传入，<code>default</code>表示默认值。</p>\n<h2 id=\"src-x2F-index-js\"><a href=\"#src-x2F-index-js\" class=\"headerlink\" title=\"src&#x2F;index.js\"></a>src&#x2F;index.js</h2><p>为什么入口文件是<code>dist/index.js</code>，而不是<code>src/index.js</code>呢？因为要引用一些github官方提供的快捷操作github REST API的js包去操作issue评论(pull request也是一种issue)，最终打包后的文件才能在工作流中稳妥的运行。所以，写好<code>src/index.js</code>，再打包就行。</p>\n<p>该文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> core = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@actions/core&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> github = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@actions/github&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">main</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> owner = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;owner&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> repo = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;repo&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> issueNumber = core.<span class=\"title function_\">getInput</span>(<span class=\"string\">&#x27;issue_number&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uniqueIdentifier = <span class=\"string\">`[^uniqueIdentifier]: <span class=\"subst\">$&#123;core.getInput(<span class=\"string\">&#x27;uniqueIdentifier&#x27;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"string\">`<span class=\"subst\">$&#123;core.getInput(<span class=\"string\">&#x27;body&#x27;</span>)&#125;</span>\\n\\n<span class=\"subst\">$&#123;uniqueIdentifier&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"title function_\">debug</span>(<span class=\"string\">`uniqueIdentifier is <span class=\"subst\">$&#123;uniqueIdentifier&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> octokit = github.<span class=\"title function_\">getOctokit</span>(token);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> comments = <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">listComments</span>(&#123;</span><br><span class=\"line\">        owner,</span><br><span class=\"line\">        repo,</span><br><span class=\"line\">        <span class=\"attr\">issue_number</span>: issueNumber,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> botComment = comments.<span class=\"property\">data</span>.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.<span class=\"property\">body</span>.<span class=\"title function_\">includes</span>(uniqueIdentifier));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (botComment) &#123;</span><br><span class=\"line\">        core.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;update comment successfully.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">updateComment</span>(&#123;</span><br><span class=\"line\">            owner,</span><br><span class=\"line\">            repo,</span><br><span class=\"line\">            <span class=\"attr\">comment_id</span>: botComment.<span class=\"property\">id</span>,</span><br><span class=\"line\">            body,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        core.<span class=\"title function_\">info</span>(<span class=\"string\">&#x27;create comment successfully.&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> octokit.<span class=\"property\">rest</span>.<span class=\"property\">issues</span>.<span class=\"title function_\">createComment</span>(&#123;</span><br><span class=\"line\">            owner,</span><br><span class=\"line\">            repo,</span><br><span class=\"line\">            <span class=\"attr\">issue_number</span>: issueNumber,</span><br><span class=\"line\">            body,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">main</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    core.<span class=\"title function_\">setFailed</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@actions/core</code>和<code>@actions/github</code>是github官方提供的js包，前者可以方便的读取入参等，后者可以方便的操作github REST API。</p>\n<p><code>main</code>函数的代码就是原生javascript，不一一解释了，主要通过<code>uniqueIdentifier</code>来判断是否发布过评论，如果是，就更新评论，否则就创建评论。</p>\n<blockquote>\n<p>markdown语法<code>[^uniqueIdentifier]</code>表示脚注，不会被渲染。</p>\n</blockquote>\n<p><code>core.setFailed(err.message);</code>表示抛出退出代码。</p>\n<h2 id=\"config-x2F-webpack-config-js\"><a href=\"#config-x2F-webpack-config-js\" class=\"headerlink\" title=\"config&#x2F;webpack.config.js\"></a>config&#x2F;webpack.config.js</h2><p>打包用的，配置简单可用即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&#x27;node20&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;unique-comment&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;private&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config ./config/webpack.config.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@actions/core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.10.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@actions/github&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^6.0.0&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.89.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack-cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.1.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>没啥好说的，列出了依赖项。和一个打包脚本。</p>\n<h2 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>修改了<code>src/index.js</code>得<code>build</code>，然后push到github仓库。</p>\n<p>记得将<strong>dist</strong>目录也提交到github仓库。</p>\n<!--hexo-->\n\n<h1 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h1><p>现在，开始搞正经的了。</p>\n<p>先初始化项目，这个job的目的仅仅是为了缓存pnpm依赖项，如果你的项目的依赖项不经常更新，可以省略这个job，后续也不要<code>needs</code>这个job。</p>\n<p>将init改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">init:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br></pre></td></tr></table></figure>\n\n<p>相信经过对之前的job的了解，这里的配置就看起来很简单了。</p>\n<h2 id=\"Init-pnpm\"><a href=\"#Init-pnpm\" class=\"headerlink\" title=\"Init pnpm\"></a>Init pnpm</h2><p>使用第三方action，安装pnpm@^8。</p>\n<h2 id=\"Init-node\"><a href=\"#Init-node\" class=\"headerlink\" title=\"Init node\"></a>Init node</h2><p><code>cache: &#39;pnpm&#39;</code>指定缓存机制，它内部是利用了workflow的cache机制。</p>\n<h2 id=\"Install-dependencies\"><a href=\"#Install-dependencies\" class=\"headerlink\" title=\"Install dependencies\"></a>Install dependencies</h2><p>安装依赖项，触发缓存。</p>\n<!--hexo-->\n\n<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p>将eslint改成如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">eslint:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">                  <span class=\"attr\">fetch-depth:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">eslint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let diffFiles = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`git</span> <span class=\"string\">diff</span> <span class=\"string\">--name-only</span> <span class=\"string\">origin/$&#123;&#123;github.base_ref&#125;&#125;`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">diffFiles</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">lintFiles</span> <span class=\"string\">=</span> <span class=\"string\">diffFiles.split(`\\n`).filter((file)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">file.endsWith(&#x27;.js&#x27;)</span> <span class=\"string\">||</span> <span class=\"string\">file.endsWith(&#x27;.ts&#x27;)</span> <span class=\"string\">||</span> <span class=\"string\">file.endsWith(&#x27;.tsx&#x27;)</span></span><br><span class=\"line\">                      &#125;<span class=\"string\">).join(&#x27;</span> <span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      await exec.exec(</span></span><br><span class=\"line\"><span class=\"string\">                        // &quot;pnpm run lint --format stylish&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                        `pnpm eslint $&#123;lintFiles&#125;`,</span></span><br><span class=\"line\"><span class=\"string\">                        [],</span></span><br><span class=\"line\"><span class=\"string\">                        &#123;</span></span><br><span class=\"line\"><span class=\"string\">                          // silent: true,</span></span><br><span class=\"line\"><span class=\"string\">                          ignoreReturnCode: true,</span></span><br><span class=\"line\"><span class=\"string\">                          listeners: &#123;</span></span><br><span class=\"line\"><span class=\"string\">                            stdout: (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                                output += data.toString();</span></span><br><span class=\"line\"><span class=\"string\">                            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                            stderr: (data) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"string\">                                outerr += data.toString();</span></span><br><span class=\"line\"><span class=\"string\">                            &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                          &#125;,</span></span><br><span class=\"line\"><span class=\"string\">                        &#125;</span></span><br><span class=\"line\"><span class=\"string\">                      );</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      if (outerr) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        return `:x: Some command execution errors, non-eslint business errors.`;</span></span><br><span class=\"line\"><span class=\"string\">                      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      const errorMatch = output.match(/(\\d+) errors?/);</span></span><br><span class=\"line\"><span class=\"string\">                      const warnMatch = output.match(/(\\d+) warnings?/);</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      if (errorMatch &amp;&amp; errorMatch?.[1] !== &#x27;</span><span class=\"number\">0</span><span class=\"string\">&#x27;) &#123;</span></span><br><span class=\"line\"><span class=\"string\">                        return `:x: $&#123;errorMatch?.[0]&#125; $&#123;warnMatch?.[0]&#125;`;</span></span><br><span class=\"line\"><span class=\"string\">                      &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">                      return `:white_check_mark: $&#123;errorMatch?.[0] || &#x27;</span><span class=\"number\">0</span> <span class=\"string\">error&#x27;&#125;</span> <span class=\"string\">$&#123;warnMatch?.[0]</span> <span class=\"string\">||</span> <span class=\"string\">&#x27;0 warning&#x27;</span><span class=\"string\">&#125;`;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"needs\"><a href=\"#needs\" class=\"headerlink\" title=\"needs\"></a>needs</h2><p>使用<code>needs</code>依赖init，可以使用到pnpm的缓存项，防止install太慢。</p>\n<blockquote>\n<p>因为eslint、typescript、unitTest都需要pnpm install，所以一个前置的init去缓存pnpm依赖项，可以加快后续的install速度。</p>\n</blockquote>\n<h2 id=\"outputs\"><a href=\"#outputs\" class=\"headerlink\" title=\"outputs\"></a>outputs</h2><p>job里的outputs，可以在依赖它的其他job中访问到。这里使用<code>$&#123;&#123; steps.lint.outputs.result &#125;&#125;</code>去获取该job中lint这个step里的output里的result。</p>\n<blockquote>\n<p>output有job和step两个维度，注意区分。</p>\n</blockquote>\n<h2 id=\"Run-eslint\"><a href=\"#Run-eslint\" class=\"headerlink\" title=\"Run eslint\"></a>Run eslint</h2><p>它uses了<code>actions/github-script@v7</code>，这是github官方提供的一个action，可以在<code>with.script</code>里写js代码去执行，同时它会注入一些变量到script中去，见它的<a href=\"https://github.com/actions/github-script/tree/v7/\">官方文档</a>。</p>\n<blockquote>\n<p>对于简单的js代码，可以使用这个action去完成，不用再去写一个js文件。</p>\n</blockquote>\n<p><code>result-encoding</code>是指定script返回的数据格式的，默认是json，这指定为string。</p>\n<blockquote>\n<p>为什么script里return了string，还要指定为string呢？<br>因为<code>return &#39;hello&#39;</code>在json encode后是<code>&#39;&quot;hello&quot;&#39;</code>，而string encode后为<code>&#39;hello&#39;</code>。</p>\n</blockquote>\n<p>script里是原生的js代码了，里面的<code>exec</code>是该action注入的变量，用来执行shell命令。</p>\n<p>这段js代码做了两个事情，一是<code>git diff</code>获取pr中改动的文件列表，二是<code>eslint</code>检查这些增量文件，最后返回处理的结果。</p>\n<h2 id=\"fetch-depth\"><a href=\"#fetch-depth\" class=\"headerlink\" title=\"fetch-depth\"></a>fetch-depth</h2><p>Init repo这个step里设置了<code>fetch-depth: 0</code>，不然获取不到完整的git分支，具体看<code>actions/checkout</code>的解释，涉及到git的知识不展开细说了。</p>\n<h2 id=\"steps-lint-outputs-result\"><a href=\"#steps-lint-outputs-result\" class=\"headerlink\" title=\"steps.lint.outputs.result\"></a>steps.lint.outputs.result</h2><p><code>steps.lint.outputs.result</code>为什么能拿到lint step里的output.result呢？因为<code>actions/github-script</code>这个action内部将script的返回值，设置到<code>$GITHUB_OUTPUT</code>里了，且键名为<code>result</code>。</p>\n<!--hexo-->\n\n<h1 id=\"typescript\"><a href=\"#typescript\" class=\"headerlink\" title=\"typescript\"></a>typescript</h1><p>和eslint的配置大同小异，只是改了对检测结果的判断。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">typescript:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">pnpm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`pnpm</span> <span class=\"string\">run</span> <span class=\"string\">-r</span> <span class=\"string\">lint:ts`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">output</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">stderr:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">outerr</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(outerr)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">Some</span> <span class=\"string\">command</span> <span class=\"string\">execution</span> <span class=\"string\">errors</span>, <span class=\"literal\">no</span> <span class=\"string\">business</span> <span class=\"string\">errors.`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">errorMatch</span> <span class=\"string\">=</span> <span class=\"string\">output.match(/error</span> <span class=\"string\">TS/g);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(errorMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">errorMatch?.length</span>&#125; <span class=\"string\">errors`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">return</span> <span class=\"string\">`:white_check_mark:</span> <span class=\"string\">$&#123;&#x27;0</span> <span class=\"string\">error&#x27;&#125;`;</span></span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"unitTest\"><a href=\"#unitTest\" class=\"headerlink\" title=\"unitTest\"></a>unitTest</h1><p>和eslint的配置大同小异，只是改了对检测结果的判断。唯一的区别是jest的检测结果是输出到stderr，见<a href=\"https://github.com/jestjs/jest/issues/5064%E3%80%82\">https://github.com/jestjs/jest/issues/5064。</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unitTest:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">init</span>]</span><br><span class=\"line\">        <span class=\"attr\">outputs:</span></span><br><span class=\"line\">            <span class=\"attr\">result:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.lint.outputs.result</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">repo</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">pnpm</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">pnpm/action-setup@v2</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">version:</span> <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Init</span> <span class=\"string\">node</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">node-version:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                  <span class=\"attr\">cache:</span> <span class=\"string\">&#x27;pnpm&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm remove @nike/eslint-multi-formatter || true</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm remove @nike/svg-packer || true</span></span><br><span class=\"line\"><span class=\"string\">                  pnpm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">lint</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/github-script@v7</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">result-encoding:</span> <span class=\"string\">string</span></span><br><span class=\"line\">                  <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      let output = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                      let outerr = &#x27;&#x27;;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">await</span> <span class=\"string\">exec.exec(</span></span><br><span class=\"line\">                        <span class=\"string\">`pnpm</span> <span class=\"string\">run</span> <span class=\"string\">test`,</span></span><br><span class=\"line\">                        []<span class=\"string\">,</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          <span class=\"string\">//</span> <span class=\"attr\">silent:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">ignoreReturnCode:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">                          <span class=\"attr\">listeners:</span> &#123;</span><br><span class=\"line\">                            <span class=\"attr\">stdout:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">output</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"attr\">stderr:</span> <span class=\"string\">(data)</span> <span class=\"string\">=&gt;</span> &#123;</span><br><span class=\"line\">                                <span class=\"string\">outerr</span> <span class=\"string\">+=</span> <span class=\"string\">data.toString();</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                          &#125;,</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      <span class=\"string\">);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">//</span> <span class=\"string\">why</span> <span class=\"string\">use</span> <span class=\"string\">outerr?</span> <span class=\"string\">https://github.com/jestjs/jest/issues/5064</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">failMatch</span> <span class=\"string\">=</span> <span class=\"string\">outerr.match(/Test</span> <span class=\"attr\">Suites:</span> <span class=\"string\">\\d+</span> <span class=\"string\">failed/);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(failMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">failMatch?.</span>[<span class=\"number\">0</span>]&#125;<span class=\"string\">`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">const</span> <span class=\"string\">errorMatch</span> <span class=\"string\">=</span> <span class=\"string\">outerr.match(/Jest:</span> <span class=\"string\">&quot;global&quot;</span> <span class=\"string\">coverage</span> <span class=\"string\">threshold</span> <span class=\"string\">for</span> <span class=\"string\">lines</span> <span class=\"string\">\\([0-9\\.]+%\\)</span> <span class=\"attr\">not met:</span> [<span class=\"number\">0</span><span class=\"number\">-9</span><span class=\"string\">\\.</span>]<span class=\"string\">+%/);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">if</span> <span class=\"string\">(errorMatch)</span> &#123;</span><br><span class=\"line\">                        <span class=\"string\">return</span> <span class=\"string\">`:x:</span> <span class=\"string\">$</span>&#123;<span class=\"string\">errorMatch?.</span>[<span class=\"number\">0</span>]&#125;<span class=\"string\">`;</span></span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">return</span> <span class=\"string\">`:white_check_mark:</span> <span class=\"string\">passed`;</span></span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"replyResult\"><a href=\"#replyResult\" class=\"headerlink\" title=\"replyResult\"></a>replyResult</h1><p>最后，将几个检测的结果进行汇总，回复到pr里就行了。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">replyResult:</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">        <span class=\"attr\">needs:</span> [<span class=\"string\">replyChecking</span>, <span class=\"string\">eslint</span>, <span class=\"string\">typescript</span>, <span class=\"string\">unitTest</span>]</span><br><span class=\"line\">        <span class=\"attr\">steps:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">ref:</span> <span class=\"string\">$&#123;&#123;github.head_ref&#125;&#125;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Get</span> <span class=\"string\">date</span> <span class=\"string\">time</span></span><br><span class=\"line\">              <span class=\"attr\">id:</span> <span class=\"string\">getDateTime</span></span><br><span class=\"line\">              <span class=\"attr\">run:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;result=$(TZ=Asia/Shanghai date)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">&quot;$GITHUB_OUTPUT&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">or</span> <span class=\"string\">update</span> <span class=\"string\">a</span> <span class=\"string\">comment</span></span><br><span class=\"line\">              <span class=\"attr\">uses:</span> <span class=\"string\">./.github/actions/unique-comment</span></span><br><span class=\"line\">              <span class=\"attr\">with:</span></span><br><span class=\"line\">                  <span class=\"attr\">uniqueIdentifier:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.workflow</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">                  <span class=\"attr\">body:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">                      ## Eslint Check Result</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.eslint.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">## Typescript Check Result</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.typescript.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">## UnitTest Check Result</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">$&#123;&#123;needs.unitTest.outputs.result&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"string\">Commented</span> <span class=\"string\">by</span> <span class=\"string\">Action</span> [<span class=\"string\">$<span class=\"template-variable\">&#123;&#123;github.workflow&#125;&#125;</span></span>]<span class=\"string\">($&#123;&#123;github.event.repository.html_url&#125;&#125;/actions/runs/$&#123;&#123;github.run_id&#125;&#125;),</span> <span class=\"string\">last</span> <span class=\"string\">updated</span> <span class=\"string\">on</span> <span class=\"string\">$&#123;&#123;steps.getDateTime.outputs.result&#125;&#125;.</span></span><br></pre></td></tr></table></figure>\n\n<p>和replyChecking差不多，在body里使用<code>$&#123;&#123;needs.eslint.outputs.result&#125;&#125;</code>去读取了eslint job的outputs。</p>\n<h2 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>去发起新的pr，故意提交一个有eslint error的js&#x2F;ts文件，看看表现吧~</p>\n"},{"title":"React公共状态利器 - Zustand","date":"2023-12-12T22:46:26.000Z","url":"react-zustand","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/35](https://github.com/taoliujun/blog/issues/35)\n\n<!--hexo\n---\nurl: react-zustand\ntags:\n  - zustand\n  - react store\n---\n-->\n\n官方文档：https://docs.pmnd.rs/zustand\n\n# 如何使用\n\n**Zustand** 是一个非常简单粗暴的全局状态管理库，它的使用有多简单呢？如下：\n\n```bash\n> pnpm add zustand\n```\n\n```ts\n// useFormStateStore.ts\nimport { create } from 'zustand';\n\ninterface State {\n    loading: boolean;\n    disabled: boolean;\n    setLoadingByAge: (value: number) => void;\n}\n\nexport const useFormStateStore = create<State>((set) => ({\n    loading: false,\n    disabled: false,\n    setLoadingByAge: (value) => {\n        set({ loading: value > 10 });\n    },\n}));\n```\n\n```tsx\n// app.tsx\nimport { useState, type FC } from 'react';\nimport { useFormStateStore } from './useFormStateStore';\nimport { Button } from '@/components/Button';\n\nconst Loading: FC = () => {\n    const { loading } = useFormStateStore();\n    return <div>loading: {String(loading)}</div>;\n};\n\nconst Disabled: FC = () => {\n    const { disabled } = useFormStateStore();\n    return <div>disabled: {String(disabled)}</div>;\n};\n\nconst Main: FC = () => {\n    const { setLoadingByAge } = useFormStateStore();\n    const [age, setAge] = useState(0);\n\n    return (\n        <div>\n            <Loading />\n            <br />\n            <Disabled />\n            <br />\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        loading: true,\n                    });\n                }}\n            >\n                set loading true\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        loading: false,\n                    });\n                }}\n            >\n                set loading false\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        disabled: true,\n                    });\n                }}\n            >\n                set disabled true\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        disabled: false,\n                    });\n                }}\n            >\n                set disabled false\n            </Button>\n            <br />\n            <input\n                type=\"number\"\n                value={age}\n                onChange={(e) => {\n                    setAge(Number(e.target.value));\n                }}\n            />\n            <br />\n            <Button\n                onClick={() => {\n                    setLoadingByAge(age);\n                }}\n            >\n                set loading by age\n            </Button>\n        </div>\n    );\n};\n\nexport default Main;\n```\n\n在`useFormStateStore.ts`中定义了状态，然后在`app.tsx`中使用，就是这么简单粗暴！这里有几点介绍下：\n\n- 对于简单的状态更新，使用`setState`方法就可以，它的参数是一个对象，这个对象就是你要更新的状态，它会和之前的状态进行合并，然后返回一个新的状态，从而触发组件更新。\n\n- 对于需要通用的逻辑处理的状态更新，参照`useFormStateStore.ts`中的`setLoadingByAge`方法，将它作为状态里的一个方法就行了。\n\n# Zustand\n\n使用非常简单，API也很少，它的原理是使用了`Proxy`，所以它的性能非常好。\n\n# 相比Redux\n\n相比Redux，Zustand的代码非常简单明了，不需要使用`connect`、`mapStateToProps`、`mapDispatchToProps`这些方法。\n\n# 相比React Context\n\nReact Context需要一个`Provider`包裹组件以传递状态，需要一个`useContext`使用状态，光从层级上就让人绕起来了。而Zustand只需要一个`create`方法，就可以使用了，且状态是全局的，不需要传递。\n\n\n\n\n","source":"_posts/react-zustand.md","raw":"---\ntitle: \"React公共状态利器 - Zustand\"\ndate: \"2023-12-13T06:46:26Z\"\ncategories:\n  - [React]\n\nurl: react-zustand\ntags:\n  - zustand\n  - react store\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/35](https://github.com/taoliujun/blog/issues/35)\n\n<!--hexo\n---\nurl: react-zustand\ntags:\n  - zustand\n  - react store\n---\n-->\n\n官方文档：https://docs.pmnd.rs/zustand\n\n# 如何使用\n\n**Zustand** 是一个非常简单粗暴的全局状态管理库，它的使用有多简单呢？如下：\n\n```bash\n> pnpm add zustand\n```\n\n```ts\n// useFormStateStore.ts\nimport { create } from 'zustand';\n\ninterface State {\n    loading: boolean;\n    disabled: boolean;\n    setLoadingByAge: (value: number) => void;\n}\n\nexport const useFormStateStore = create<State>((set) => ({\n    loading: false,\n    disabled: false,\n    setLoadingByAge: (value) => {\n        set({ loading: value > 10 });\n    },\n}));\n```\n\n```tsx\n// app.tsx\nimport { useState, type FC } from 'react';\nimport { useFormStateStore } from './useFormStateStore';\nimport { Button } from '@/components/Button';\n\nconst Loading: FC = () => {\n    const { loading } = useFormStateStore();\n    return <div>loading: {String(loading)}</div>;\n};\n\nconst Disabled: FC = () => {\n    const { disabled } = useFormStateStore();\n    return <div>disabled: {String(disabled)}</div>;\n};\n\nconst Main: FC = () => {\n    const { setLoadingByAge } = useFormStateStore();\n    const [age, setAge] = useState(0);\n\n    return (\n        <div>\n            <Loading />\n            <br />\n            <Disabled />\n            <br />\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        loading: true,\n                    });\n                }}\n            >\n                set loading true\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        loading: false,\n                    });\n                }}\n            >\n                set loading false\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        disabled: true,\n                    });\n                }}\n            >\n                set disabled true\n            </Button>\n            <Button\n                onClick={() => {\n                    useFormStateStore.setState({\n                        disabled: false,\n                    });\n                }}\n            >\n                set disabled false\n            </Button>\n            <br />\n            <input\n                type=\"number\"\n                value={age}\n                onChange={(e) => {\n                    setAge(Number(e.target.value));\n                }}\n            />\n            <br />\n            <Button\n                onClick={() => {\n                    setLoadingByAge(age);\n                }}\n            >\n                set loading by age\n            </Button>\n        </div>\n    );\n};\n\nexport default Main;\n```\n\n在`useFormStateStore.ts`中定义了状态，然后在`app.tsx`中使用，就是这么简单粗暴！这里有几点介绍下：\n\n- 对于简单的状态更新，使用`setState`方法就可以，它的参数是一个对象，这个对象就是你要更新的状态，它会和之前的状态进行合并，然后返回一个新的状态，从而触发组件更新。\n\n- 对于需要通用的逻辑处理的状态更新，参照`useFormStateStore.ts`中的`setLoadingByAge`方法，将它作为状态里的一个方法就行了。\n\n# Zustand\n\n使用非常简单，API也很少，它的原理是使用了`Proxy`，所以它的性能非常好。\n\n# 相比Redux\n\n相比Redux，Zustand的代码非常简单明了，不需要使用`connect`、`mapStateToProps`、`mapDispatchToProps`这些方法。\n\n# 相比React Context\n\nReact Context需要一个`Provider`包裹组件以传递状态，需要一个`useContext`使用状态，光从层级上就让人绕起来了。而Zustand只需要一个`create`方法，就可以使用了，且状态是全局的，不需要传递。\n\n\n\n\n","slug":"react-zustand","published":1,"updated":"2024-01-03T09:13:36.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxk9r640001joorghsabmh1","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/35\">https://github.com/taoliujun/blog/issues/35</a></p>\n<!--hexo\n---\nurl: react-zustand\ntags:\n  - zustand\n  - react store\n---\n-->\n\n<p>官方文档：<a href=\"https://docs.pmnd.rs/zustand\">https://docs.pmnd.rs/zustand</a></p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p><strong>Zustand</strong> 是一个非常简单粗暴的全局状态管理库，它的使用有多简单呢？如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pnpm add zustand</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useFormStateStore.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; create &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;zustand&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">loading</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">disabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">setLoadingByAge</span>: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useFormStateStore = create&lt;<span class=\"title class_\">State</span>&gt;(<span class=\"function\">(<span class=\"params\">set</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">setLoadingByAge</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(&#123; <span class=\"attr\">loading</span>: value &gt; <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState, <span class=\"keyword\">type</span> <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useFormStateStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./useFormStateStore&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/Button&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Loading</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; loading &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>loading: &#123;String(loading)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Disabled</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; disabled &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>disabled: &#123;String(disabled)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; setLoadingByAge &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [age, setAge] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Disabled</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        loading: true,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading true</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        loading: false,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading false</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        disabled: true,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set disabled true</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        disabled: false,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set disabled false</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">value</span>=<span class=\"string\">&#123;age&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    setAge(Number(e.target.value));</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    setLoadingByAge(age);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading by age</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Main</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useFormStateStore.ts</code>中定义了状态，然后在<code>app.tsx</code>中使用，就是这么简单粗暴！这里有几点介绍下：</p>\n<ul>\n<li><p>对于简单的状态更新，使用<code>setState</code>方法就可以，它的参数是一个对象，这个对象就是你要更新的状态，它会和之前的状态进行合并，然后返回一个新的状态，从而触发组件更新。</p>\n</li>\n<li><p>对于需要通用的逻辑处理的状态更新，参照<code>useFormStateStore.ts</code>中的<code>setLoadingByAge</code>方法，将它作为状态里的一个方法就行了。</p>\n</li>\n</ul>\n<h1 id=\"Zustand\"><a href=\"#Zustand\" class=\"headerlink\" title=\"Zustand\"></a>Zustand</h1><p>使用非常简单，API也很少，它的原理是使用了<code>Proxy</code>，所以它的性能非常好。</p>\n<h1 id=\"相比Redux\"><a href=\"#相比Redux\" class=\"headerlink\" title=\"相比Redux\"></a>相比Redux</h1><p>相比Redux，Zustand的代码非常简单明了，不需要使用<code>connect</code>、<code>mapStateToProps</code>、<code>mapDispatchToProps</code>这些方法。</p>\n<h1 id=\"相比React-Context\"><a href=\"#相比React-Context\" class=\"headerlink\" title=\"相比React Context\"></a>相比React Context</h1><p>React Context需要一个<code>Provider</code>包裹组件以传递状态，需要一个<code>useContext</code>使用状态，光从层级上就让人绕起来了。而Zustand只需要一个<code>create</code>方法，就可以使用了，且状态是全局的，不需要传递。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/35\">https://github.com/taoliujun/blog/issues/35</a></p>\n<!--hexo\n---\nurl: react-zustand\ntags:\n  - zustand\n  - react store\n---\n-->\n\n<p>官方文档：<a href=\"https://docs.pmnd.rs/zustand\">https://docs.pmnd.rs/zustand</a></p>\n<h1 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h1><p><strong>Zustand</strong> 是一个非常简单粗暴的全局状态管理库，它的使用有多简单呢？如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; pnpm add zustand</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useFormStateStore.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; create &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;zustand&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">loading</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">disabled</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">    <span class=\"attr\">setLoadingByAge</span>: <span class=\"function\">(<span class=\"params\">value: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useFormStateStore = create&lt;<span class=\"title class_\">State</span>&gt;(<span class=\"function\">(<span class=\"params\">set</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">setLoadingByAge</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">set</span>(&#123; <span class=\"attr\">loading</span>: value &gt; <span class=\"number\">10</span> &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.tsx</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState, <span class=\"keyword\">type</span> <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useFormStateStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./useFormStateStore&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Button</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/Button&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Loading</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; loading &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>loading: &#123;String(loading)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Disabled</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; disabled &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>disabled: &#123;String(disabled)&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; setLoadingByAge &#125; = <span class=\"title function_\">useFormStateStore</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [age, setAge] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Loading</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Disabled</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        loading: true,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading true</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        loading: false,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading false</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        disabled: true,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set disabled true</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    useFormStateStore.setState(&#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        disabled: false,</span></span><br><span class=\"line\"><span class=\"language-xml\">                    &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set disabled false</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">value</span>=<span class=\"string\">&#123;age&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    setAge(Number(e.target.value));</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    setLoadingByAge(age);</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                set loading by age</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Main</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>useFormStateStore.ts</code>中定义了状态，然后在<code>app.tsx</code>中使用，就是这么简单粗暴！这里有几点介绍下：</p>\n<ul>\n<li><p>对于简单的状态更新，使用<code>setState</code>方法就可以，它的参数是一个对象，这个对象就是你要更新的状态，它会和之前的状态进行合并，然后返回一个新的状态，从而触发组件更新。</p>\n</li>\n<li><p>对于需要通用的逻辑处理的状态更新，参照<code>useFormStateStore.ts</code>中的<code>setLoadingByAge</code>方法，将它作为状态里的一个方法就行了。</p>\n</li>\n</ul>\n<h1 id=\"Zustand\"><a href=\"#Zustand\" class=\"headerlink\" title=\"Zustand\"></a>Zustand</h1><p>使用非常简单，API也很少，它的原理是使用了<code>Proxy</code>，所以它的性能非常好。</p>\n<h1 id=\"相比Redux\"><a href=\"#相比Redux\" class=\"headerlink\" title=\"相比Redux\"></a>相比Redux</h1><p>相比Redux，Zustand的代码非常简单明了，不需要使用<code>connect</code>、<code>mapStateToProps</code>、<code>mapDispatchToProps</code>这些方法。</p>\n<h1 id=\"相比React-Context\"><a href=\"#相比React-Context\" class=\"headerlink\" title=\"相比React Context\"></a>相比React Context</h1><p>React Context需要一个<code>Provider</code>包裹组件以传递状态，需要一个<code>useContext</code>使用状态，光从层级上就让人绕起来了。而Zustand只需要一个<code>create</code>方法，就可以使用了，且状态是全局的，不需要传递。</p>\n"},{"title":"AST 在 css module 自动匹配中的应用","date":"2023-07-26T00:03:32.000Z","url":"ast-in-css-module-auto-match","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/21](https://github.com/taoliujun/blog/issues/21)\n\n<!--hexo\n---\nurl: ast-in-css-module-auto-match\ntags:\n  - ast\n  - css module\n---\n-->\n\n# AST 在 css module 自动匹配中的应用\n\n我们已经非常明白为什么在项目中要使用 css modules，可直接说到“自动匹配”有点莫名其妙，所以有必要介绍下为什么提出这个问题。\n\n第一步，我想用官方的话来镇住大家。\n\n> [css modules](https://github.com/css-modules/css-modules)的官方描述：A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.\n\n官方只提供了一个规范的描述，本身并未提供工具去实现。但无需担心，常见的打包工具都支持了 css modules。比如 webpack 的[css-loader](https://webpack.js.org/loaders/css-loader/)。\n\n## css-loader\n\ncss-loader 在很早就支持 modules，只需要配置`modules`属性，程序员们使用它的方式是各种各样的。有设置 local modules，在 css 文件中使用`:global`来支持全局样式的；有设置 global modules，在 css 文件中使用`:local`来支持局部样式的。这些都是可以的，但是都需要在 css 文件中做一些特殊的标记，这样就会导致 css 文件的可读性变差。\n\n后来人们学会了配置根据 css 文件名中是否包含`.modules.`或`.global.`字符串来启用/禁用该文件的 modules 功能。于是项目里有大量的*.modules.css/*.global.css 文件，而通过文件名去匹配某个功能的开关却恰恰是程序设计的忌讳。\n\n## 符合直觉的自动识别\n\n我就在 \\*.modules.css 文件堆中浑浑噩噩的度过了好多年，直到近两年的某一天在[UmiJS](https://umijs.org/)脚手架中发现了这个奇特的细节。\n\n**使用`import xxx from './styles.css'`启用 modules，使用`import './styles.css'`启用 global。**\n\n这思路对我来说简直是惊为天人，无关乎它的技术细节。因为在直觉中，`import module`就是要直接执行它，而`import xxx from module`就是要使用它的某些东西。对于 css 是同样的，既要直接引入全局样式，又要使用局部样式。\n\n## 技术细节\n\nwebpack 的 module rules 支持使用`resourceQuery`去匹配模块文件名的 query 部分，所以为 css-loader 增加一个 rules 如下：\n\n```typescript\n{\n  test: /\\.css$/,\n  oneOf: [\n    {\n      resourceQuery: /modules/,\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader', options: { modules: true } },\n      ],\n    },\n    {\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader' },\n      ],\n    },\n  ],\n}\n```\n\n如此，使用`import xxx from './styles.css?modules'`就会命中第一个规则而启用 modules 功能了。\n\n但显然这样写太麻烦了，有什么办法让它在写`import xxx from './styles.css'`时候，自动加上`?modules`而启用 css modules 呢？\n\n答案就是使用 AST。由于项目几乎都在使用 babel 去处理 js 文件，所以可以直接使用 babel 插件去分析 AST 从而给 css 文件加上`?modules`后缀即可。就直接看[umijs 的插件代码](https://github.com/umijs/umi/blob/master/packages/babel-preset-umi/src/plugins/autoCSSModules.ts):\n\n```typescript\nimport * as Babel from \"@umijs/bundler-utils/compiled/babel/core\";\nimport * as t from \"@umijs/bundler-utils/compiled/babel/types\";\nimport { extname } from \"path\";\n\nconst CSS_EXT_NAMES = [\".css\", \".less\", \".sass\", \".scss\", \".stylus\", \".styl\"];\n\nexport default function () {\n  return {\n    visitor: {\n      ImportDeclaration(path: Babel.NodePath<t.ImportDeclaration>) {\n        const {\n          specifiers,\n          source,\n          source: { value },\n        } = path.node;\n        if (specifiers.length && CSS_EXT_NAMES.includes(extname(value))) {\n          source.value = `${value}?modules`;\n        }\n      },\n\n      // more codes\n    },\n  };\n}\n```\n\n如上代码中，AST `specifiers` 里有内容，说明是`import xxx from module`的形式，而`source.value`就是 css 文件的路径，所以直接加上`?modules`后缀即可。\n\n## 参考\n\n- https://github.com/css-modules/css-modules\n- https://webpack.js.org/loaders/css-loader/#modules\n- https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules\n\n\n\n\n","source":"_posts/ast-in-css-module-auto-match.md","raw":"---\ntitle: \"AST 在 css module 自动匹配中的应用\"\ndate: \"2023-07-26T08:03:32Z\"\ncategories:\n  - [JavaScript]\n  - [工程化]\n\nurl: ast-in-css-module-auto-match\ntags:\n  - ast\n  - css module\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/21](https://github.com/taoliujun/blog/issues/21)\n\n<!--hexo\n---\nurl: ast-in-css-module-auto-match\ntags:\n  - ast\n  - css module\n---\n-->\n\n# AST 在 css module 自动匹配中的应用\n\n我们已经非常明白为什么在项目中要使用 css modules，可直接说到“自动匹配”有点莫名其妙，所以有必要介绍下为什么提出这个问题。\n\n第一步，我想用官方的话来镇住大家。\n\n> [css modules](https://github.com/css-modules/css-modules)的官方描述：A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.\n\n官方只提供了一个规范的描述，本身并未提供工具去实现。但无需担心，常见的打包工具都支持了 css modules。比如 webpack 的[css-loader](https://webpack.js.org/loaders/css-loader/)。\n\n## css-loader\n\ncss-loader 在很早就支持 modules，只需要配置`modules`属性，程序员们使用它的方式是各种各样的。有设置 local modules，在 css 文件中使用`:global`来支持全局样式的；有设置 global modules，在 css 文件中使用`:local`来支持局部样式的。这些都是可以的，但是都需要在 css 文件中做一些特殊的标记，这样就会导致 css 文件的可读性变差。\n\n后来人们学会了配置根据 css 文件名中是否包含`.modules.`或`.global.`字符串来启用/禁用该文件的 modules 功能。于是项目里有大量的*.modules.css/*.global.css 文件，而通过文件名去匹配某个功能的开关却恰恰是程序设计的忌讳。\n\n## 符合直觉的自动识别\n\n我就在 \\*.modules.css 文件堆中浑浑噩噩的度过了好多年，直到近两年的某一天在[UmiJS](https://umijs.org/)脚手架中发现了这个奇特的细节。\n\n**使用`import xxx from './styles.css'`启用 modules，使用`import './styles.css'`启用 global。**\n\n这思路对我来说简直是惊为天人，无关乎它的技术细节。因为在直觉中，`import module`就是要直接执行它，而`import xxx from module`就是要使用它的某些东西。对于 css 是同样的，既要直接引入全局样式，又要使用局部样式。\n\n## 技术细节\n\nwebpack 的 module rules 支持使用`resourceQuery`去匹配模块文件名的 query 部分，所以为 css-loader 增加一个 rules 如下：\n\n```typescript\n{\n  test: /\\.css$/,\n  oneOf: [\n    {\n      resourceQuery: /modules/,\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader', options: { modules: true } },\n      ],\n    },\n    {\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader' },\n      ],\n    },\n  ],\n}\n```\n\n如此，使用`import xxx from './styles.css?modules'`就会命中第一个规则而启用 modules 功能了。\n\n但显然这样写太麻烦了，有什么办法让它在写`import xxx from './styles.css'`时候，自动加上`?modules`而启用 css modules 呢？\n\n答案就是使用 AST。由于项目几乎都在使用 babel 去处理 js 文件，所以可以直接使用 babel 插件去分析 AST 从而给 css 文件加上`?modules`后缀即可。就直接看[umijs 的插件代码](https://github.com/umijs/umi/blob/master/packages/babel-preset-umi/src/plugins/autoCSSModules.ts):\n\n```typescript\nimport * as Babel from \"@umijs/bundler-utils/compiled/babel/core\";\nimport * as t from \"@umijs/bundler-utils/compiled/babel/types\";\nimport { extname } from \"path\";\n\nconst CSS_EXT_NAMES = [\".css\", \".less\", \".sass\", \".scss\", \".stylus\", \".styl\"];\n\nexport default function () {\n  return {\n    visitor: {\n      ImportDeclaration(path: Babel.NodePath<t.ImportDeclaration>) {\n        const {\n          specifiers,\n          source,\n          source: { value },\n        } = path.node;\n        if (specifiers.length && CSS_EXT_NAMES.includes(extname(value))) {\n          source.value = `${value}?modules`;\n        }\n      },\n\n      // more codes\n    },\n  };\n}\n```\n\n如上代码中，AST `specifiers` 里有内容，说明是`import xxx from module`的形式，而`source.value`就是 css 文件的路径，所以直接加上`?modules`后缀即可。\n\n## 参考\n\n- https://github.com/css-modules/css-modules\n- https://webpack.js.org/loaders/css-loader/#modules\n- https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules\n\n\n\n\n","slug":"ast-in-css-module-auto-match","published":1,"updated":"2024-01-03T09:22:47.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxkljxw0000jgq982f5bfr9","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/21\">https://github.com/taoliujun/blog/issues/21</a></p>\n<!--hexo\n---\nurl: ast-in-css-module-auto-match\ntags:\n  - ast\n  - css module\n---\n-->\n\n<h1 id=\"AST-在-css-module-自动匹配中的应用\"><a href=\"#AST-在-css-module-自动匹配中的应用\" class=\"headerlink\" title=\"AST 在 css module 自动匹配中的应用\"></a>AST 在 css module 自动匹配中的应用</h1><p>我们已经非常明白为什么在项目中要使用 css modules，可直接说到“自动匹配”有点莫名其妙，所以有必要介绍下为什么提出这个问题。</p>\n<p>第一步，我想用官方的话来镇住大家。</p>\n<blockquote>\n<p><a href=\"https://github.com/css-modules/css-modules\">css modules</a>的官方描述：A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.</p>\n</blockquote>\n<p>官方只提供了一个规范的描述，本身并未提供工具去实现。但无需担心，常见的打包工具都支持了 css modules。比如 webpack 的<a href=\"https://webpack.js.org/loaders/css-loader/\">css-loader</a>。</p>\n<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a>css-loader</h2><p>css-loader 在很早就支持 modules，只需要配置<code>modules</code>属性，程序员们使用它的方式是各种各样的。有设置 local modules，在 css 文件中使用<code>:global</code>来支持全局样式的；有设置 global modules，在 css 文件中使用<code>:local</code>来支持局部样式的。这些都是可以的，但是都需要在 css 文件中做一些特殊的标记，这样就会导致 css 文件的可读性变差。</p>\n<p>后来人们学会了配置根据 css 文件名中是否包含<code>.modules.</code>或<code>.global.</code>字符串来启用&#x2F;禁用该文件的 modules 功能。于是项目里有大量的*.modules.css&#x2F;*.global.css 文件，而通过文件名去匹配某个功能的开关却恰恰是程序设计的忌讳。</p>\n<h2 id=\"符合直觉的自动识别\"><a href=\"#符合直觉的自动识别\" class=\"headerlink\" title=\"符合直觉的自动识别\"></a>符合直觉的自动识别</h2><p>我就在 *.modules.css 文件堆中浑浑噩噩的度过了好多年，直到近两年的某一天在<a href=\"https://umijs.org/\">UmiJS</a>脚手架中发现了这个奇特的细节。</p>\n<p><strong>使用<code>import xxx from &#39;./styles.css&#39;</code>启用 modules，使用<code>import &#39;./styles.css&#39;</code>启用 global。</strong></p>\n<p>这思路对我来说简直是惊为天人，无关乎它的技术细节。因为在直觉中，<code>import module</code>就是要直接执行它，而<code>import xxx from module</code>就是要使用它的某些东西。对于 css 是同样的，既要直接引入全局样式，又要使用局部样式。</p>\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><p>webpack 的 module rules 支持使用<code>resourceQuery</code>去匹配模块文件名的 query 部分，所以为 css-loader 增加一个 rules 如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">oneOf</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">resourceQuery</span>: <span class=\"regexp\">/modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">true</span> &#125; &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此，使用<code>import xxx from &#39;./styles.css?modules&#39;</code>就会命中第一个规则而启用 modules 功能了。</p>\n<p>但显然这样写太麻烦了，有什么办法让它在写<code>import xxx from &#39;./styles.css&#39;</code>时候，自动加上<code>?modules</code>而启用 css modules 呢？</p>\n<p>答案就是使用 AST。由于项目几乎都在使用 babel 去处理 js 文件，所以可以直接使用 babel 插件去分析 AST 从而给 css 文件加上<code>?modules</code>后缀即可。就直接看<a href=\"https://github.com/umijs/umi/blob/master/packages/babel-preset-umi/src/plugins/autoCSSModules.ts\">umijs 的插件代码</a>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Babel</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/bundler-utils/compiled/babel/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> t <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/bundler-utils/compiled/babel/types&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; extname &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CSS_EXT_NAMES</span> = [<span class=\"string\">&quot;.css&quot;</span>, <span class=\"string\">&quot;.less&quot;</span>, <span class=\"string\">&quot;.sass&quot;</span>, <span class=\"string\">&quot;.scss&quot;</span>, <span class=\"string\">&quot;.stylus&quot;</span>, <span class=\"string\">&quot;.styl&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">visitor</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">ImportDeclaration</span>(<span class=\"attr\">path</span>: <span class=\"title class_\">Babel</span>.<span class=\"property\">NodePath</span>&lt;t.<span class=\"property\">ImportDeclaration</span>&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">          specifiers,</span><br><span class=\"line\">          source,</span><br><span class=\"line\">          <span class=\"attr\">source</span>: &#123; value &#125;,</span><br><span class=\"line\">        &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specifiers.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable constant_\">CSS_EXT_NAMES</span>.<span class=\"title function_\">includes</span>(<span class=\"title function_\">extname</span>(value))) &#123;</span><br><span class=\"line\">          source.<span class=\"property\">value</span> = <span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span>?modules`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// more codes</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，AST <code>specifiers</code> 里有内容，说明是<code>import xxx from module</code>的形式，而<code>source.value</code>就是 css 文件的路径，所以直接加上<code>?modules</code>后缀即可。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/css-modules/css-modules\">https://github.com/css-modules/css-modules</a></li>\n<li><a href=\"https://webpack.js.org/loaders/css-loader/#modules\">https://webpack.js.org/loaders/css-loader/#modules</a></li>\n<li><a href=\"https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules\">https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/21\">https://github.com/taoliujun/blog/issues/21</a></p>\n<!--hexo\n---\nurl: ast-in-css-module-auto-match\ntags:\n  - ast\n  - css module\n---\n-->\n\n<h1 id=\"AST-在-css-module-自动匹配中的应用\"><a href=\"#AST-在-css-module-自动匹配中的应用\" class=\"headerlink\" title=\"AST 在 css module 自动匹配中的应用\"></a>AST 在 css module 自动匹配中的应用</h1><p>我们已经非常明白为什么在项目中要使用 css modules，可直接说到“自动匹配”有点莫名其妙，所以有必要介绍下为什么提出这个问题。</p>\n<p>第一步，我想用官方的话来镇住大家。</p>\n<blockquote>\n<p><a href=\"https://github.com/css-modules/css-modules\">css modules</a>的官方描述：A CSS Module is a CSS file in which all class names and animation names are scoped locally by default.</p>\n</blockquote>\n<p>官方只提供了一个规范的描述，本身并未提供工具去实现。但无需担心，常见的打包工具都支持了 css modules。比如 webpack 的<a href=\"https://webpack.js.org/loaders/css-loader/\">css-loader</a>。</p>\n<h2 id=\"css-loader\"><a href=\"#css-loader\" class=\"headerlink\" title=\"css-loader\"></a>css-loader</h2><p>css-loader 在很早就支持 modules，只需要配置<code>modules</code>属性，程序员们使用它的方式是各种各样的。有设置 local modules，在 css 文件中使用<code>:global</code>来支持全局样式的；有设置 global modules，在 css 文件中使用<code>:local</code>来支持局部样式的。这些都是可以的，但是都需要在 css 文件中做一些特殊的标记，这样就会导致 css 文件的可读性变差。</p>\n<p>后来人们学会了配置根据 css 文件名中是否包含<code>.modules.</code>或<code>.global.</code>字符串来启用&#x2F;禁用该文件的 modules 功能。于是项目里有大量的*.modules.css&#x2F;*.global.css 文件，而通过文件名去匹配某个功能的开关却恰恰是程序设计的忌讳。</p>\n<h2 id=\"符合直觉的自动识别\"><a href=\"#符合直觉的自动识别\" class=\"headerlink\" title=\"符合直觉的自动识别\"></a>符合直觉的自动识别</h2><p>我就在 *.modules.css 文件堆中浑浑噩噩的度过了好多年，直到近两年的某一天在<a href=\"https://umijs.org/\">UmiJS</a>脚手架中发现了这个奇特的细节。</p>\n<p><strong>使用<code>import xxx from &#39;./styles.css&#39;</code>启用 modules，使用<code>import &#39;./styles.css&#39;</code>启用 global。</strong></p>\n<p>这思路对我来说简直是惊为天人，无关乎它的技术细节。因为在直觉中，<code>import module</code>就是要直接执行它，而<code>import xxx from module</code>就是要使用它的某些东西。对于 css 是同样的，既要直接引入全局样式，又要使用局部样式。</p>\n<h2 id=\"技术细节\"><a href=\"#技术细节\" class=\"headerlink\" title=\"技术细节\"></a>技术细节</h2><p>webpack 的 module rules 支持使用<code>resourceQuery</code>去匹配模块文件名的 query 部分，所以为 css-loader 增加一个 rules 如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">  <span class=\"attr\">oneOf</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">resourceQuery</span>: <span class=\"regexp\">/modules/</span>,</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">true</span> &#125; &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">use</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此，使用<code>import xxx from &#39;./styles.css?modules&#39;</code>就会命中第一个规则而启用 modules 功能了。</p>\n<p>但显然这样写太麻烦了，有什么办法让它在写<code>import xxx from &#39;./styles.css&#39;</code>时候，自动加上<code>?modules</code>而启用 css modules 呢？</p>\n<p>答案就是使用 AST。由于项目几乎都在使用 babel 去处理 js 文件，所以可以直接使用 babel 插件去分析 AST 从而给 css 文件加上<code>?modules</code>后缀即可。就直接看<a href=\"https://github.com/umijs/umi/blob/master/packages/babel-preset-umi/src/plugins/autoCSSModules.ts\">umijs 的插件代码</a>:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Babel</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/bundler-utils/compiled/babel/core&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> t <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/bundler-utils/compiled/babel/types&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; extname &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CSS_EXT_NAMES</span> = [<span class=\"string\">&quot;.css&quot;</span>, <span class=\"string\">&quot;.less&quot;</span>, <span class=\"string\">&quot;.sass&quot;</span>, <span class=\"string\">&quot;.scss&quot;</span>, <span class=\"string\">&quot;.stylus&quot;</span>, <span class=\"string\">&quot;.styl&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">visitor</span>: &#123;</span><br><span class=\"line\">      <span class=\"title class_\">ImportDeclaration</span>(<span class=\"attr\">path</span>: <span class=\"title class_\">Babel</span>.<span class=\"property\">NodePath</span>&lt;t.<span class=\"property\">ImportDeclaration</span>&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">          specifiers,</span><br><span class=\"line\">          source,</span><br><span class=\"line\">          <span class=\"attr\">source</span>: &#123; value &#125;,</span><br><span class=\"line\">        &#125; = path.<span class=\"property\">node</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specifiers.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable constant_\">CSS_EXT_NAMES</span>.<span class=\"title function_\">includes</span>(<span class=\"title function_\">extname</span>(value))) &#123;</span><br><span class=\"line\">          source.<span class=\"property\">value</span> = <span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span>?modules`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// more codes</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，AST <code>specifiers</code> 里有内容，说明是<code>import xxx from module</code>的形式，而<code>source.value</code>就是 css 文件的路径，所以直接加上<code>?modules</code>后缀即可。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/css-modules/css-modules\">https://github.com/css-modules/css-modules</a></li>\n<li><a href=\"https://webpack.js.org/loaders/css-loader/#modules\">https://webpack.js.org/loaders/css-loader/#modules</a></li>\n<li><a href=\"https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules\">https://www.npmjs.com/package/@umijs/babel-plugin-auto-css-modules</a></li>\n</ul>\n"},{"title":"在monorepo中使用changesets","date":"2023-12-08T01:44:30.000Z","url":"changesets-in-monorepo","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/33](https://github.com/taoliujun/blog/issues/33)\n\n<!--hexo\n---\nurl: changesets-in-monorepo\ntags:\n  - changesets\n---\n-->\n\n`changesets`是目前(2023年)最流行的(多)包管理和发布工具了，使用它可以方便的生成CHANGELOG、打版本号和发布。\n\n项目链接：[changesets](https://github.com/changesets/changesets)\n\n我这有个[pnpm monorepo](https://github.com/taoliujun/npm-packages)库，现在在用`changesets`管理发布版本了。\n\n## 安装\n\n```shell\npnpm add -Dw @changesets/cli @changesets/changelog-git\n```\n\n`@changesets/cli`是必须安装的，`@changesets/changelog-git`是CHANGELOG生成风格，可以选择其他的，也可以不安装，用默认的。\n\n## 初始化\n\n```shell\npnpm changeset init\n```\n\n生成`.changeset`目录，里面有`config.json`，我修改了一下，如下：\n\n```json\n{\n  \"$schema\": \"https://unpkg.com/@changesets/config@3.0.0/schema.json\",\n  \"changelog\": \"@changesets/changelog-git\",\n  // 在changeset add和changeset version后，自动运行git commit\n  \"commit\": true,\n  // 如果要发布到npm官方仓库，就设置成public\n  \"access\": \"public\",\n  // 我的仓库的主分支是master\n  \"baseBranch\": \"master\",\n  \"fixed\": [],\n  \"linked\": [],\n  \"updateInternalDependencies\": \"patch\",\n  \"ignore\": []\n}\n```\n\n## 发布一个包\n\n现在，我要给包pack1添加一些新特性，和修复一些bug。\n\n特性代码有点长，我要写好几天的代码。仍然按照以往的commit message的频率和风格去提交代码。这个commit message里的type和subject，**都不会影响CHANGELOG和包版本号**。\n\n### 随时添加一个changeset\n\n当我完成一个特性，或修复了一个bug，可以随时打一个changeset标记，这样就可以记录下来，方便后面生成CHANGELOG。再次说明，这个changeset标记和commit message是互不冲突的，changeset标记是用来管理包版本的，而commit message是用来管理代码的。\n\n*这和之前使用lerna有点区别，lerna是根据commit message来决定版本号和CHANGLOG的，而`changesets`是根据`changeset add`和`changeset version`来决定的。*\n\n`changeset`这么做的目的是，让开发者将包管理和代码管理分开，这样更加灵活。\n\n```base\n// 添加一个changeset标记\npnpm changeset add\n```\n\n会出现交互，让你选择要打标记的包，版本号等。\n\n#### 选版本遇到一个坑，总是显示`major`？？？\n\n`changeset`老版本会让你上下选择版本类型，而新的`changeset`的交互改了，在提示`major`的时候，未选择的包，按回车后会进入到选择`minor`的步骤。\n\n### 生成CHANGELOG和版本号\n\n终于，我完成了所有的特性和bug，准备发布了。\n\n可以查看`.changeset`下有很多`.md`文件，这些就是之前随时添加的changeset标记。每一个文件描述了改动的包、改动的类型、改动的内容。在下一步操作之前，可以直接修改这些`.md`文件，来修改上述提到的类型、内容等。\n\n准备好了，运行\n\n```shell\npnpm changeset version\n```\n\nchangeset会生成CHANGELOG和版本号，在最终发布之前，最好查看一下。\n\n### 发布\n\n```\npnpm changeset publish\n```\n\n它会自动调用`pnpm publish`，发布到npm仓库，并且打上tag。不过可惜的是，要手动push tag到远程：`git push --tags`。\n\n\n\n","source":"_posts/changesets-in-monorepo.md","raw":"---\ntitle: \"在monorepo中使用changesets\"\ndate: \"2023-12-08T09:44:30Z\"\ncategories:\n  - [工程化]\n\nurl: changesets-in-monorepo\ntags:\n  - changesets\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/33](https://github.com/taoliujun/blog/issues/33)\n\n<!--hexo\n---\nurl: changesets-in-monorepo\ntags:\n  - changesets\n---\n-->\n\n`changesets`是目前(2023年)最流行的(多)包管理和发布工具了，使用它可以方便的生成CHANGELOG、打版本号和发布。\n\n项目链接：[changesets](https://github.com/changesets/changesets)\n\n我这有个[pnpm monorepo](https://github.com/taoliujun/npm-packages)库，现在在用`changesets`管理发布版本了。\n\n## 安装\n\n```shell\npnpm add -Dw @changesets/cli @changesets/changelog-git\n```\n\n`@changesets/cli`是必须安装的，`@changesets/changelog-git`是CHANGELOG生成风格，可以选择其他的，也可以不安装，用默认的。\n\n## 初始化\n\n```shell\npnpm changeset init\n```\n\n生成`.changeset`目录，里面有`config.json`，我修改了一下，如下：\n\n```json\n{\n  \"$schema\": \"https://unpkg.com/@changesets/config@3.0.0/schema.json\",\n  \"changelog\": \"@changesets/changelog-git\",\n  // 在changeset add和changeset version后，自动运行git commit\n  \"commit\": true,\n  // 如果要发布到npm官方仓库，就设置成public\n  \"access\": \"public\",\n  // 我的仓库的主分支是master\n  \"baseBranch\": \"master\",\n  \"fixed\": [],\n  \"linked\": [],\n  \"updateInternalDependencies\": \"patch\",\n  \"ignore\": []\n}\n```\n\n## 发布一个包\n\n现在，我要给包pack1添加一些新特性，和修复一些bug。\n\n特性代码有点长，我要写好几天的代码。仍然按照以往的commit message的频率和风格去提交代码。这个commit message里的type和subject，**都不会影响CHANGELOG和包版本号**。\n\n### 随时添加一个changeset\n\n当我完成一个特性，或修复了一个bug，可以随时打一个changeset标记，这样就可以记录下来，方便后面生成CHANGELOG。再次说明，这个changeset标记和commit message是互不冲突的，changeset标记是用来管理包版本的，而commit message是用来管理代码的。\n\n*这和之前使用lerna有点区别，lerna是根据commit message来决定版本号和CHANGLOG的，而`changesets`是根据`changeset add`和`changeset version`来决定的。*\n\n`changeset`这么做的目的是，让开发者将包管理和代码管理分开，这样更加灵活。\n\n```base\n// 添加一个changeset标记\npnpm changeset add\n```\n\n会出现交互，让你选择要打标记的包，版本号等。\n\n#### 选版本遇到一个坑，总是显示`major`？？？\n\n`changeset`老版本会让你上下选择版本类型，而新的`changeset`的交互改了，在提示`major`的时候，未选择的包，按回车后会进入到选择`minor`的步骤。\n\n### 生成CHANGELOG和版本号\n\n终于，我完成了所有的特性和bug，准备发布了。\n\n可以查看`.changeset`下有很多`.md`文件，这些就是之前随时添加的changeset标记。每一个文件描述了改动的包、改动的类型、改动的内容。在下一步操作之前，可以直接修改这些`.md`文件，来修改上述提到的类型、内容等。\n\n准备好了，运行\n\n```shell\npnpm changeset version\n```\n\nchangeset会生成CHANGELOG和版本号，在最终发布之前，最好查看一下。\n\n### 发布\n\n```\npnpm changeset publish\n```\n\n它会自动调用`pnpm publish`，发布到npm仓库，并且打上tag。不过可惜的是，要手动push tag到远程：`git push --tags`。\n\n\n\n","slug":"changesets-in-monorepo","published":1,"updated":"2024-01-03T09:22:47.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxkljy20001jgq95scphg3x","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/33\">https://github.com/taoliujun/blog/issues/33</a></p>\n<!--hexo\n---\nurl: changesets-in-monorepo\ntags:\n  - changesets\n---\n-->\n\n<p><code>changesets</code>是目前(2023年)最流行的(多)包管理和发布工具了，使用它可以方便的生成CHANGELOG、打版本号和发布。</p>\n<p>项目链接：<a href=\"https://github.com/changesets/changesets\">changesets</a></p>\n<p>我这有个<a href=\"https://github.com/taoliujun/npm-packages\">pnpm monorepo</a>库，现在在用<code>changesets</code>管理发布版本了。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -Dw @changesets/cli @changesets/changelog-git</span><br></pre></td></tr></table></figure>\n\n<p><code>@changesets/cli</code>是必须安装的，<code>@changesets/changelog-git</code>是CHANGELOG生成风格，可以选择其他的，也可以不安装，用默认的。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset init</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>.changeset</code>目录，里面有<code>config.json</code>，我修改了一下，如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://unpkg.com/@changesets/config@3.0.0/schema.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@changesets/changelog-git&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 在changeset add和changeset version后，自动运行git commit</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果要发布到npm官方仓库，就设置成public</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;access&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;public&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 我的仓库的主分支是master</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;baseBranch&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;master&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fixed&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;linked&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;updateInternalDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;patch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ignore&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布一个包\"><a href=\"#发布一个包\" class=\"headerlink\" title=\"发布一个包\"></a>发布一个包</h2><p>现在，我要给包pack1添加一些新特性，和修复一些bug。</p>\n<p>特性代码有点长，我要写好几天的代码。仍然按照以往的commit message的频率和风格去提交代码。这个commit message里的type和subject，<strong>都不会影响CHANGELOG和包版本号</strong>。</p>\n<h3 id=\"随时添加一个changeset\"><a href=\"#随时添加一个changeset\" class=\"headerlink\" title=\"随时添加一个changeset\"></a>随时添加一个changeset</h3><p>当我完成一个特性，或修复了一个bug，可以随时打一个changeset标记，这样就可以记录下来，方便后面生成CHANGELOG。再次说明，这个changeset标记和commit message是互不冲突的，changeset标记是用来管理包版本的，而commit message是用来管理代码的。</p>\n<p><em>这和之前使用lerna有点区别，lerna是根据commit message来决定版本号和CHANGLOG的，而<code>changesets</code>是根据<code>changeset add</code>和<code>changeset version</code>来决定的。</em></p>\n<p><code>changeset</code>这么做的目的是，让开发者将包管理和代码管理分开，这样更加灵活。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加一个changeset标记</span><br><span class=\"line\">pnpm changeset add</span><br></pre></td></tr></table></figure>\n\n<p>会出现交互，让你选择要打标记的包，版本号等。</p>\n<h4 id=\"选版本遇到一个坑，总是显示major？？？\"><a href=\"#选版本遇到一个坑，总是显示major？？？\" class=\"headerlink\" title=\"选版本遇到一个坑，总是显示major？？？\"></a>选版本遇到一个坑，总是显示<code>major</code>？？？</h4><p><code>changeset</code>老版本会让你上下选择版本类型，而新的<code>changeset</code>的交互改了，在提示<code>major</code>的时候，未选择的包，按回车后会进入到选择<code>minor</code>的步骤。</p>\n<h3 id=\"生成CHANGELOG和版本号\"><a href=\"#生成CHANGELOG和版本号\" class=\"headerlink\" title=\"生成CHANGELOG和版本号\"></a>生成CHANGELOG和版本号</h3><p>终于，我完成了所有的特性和bug，准备发布了。</p>\n<p>可以查看<code>.changeset</code>下有很多<code>.md</code>文件，这些就是之前随时添加的changeset标记。每一个文件描述了改动的包、改动的类型、改动的内容。在下一步操作之前，可以直接修改这些<code>.md</code>文件，来修改上述提到的类型、内容等。</p>\n<p>准备好了，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset version</span><br></pre></td></tr></table></figure>\n\n<p>changeset会生成CHANGELOG和版本号，在最终发布之前，最好查看一下。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset publish</span><br></pre></td></tr></table></figure>\n\n<p>它会自动调用<code>pnpm publish</code>，发布到npm仓库，并且打上tag。不过可惜的是，要手动push tag到远程：<code>git push --tags</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/33\">https://github.com/taoliujun/blog/issues/33</a></p>\n<!--hexo\n---\nurl: changesets-in-monorepo\ntags:\n  - changesets\n---\n-->\n\n<p><code>changesets</code>是目前(2023年)最流行的(多)包管理和发布工具了，使用它可以方便的生成CHANGELOG、打版本号和发布。</p>\n<p>项目链接：<a href=\"https://github.com/changesets/changesets\">changesets</a></p>\n<p>我这有个<a href=\"https://github.com/taoliujun/npm-packages\">pnpm monorepo</a>库，现在在用<code>changesets</code>管理发布版本了。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -Dw @changesets/cli @changesets/changelog-git</span><br></pre></td></tr></table></figure>\n\n<p><code>@changesets/cli</code>是必须安装的，<code>@changesets/changelog-git</code>是CHANGELOG生成风格，可以选择其他的，也可以不安装，用默认的。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset init</span><br></pre></td></tr></table></figure>\n\n<p>生成<code>.changeset</code>目录，里面有<code>config.json</code>，我修改了一下，如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://unpkg.com/@changesets/config@3.0.0/schema.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;changelog&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@changesets/changelog-git&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 在changeset add和changeset version后，自动运行git commit</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果要发布到npm官方仓库，就设置成public</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;access&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;public&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"comment\">// 我的仓库的主分支是master</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;baseBranch&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;master&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fixed&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;linked&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;updateInternalDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;patch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ignore&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"发布一个包\"><a href=\"#发布一个包\" class=\"headerlink\" title=\"发布一个包\"></a>发布一个包</h2><p>现在，我要给包pack1添加一些新特性，和修复一些bug。</p>\n<p>特性代码有点长，我要写好几天的代码。仍然按照以往的commit message的频率和风格去提交代码。这个commit message里的type和subject，<strong>都不会影响CHANGELOG和包版本号</strong>。</p>\n<h3 id=\"随时添加一个changeset\"><a href=\"#随时添加一个changeset\" class=\"headerlink\" title=\"随时添加一个changeset\"></a>随时添加一个changeset</h3><p>当我完成一个特性，或修复了一个bug，可以随时打一个changeset标记，这样就可以记录下来，方便后面生成CHANGELOG。再次说明，这个changeset标记和commit message是互不冲突的，changeset标记是用来管理包版本的，而commit message是用来管理代码的。</p>\n<p><em>这和之前使用lerna有点区别，lerna是根据commit message来决定版本号和CHANGLOG的，而<code>changesets</code>是根据<code>changeset add</code>和<code>changeset version</code>来决定的。</em></p>\n<p><code>changeset</code>这么做的目的是，让开发者将包管理和代码管理分开，这样更加灵活。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 添加一个changeset标记</span><br><span class=\"line\">pnpm changeset add</span><br></pre></td></tr></table></figure>\n\n<p>会出现交互，让你选择要打标记的包，版本号等。</p>\n<h4 id=\"选版本遇到一个坑，总是显示major？？？\"><a href=\"#选版本遇到一个坑，总是显示major？？？\" class=\"headerlink\" title=\"选版本遇到一个坑，总是显示major？？？\"></a>选版本遇到一个坑，总是显示<code>major</code>？？？</h4><p><code>changeset</code>老版本会让你上下选择版本类型，而新的<code>changeset</code>的交互改了，在提示<code>major</code>的时候，未选择的包，按回车后会进入到选择<code>minor</code>的步骤。</p>\n<h3 id=\"生成CHANGELOG和版本号\"><a href=\"#生成CHANGELOG和版本号\" class=\"headerlink\" title=\"生成CHANGELOG和版本号\"></a>生成CHANGELOG和版本号</h3><p>终于，我完成了所有的特性和bug，准备发布了。</p>\n<p>可以查看<code>.changeset</code>下有很多<code>.md</code>文件，这些就是之前随时添加的changeset标记。每一个文件描述了改动的包、改动的类型、改动的内容。在下一步操作之前，可以直接修改这些<code>.md</code>文件，来修改上述提到的类型、内容等。</p>\n<p>准备好了，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset version</span><br></pre></td></tr></table></figure>\n\n<p>changeset会生成CHANGELOG和版本号，在最终发布之前，最好查看一下。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm changeset publish</span><br></pre></td></tr></table></figure>\n\n<p>它会自动调用<code>pnpm publish</code>，发布到npm仓库，并且打上tag。不过可惜的是，要手动push tag到远程：<code>git push --tags</code>。</p>\n"},{"title":"关于tsconfig.json，最后更新2023/11月...","date":"2023-09-04T18:51:45.000Z","url":"tsconfig-json","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/23](https://github.com/taoliujun/blog/issues/23)\n\n<!--hexo\n---\nurl: tsconfig-json\ntags:\n  - typescript\n---\n-->\n\n**截至TypeScript 5.2**，`tsconfig.json`的配置项已经有百十个之多，它的某些选项甚至影响了项目的执行结果，所以尽量多的了解它们能让程序员更深的了解ts，写出优美语句让CTO赞赏，甚至避免写出bug。\n\n本issue的内容，只是个人在工作经验的影响下，对官方文档的内容理解。且内容有所欠缺，基本只记录了我工作涉及到的配置项，比如不怎么使用class，对class的配置项就略过了。\n\n官方文档：https://www.typescriptlang.org/tsconfig\n\n****\n\n<!--hexo-->\n\n# Top Level\n\n一些根配置项。\n\n## extends\n\n继承另一个配置文件，推荐的一些官方的配置文件来继承使用：https://github.com/tsconfig/bases/tree/main/bases\n\n## files, include, exclude\n\n这几项指定了在项目里，被ts作用的文件集合。配置本身没什么好说的，记录下它们之间的关系。\n\n- 如果files指定了，那么include的默认值是`[]`，否则include的默认值是`**/*`；\n- exclude用于排除include已指定的文件集合，但这些文件仍然是可以在项目里被引用的；\n- exclude默认排除了`node_modules`、`outDir`；\n\n## references\n\n用于项目文件夹分别打包，并且其中有缓存机制的参与，所以编译速度会快很多。\n\n如下项目结构：\n\n```shell\n./interface\n./components\n./user\n./admin\n./tsconfig.json\n```\n\n在上面，user和admin文件夹分别是业务用户端、业务管理端，interface是接口定义，components是通用组件。在以往，改动了任何文件，都需要整个项目重新编译。而在使用references之后，将4个文件夹中放入对应的tsconfig.json并各有配置，在根tsconfig中指定好references的path后，tsc利用缓存机制，会只打包改动过的文件夹。\n<!--hexo-->\n\n# compilerOptions\n\n编译器配置项太多了，按作用拆分成几个评论来说。\n<!--hexo-->\n\n# compilerOptions - Type Checking\n\n和类型检查有关的配置项。\n\n## strict\n\nstrict是一个严格模式的快捷开关，开启后会默认打开strictNullChecks、noImplicitAny等选项。并且随着typescript的升级，它可能会默认开启新增特性，列出截至5.2默认开启的选项：\n\n[alwaysStrict](https://www.typescriptlang.org/tsconfig#alwaysStrict)\n[strictNullChecks](https://www.typescriptlang.org/tsconfig#strictNullChecks)\n[strictBindCallApply](https://www.typescriptlang.org/tsconfig#strictBindCallApply)\n[strictFunctionTypes](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)\n[strictPropertyInitialization](https://www.typescriptlang.org/tsconfig#strictPropertyInitialization)\n[noImplicitAny](https://www.typescriptlang.org/tsconfig#noImplicitAny)\n[noImplicitThis](https://www.typescriptlang.org/tsconfig#noImplicitThis)\n[useUnknownInCatchVariables](https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables)\n\n## alwaysStrict\n\n对所有文件启用javascript strict模式。注意，这和typescript strict不是同一个东西。参考：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n## allowUnreachableCode\n\n对未使用的代码的处理策略，可设置警告(默认)、错误、忽略。\n\n## allowUnusedLabels\n\n对未使用的Label的处理策略，可设置警告(默认)、错误、忽略。\n\n## exactOptionalPropertyTypes\n\n对可选项设置为undefined的策略。\n\n举例：\n```typescript\ninterface User {\n    sex?: 1 | 0;\n}\n\nconst man: User = {};\nman.sex = 1;\nman.sex = 0;\nman.sex = undefined;\n```\n\n`User.sex`是一个可选项，它的预期值是`0|1|undefined`。但是呢，`sex`可选想表达的意思是未被定义，而不是值真的是undefined。那么开启本选项后，`man.sex = undefined`这个赋值语句会给一个报错。\n\n## noImplicitAny\n\n对推导类型为any的策略。\n\n```typescript\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n```\n\n入参`s`推导为`any`，在选项开启情况下会报错。\n\n## noImplicitReturns\n\n对函数每个分支必须有return语句的策略。\n\n```typescript\nfunction fn(s: string) {\n    if (s) {\n        return s.substring(3);\n    } else {\n        'nothing';\n    }\n}\n```\n\n开启后，ts报错认为`fn`函数的最后没有return语句。\n\n## noPropertyAccessFromIndexSignature\n\n对访问未定义的对象属性的策略。\n\n```typescript\ninterface User {\n    name?: string;\n    [key: string]: string;\n}\nconst a: User = {};\nconsole.log(a.name, a['name'], a.sex, a['sex']);\n```\n\n访问对象属性有`.`和`[index]`两个方式，访问未定义的属性，开启本选项后，在`a.sex`处会抛出一个错误。\n\n## noUncheckedIndexedAccess\n\n未定义的对象属性值类型，给追加上`undefined`类型。\n\n```typescript\ninterface User {\n    name: string;\n    [propName: string]: string;\n}\n\ndeclare const admin: User;\n\n// (property) User.name: string\nconsole.log(admin.name);\n// (index) User[string]: string\nconsole.log(admin.birthday);\n```\n\n上例中，birthday的值类型是`string`，开启本项后，类型追加上`undefined`。\n\n```typescript\n// (index) User[string]: string | undefined\nconsole.log(admin.birthday);\n```\n\n## noUnusedLocals\n\n局部变量未使用，抛出错误。\n\n```typescript\nfunction test() {\n  const defaultModelID = 23;\n// 'defaultModelID' is declared but its value is never read.\n}\n```\n\n## noUnusedParameters\n\n入参未使用，抛出错误。\n\n```typescript\nconst createDefaultKeyboard = (modelID: number) => {\n// 'modelID' is declared but its value is never read.\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n```\n\n## strictBindCallApply\n\n在使用函数的call、bind、apply时，是否要检查传入参数的类型。\n\n```typescript\nfunction fn(x: string) {\n    return x;\n}\nconst n1 = fn.call(undefined, '10');\nconst n2 = fn.call(undefined, false);\n```\n\n如上代码中，第二个call中的入参false和string类型不匹配而报错。\n\n## strictFunctionTypes\n\n更精确的检查函数入参类型。\n\n```typescript\ntype GetUser = (id: string | number) => any;\nfunction test(x: string) {\n    return x;\n}\nconst getUser: GetUser = test;\n```\n\n如上代码中，GetUser的入参类型`string | number`不能精确的分配给test的入参类型`string`。\n\n## strictNullChecks\n\n是否校验`null`, `undefined`的属性访问？\n\n在以往的纯js项目中，容易忽略变量为undefined后仍然访问其属性的场景，比如在如下代码中，忽略了`a`为`undefined`的情况，导致运行时引发异常。\n\n```javascript\nconst a = arr1.find();\nconsole.log(a.name)\n```\n\n本选项开启后，在静态检查时就提示开发者，变量可能是`null`, `undefined`，不能访问到`name`属性。\n\n## useUnknownInCatchVariables\n\n有时候我们并不知道catch的err类型是什么，它的类型由try里的实际运行分支决定，而如果当成any处理，那么访问它的属性是危险的。当开启本项后，err的类型是unknown，必须先限定其类型再安全的访问其属性，如：\n\n```typescript\ntry {\n  // ...\n} catch (err) {\n  if (err instanceof Error) {\n    console.log(err.message);\n  }\n}\n```\n\n<!--hexo-->\n\n# compilerOptions - Modules\n\n模块的处理策略。\n\n## allowArbitraryExtensions\n\nts默认支持了ts、js、cjs、jsx等模块的解析描述，通过`global.d.ts`的定义扩展，还可以支持css、jpg等模块的解析描述（你要自己保证webpack loader之类的解析器去真实支持加载这些模块）。而有时候，需要对特定模块文件（不管是否已全局定义过该模块的描述）做特别的描述，就可以开启该选项，并且创建一个`{file basename}.d.{extension}.ts`文件。\n\n如：\n\n```typescript\n// test.ts\n\n// 报错：Cannot find module './a.jpk' or its corresponding type declarations.ts(2307)\nimport a from './a.jpk';\n// doTest类型是any\nconsole.log(a.doTest());\n```\n\n开启该项，并增加`a.d.jpk.ts`文件：\n\n```typescript\n// a.d.jpk.ts\ndeclare const jpk: {\n    doTest: () => void;\n};\nexport default jpk;\n\n// test.ts\nimport a from './a.jpk';\n// doTest的类型：(property) doTest: () => void\nconsole.log(a.doTest());\n```\n\n## allowImportingTsExtensions\n\n是否允许在import path带入ts、tsx等后缀名。\n\nts项目需要编译成js代码后执行，如果我们使用ts-node来执行项目，可以启用`noEmit`来禁止这个编译行为，并且在项目源码中直接引入`.ts`来引入正确的、完整的路径。\n\n举例：\n\n```typescript\nimport { wait } from '@/utils/utils.ts';\n```\n\n## allowUmdGlobalAccess\n\n// TODO\n和umd的声明有关系，不过我还不明确它的意义。见：https://github.com/microsoft/TypeScript/pull/30776。\n\n## baseUrl\n\n为解析无路径修饰的模块，设置一个基础路径。 什么叫做无路径修饰？就是该模块不是一个绝对或相对路径，如`import a from '@/hello/world'`。\n\n如果配置了该项，那么ts从该项指定的目录中开始查找模块，优先级也高于`node_modules`。\n\n## module\n\n模块打包的策略，也就是指编译后的模块加载代码是require、import之类的语法。推荐大家阅读：[模块理论](https://www.typescriptlang.org/docs/handbook/modules/theory.html)。\n\n这个话题有点繁琐，也涉及到javascript的模块化amd、umd之类的历史，对于2023年这个时间点来说，关注下CommonJS、ESM即可，ESM还细分为ES2015、ES20XX等版本，他们的模块打包策略是一样的，区别是更高版本的ESM还支持了`dynamic imports`、`import.meta`和`top level await`之类的东西。\n\n补充的是，nodejs的模块打包策略也早就支持esm了，具体参照package.json的设置：https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext\n\n## moduleResolution\n\n加载模块的策略，也就是指用什么策略去解析`import xxx from 'pathA'`这里的`pathA`。**注意区分和module的关系，module指的是项目的模块化是如何打包的，而moduleResolution指的是项目如何加载模块的**。截至2023支持如下策略：\n\n* node16/nodenext，对于Node12+版本，本策略可自由根据import/require选择合适的算法去加载模块。\n* node10，对于Node12之前的版本，本策略只支持require算法加载模块。**基本不用关心了**\n* bundler，和node16一样，但不要求模块有后缀名。\n* classic，早期的策略，不用管了。\n\n**这东西还要和module搭配使用，并且！并且！和package.json还有扯不清的关系。强烈建议阅读上文提到的[模块理论](https://www.typescriptlang.org/docs/handbook/modules/theory.html)**\n\n另外，由于自己对这块的理解也不足深，还参考了这篇文章：https://zhuanlan.zhihu.com/p/621795173。\n\n## moduleSuffixes\n\n模块搜索时的文件扩展名补充，比如以下配置项：\n\n```json\n{\n  \"compilerOptions\": {\n    \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n  }\n}\n```\n\n```typescript\nimport * as foo from \"./foo\";\n```\nTypeScript 会按顺序寻找`./foo.ios.ts`、`./foo.native.ts`、`./foo.ts`。\n\n## paths\n\n在加载模块路径时，加入一个别名匹配。可以理解为webpack的alias。\n\n## resolveJsonModule\n\n允许加载json模块（文件）。\n\n## resolvePackageJsonExports\n\n引用`node_modules`包时，强制遵循包package.json的exports字段的定义。还是那句话，阅读下模块理论那篇文章，不然很难理解前面这句话的信息量。\n\n## resolvePackageJsonImports\n\n强制typescript使用package.json中imports字段的定义去加载`#`符号开头的模块路径。例：\n\n```typescript\n// package.json\n\"imports\": {\n   \"#test/*\": \"./src/test/*\"\n}\n```\n\n```typescript\n// src/test/1.ts\nexport const a = 123;\n```\n\n```typescript\n// src/b.ts\nimport { a } from '#test/1';\nconsole.log('==a', a);\n```\n\n## rootDir\n\n指定项目的根目录，默认值可以理解为所有ts文件目录的最大集。例如：\n\n```shell\nMyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n```\n\n如上的项目，rootDir的推断值是\"core\"。但是你可以手工指定为`tsconfig.json`的相对目录\"，比如.\"。\n\n另外，如果设置了`composite`，`rootDir`的默认值就是`tsconfig.json`文件的目录。\n\n## rootDirs\n\n这个属性有点拽，它可以将多个目录虚拟成一个目录。这样在`import`的时候，就当成同一个目录就行啦。\n\n## typeRoots\n\n类型定义文件的目录，默认所有@types目录都会被包含，包括node_modules下的@types目录。\n如果指定了typeRoots，那么@types目录的相关规则会被忽略。\n\n ## types\n\n类型定义文件的具体目录，规则和`typeRoots`一样，不同点是`types`只指定具体目录，而非`*`这种匹配型目录。\n\n<!--hexo-->\n\n# compilerOptions - Emit\n\n编译策略。\n\n## outDir\n\n编译文件放置的目录，默认和源码放同一个目录。\n\n## noEmit\n\n不要编译ts。\n\n项目中一般使用babel去编译，typescript仅用来做静态检查，所以设置noEmit就可以不生成js、sourcemap、declaration文件了。\n\n## noEmitOnError\n\n顾名思义，在检查到错误的时候，不要继续编译了。\n\n## declaration / emitDeclarationOnly / declarationDir\n\n生成类型描述文件。\n\n这个是typescript最重要的几个特性之一了，为`.ts`文件生成类型定义文件`.d.ts`。如果不想同时生成`.js`文件，则使用`emitDeclarationOnly`。\n\n同时，可以使用`declarationDir`指定类型定义文件的生成目录。\n\n## declarationMap\n\n给`.d.ts`文件增加一个map标识到`.ts`源文件，类似sourceMap。\n\n## sourceMap / inlineSourceMap / inlineSources / mapRoot / sourceRoot\n\ntypescript也是支持souce map的，这里就不解释sourcemap是什么了。它的相关配置项有：\n\nsourceMap，生成sourcemap文件。\ninlineSourceMap，不生成sourcemap文件，而是直接把source内容写在.js文件中。\ninlineSources，同inlineSourceMap。\nmapRoot，指定sourceMap文件的路径，比如部署到网络中，可以指定为\"[http://xxxx.com\"。](http://xxxx.com\"./)\nsourceRoot，指定source文件的路径，同mapRoot。\n\n## downlevelIteration\n\n对迭代器的降级解析。\n\n在es6中增加了for/of，spread等迭代特性，typescript在编译成es5的时候，要使用何种语法。文档中有个字符遍历的例子说明开启与否的迭代影响，这对业务计算结果是有影响的。\n\n不过项目中使用了babel之类的编译器，就不用担心这些影响了。\n\n## importHelpers\n\n引入降级解析的包。\n\n将es6的某些特新编译成es5，如迭代器、异步语法等，会将模块中每个相应的代码都编译成降级代码，使得类似代码重复。如：\n\n```typescript\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n```\n\n如果同时开启了`downlevelIteration`和`importHelpers`，并且安装了`tslib`包，那么代码会编译成类似这样：\n\n```typescript\nimport { __read, __spreadArray } from \"tslib\";\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n ```\n\n## noEmitHelpers\n\ntypescript处理迭代器、异步等的降级策略是生成一堆降级代码，也可以使用\"importHelpers\"和\"tslib\"来提取公共代码。但通过这个配置，可以自定义降级代码了。具体参照文档。\n\n## preserveConstEnums\n\n是否在编辑结果中移除`const enum`的定义。因为javascript没有enum概念，typescript会将enum的引用编译成具体的值。如：\n\n```typescript\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n \nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n```\n\n编译结果如下：\n\n```javascript\n\"use strict\";\nconst selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;\nif (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {\n    console.log(\"That is a great choice.\");\n}\n```\n\n如果开启此项，则编译结果中会描述出该enum的结构。如下：\n\n```javascript\n\"use strict\";\nvar Album;\n(function (Album) {\n    Album[Album[\"JimmyEatWorldFutures\"] = 1] = \"JimmyEatWorldFutures\";\n    Album[Album[\"TubRingZooHypothesis\"] = 2] = \"TubRingZooHypothesis\";\n    Album[Album[\"DogFashionDiscoAdultery\"] = 3] = \"DogFashionDiscoAdultery\";\n})(Album || (Album = {}));\nconst selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;\nif (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {\n    console.log(\"That is a great choice.\");\n}\n\n```\n\n## preserveValueImports\n\n通常，打包器会将未使用的\"import\"移除掉，但开启了该特性后，会在编译中保留未使用的\"import\"。例如：\n\n```typescript\nimport { Animal } from \"./animal.js\";\neval(\"console.log(new Animal().isDangerous())\");\n```\n\n## removeComments\n\n移除代码中的注释。\n\n\n<!--hexo-->\n\n# compilerOptions - JavaScript Support\n\n对javascript文件的支持\n\n## allowJs\n\n允许`.ts`文件引用`.js`文件，这常用在javascript项目升级为typescript的过程中。\n\n## checkJs\n\n是否开启对`.js`文件的错误检查。\n\n## maxNodeModuleJsDepth\n\n为`.js`文件寻找类型定义文件时，允许的最大依赖深度。\n\n正常情况下，我们会在`.js`文件的同级补写`.d.ts`文件，tsc会很快找到类型定义。但有时候确实要扩大搜索范围去找部分`.js`文件的类型定义文件。\n\n<!--hexo-->\n\n# compilerOptions - Interop Constraints\n\n(模块)互相操作的约束\n\n## allowSyntheticDefaultImports\n\n允许合成`default`。\n\n如果一个模块A没有`export default`，那么另一个模块B在`import defaultA from './a'`的时候，会抛出错误说A中没有default。\n\n有一个做法是`import * as defaultA from './a'`曲线救国，但开启这个配置项后，可以直接使用`import defaultA from './a'`这样的语法了。\n\n## esModuleInterop\n\nesm在使用`import default from 'xxx'`方式导入cjs的时候会抛出一个错误，因为cjs模块中没有default。开启此选项后，typescript会使用一些helpers去兼容cjs的default问题。\n\n## forceConsistentCasingInFileNames\n\n强制引用的模块文件名，和磁盘中的文件名保持一致的大小写。\n\n<!--hexo-->\n\n# compilerOptions - Language and Environment\n\n和语言、环境有关的配置项。\n\n## jsx\n\n如何解析`.tsx`文件中jsx语法？在2023年，react17+后，用`react-jsx`就行了。\n\n## lib\n\n在项目中使用的api类型定义集合。\n\nts是需要知道你用的每一个javascript方法、属性的定义的，所以它内置了一批定义（比如Math.abs方法）。但是呢，后面新增方法的定义，需要你手工指定包含，ts才能理解了，比如Array.include方法，你就要包含ES2016。但好在你不需要记住这些，因为当你指定`target`字段时，lib会被默认设置成对应的值的。\n\n另外，大部分情况下，我们要访问一些和特定环境有关的特性，比如浏览器里的Dom特性，那么这儿额外引入`DOM`定义就行了。\n\n## target\n\n项目编译的目标javascript版本。\n\n也就是你的目标客户端支持的最低javascript版本。注意它会影响默认的`lib`配置项。\n\n\n<!--hexo-->\n\n# compilerOptions - Compiler Diagnostics\n\n编译诊断配置项。\n\n## diagnostics / extendedDiagnostics\n\n打印出编译的信息，比如多少文件、编译时间等。\n\nextendedDiagnostics包含了diagnostics给出的所有信息，所以用extendedDiagnostics就行了。这是一个开启extendedDiagnostics的编译信息：\n\n```bash\nFiles:                         143\nLines of Library:            38663\nLines of Definitions:        82578\nSymbols:                     73362\nTypes:                        1495\nParse time:                  0.50s\nResolveModule time:          0.03s\nTotal time:                  1.01s\n```\n\n## explainFiles\n\n打印出文件被编译的原因，也就是它们的引用链。\n\n## listEmittedFiles / listFiles\n\n列出参与编译的文件。\n\n## traceResolution\n\n打印每一个文件的编译流程。\n\n\n<!--hexo-->\n\n# compilerOptions - Completeness\n\n完整性检测的配置项\n\n## skipLibCheck\n\n跳过lib库的类型检测。\n\n\n\n","source":"_posts/tsconfig-json.md","raw":"---\ntitle: \"关于tsconfig.json，最后更新2023/11月...\"\ndate: \"2023-09-05T02:51:45Z\"\ncategories:\n  - [TypeScript]\n\nurl: tsconfig-json\ntags:\n  - typescript\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/23](https://github.com/taoliujun/blog/issues/23)\n\n<!--hexo\n---\nurl: tsconfig-json\ntags:\n  - typescript\n---\n-->\n\n**截至TypeScript 5.2**，`tsconfig.json`的配置项已经有百十个之多，它的某些选项甚至影响了项目的执行结果，所以尽量多的了解它们能让程序员更深的了解ts，写出优美语句让CTO赞赏，甚至避免写出bug。\n\n本issue的内容，只是个人在工作经验的影响下，对官方文档的内容理解。且内容有所欠缺，基本只记录了我工作涉及到的配置项，比如不怎么使用class，对class的配置项就略过了。\n\n官方文档：https://www.typescriptlang.org/tsconfig\n\n****\n\n<!--hexo-->\n\n# Top Level\n\n一些根配置项。\n\n## extends\n\n继承另一个配置文件，推荐的一些官方的配置文件来继承使用：https://github.com/tsconfig/bases/tree/main/bases\n\n## files, include, exclude\n\n这几项指定了在项目里，被ts作用的文件集合。配置本身没什么好说的，记录下它们之间的关系。\n\n- 如果files指定了，那么include的默认值是`[]`，否则include的默认值是`**/*`；\n- exclude用于排除include已指定的文件集合，但这些文件仍然是可以在项目里被引用的；\n- exclude默认排除了`node_modules`、`outDir`；\n\n## references\n\n用于项目文件夹分别打包，并且其中有缓存机制的参与，所以编译速度会快很多。\n\n如下项目结构：\n\n```shell\n./interface\n./components\n./user\n./admin\n./tsconfig.json\n```\n\n在上面，user和admin文件夹分别是业务用户端、业务管理端，interface是接口定义，components是通用组件。在以往，改动了任何文件，都需要整个项目重新编译。而在使用references之后，将4个文件夹中放入对应的tsconfig.json并各有配置，在根tsconfig中指定好references的path后，tsc利用缓存机制，会只打包改动过的文件夹。\n<!--hexo-->\n\n# compilerOptions\n\n编译器配置项太多了，按作用拆分成几个评论来说。\n<!--hexo-->\n\n# compilerOptions - Type Checking\n\n和类型检查有关的配置项。\n\n## strict\n\nstrict是一个严格模式的快捷开关，开启后会默认打开strictNullChecks、noImplicitAny等选项。并且随着typescript的升级，它可能会默认开启新增特性，列出截至5.2默认开启的选项：\n\n[alwaysStrict](https://www.typescriptlang.org/tsconfig#alwaysStrict)\n[strictNullChecks](https://www.typescriptlang.org/tsconfig#strictNullChecks)\n[strictBindCallApply](https://www.typescriptlang.org/tsconfig#strictBindCallApply)\n[strictFunctionTypes](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)\n[strictPropertyInitialization](https://www.typescriptlang.org/tsconfig#strictPropertyInitialization)\n[noImplicitAny](https://www.typescriptlang.org/tsconfig#noImplicitAny)\n[noImplicitThis](https://www.typescriptlang.org/tsconfig#noImplicitThis)\n[useUnknownInCatchVariables](https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables)\n\n## alwaysStrict\n\n对所有文件启用javascript strict模式。注意，这和typescript strict不是同一个东西。参考：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n## allowUnreachableCode\n\n对未使用的代码的处理策略，可设置警告(默认)、错误、忽略。\n\n## allowUnusedLabels\n\n对未使用的Label的处理策略，可设置警告(默认)、错误、忽略。\n\n## exactOptionalPropertyTypes\n\n对可选项设置为undefined的策略。\n\n举例：\n```typescript\ninterface User {\n    sex?: 1 | 0;\n}\n\nconst man: User = {};\nman.sex = 1;\nman.sex = 0;\nman.sex = undefined;\n```\n\n`User.sex`是一个可选项，它的预期值是`0|1|undefined`。但是呢，`sex`可选想表达的意思是未被定义，而不是值真的是undefined。那么开启本选项后，`man.sex = undefined`这个赋值语句会给一个报错。\n\n## noImplicitAny\n\n对推导类型为any的策略。\n\n```typescript\nfunction fn(s) {\n  console.log(s.subtr(3));\n}\n```\n\n入参`s`推导为`any`，在选项开启情况下会报错。\n\n## noImplicitReturns\n\n对函数每个分支必须有return语句的策略。\n\n```typescript\nfunction fn(s: string) {\n    if (s) {\n        return s.substring(3);\n    } else {\n        'nothing';\n    }\n}\n```\n\n开启后，ts报错认为`fn`函数的最后没有return语句。\n\n## noPropertyAccessFromIndexSignature\n\n对访问未定义的对象属性的策略。\n\n```typescript\ninterface User {\n    name?: string;\n    [key: string]: string;\n}\nconst a: User = {};\nconsole.log(a.name, a['name'], a.sex, a['sex']);\n```\n\n访问对象属性有`.`和`[index]`两个方式，访问未定义的属性，开启本选项后，在`a.sex`处会抛出一个错误。\n\n## noUncheckedIndexedAccess\n\n未定义的对象属性值类型，给追加上`undefined`类型。\n\n```typescript\ninterface User {\n    name: string;\n    [propName: string]: string;\n}\n\ndeclare const admin: User;\n\n// (property) User.name: string\nconsole.log(admin.name);\n// (index) User[string]: string\nconsole.log(admin.birthday);\n```\n\n上例中，birthday的值类型是`string`，开启本项后，类型追加上`undefined`。\n\n```typescript\n// (index) User[string]: string | undefined\nconsole.log(admin.birthday);\n```\n\n## noUnusedLocals\n\n局部变量未使用，抛出错误。\n\n```typescript\nfunction test() {\n  const defaultModelID = 23;\n// 'defaultModelID' is declared but its value is never read.\n}\n```\n\n## noUnusedParameters\n\n入参未使用，抛出错误。\n\n```typescript\nconst createDefaultKeyboard = (modelID: number) => {\n// 'modelID' is declared but its value is never read.\n  const defaultModelID = 23;\n  return { type: \"keyboard\", modelID: defaultModelID };\n};\n```\n\n## strictBindCallApply\n\n在使用函数的call、bind、apply时，是否要检查传入参数的类型。\n\n```typescript\nfunction fn(x: string) {\n    return x;\n}\nconst n1 = fn.call(undefined, '10');\nconst n2 = fn.call(undefined, false);\n```\n\n如上代码中，第二个call中的入参false和string类型不匹配而报错。\n\n## strictFunctionTypes\n\n更精确的检查函数入参类型。\n\n```typescript\ntype GetUser = (id: string | number) => any;\nfunction test(x: string) {\n    return x;\n}\nconst getUser: GetUser = test;\n```\n\n如上代码中，GetUser的入参类型`string | number`不能精确的分配给test的入参类型`string`。\n\n## strictNullChecks\n\n是否校验`null`, `undefined`的属性访问？\n\n在以往的纯js项目中，容易忽略变量为undefined后仍然访问其属性的场景，比如在如下代码中，忽略了`a`为`undefined`的情况，导致运行时引发异常。\n\n```javascript\nconst a = arr1.find();\nconsole.log(a.name)\n```\n\n本选项开启后，在静态检查时就提示开发者，变量可能是`null`, `undefined`，不能访问到`name`属性。\n\n## useUnknownInCatchVariables\n\n有时候我们并不知道catch的err类型是什么，它的类型由try里的实际运行分支决定，而如果当成any处理，那么访问它的属性是危险的。当开启本项后，err的类型是unknown，必须先限定其类型再安全的访问其属性，如：\n\n```typescript\ntry {\n  // ...\n} catch (err) {\n  if (err instanceof Error) {\n    console.log(err.message);\n  }\n}\n```\n\n<!--hexo-->\n\n# compilerOptions - Modules\n\n模块的处理策略。\n\n## allowArbitraryExtensions\n\nts默认支持了ts、js、cjs、jsx等模块的解析描述，通过`global.d.ts`的定义扩展，还可以支持css、jpg等模块的解析描述（你要自己保证webpack loader之类的解析器去真实支持加载这些模块）。而有时候，需要对特定模块文件（不管是否已全局定义过该模块的描述）做特别的描述，就可以开启该选项，并且创建一个`{file basename}.d.{extension}.ts`文件。\n\n如：\n\n```typescript\n// test.ts\n\n// 报错：Cannot find module './a.jpk' or its corresponding type declarations.ts(2307)\nimport a from './a.jpk';\n// doTest类型是any\nconsole.log(a.doTest());\n```\n\n开启该项，并增加`a.d.jpk.ts`文件：\n\n```typescript\n// a.d.jpk.ts\ndeclare const jpk: {\n    doTest: () => void;\n};\nexport default jpk;\n\n// test.ts\nimport a from './a.jpk';\n// doTest的类型：(property) doTest: () => void\nconsole.log(a.doTest());\n```\n\n## allowImportingTsExtensions\n\n是否允许在import path带入ts、tsx等后缀名。\n\nts项目需要编译成js代码后执行，如果我们使用ts-node来执行项目，可以启用`noEmit`来禁止这个编译行为，并且在项目源码中直接引入`.ts`来引入正确的、完整的路径。\n\n举例：\n\n```typescript\nimport { wait } from '@/utils/utils.ts';\n```\n\n## allowUmdGlobalAccess\n\n// TODO\n和umd的声明有关系，不过我还不明确它的意义。见：https://github.com/microsoft/TypeScript/pull/30776。\n\n## baseUrl\n\n为解析无路径修饰的模块，设置一个基础路径。 什么叫做无路径修饰？就是该模块不是一个绝对或相对路径，如`import a from '@/hello/world'`。\n\n如果配置了该项，那么ts从该项指定的目录中开始查找模块，优先级也高于`node_modules`。\n\n## module\n\n模块打包的策略，也就是指编译后的模块加载代码是require、import之类的语法。推荐大家阅读：[模块理论](https://www.typescriptlang.org/docs/handbook/modules/theory.html)。\n\n这个话题有点繁琐，也涉及到javascript的模块化amd、umd之类的历史，对于2023年这个时间点来说，关注下CommonJS、ESM即可，ESM还细分为ES2015、ES20XX等版本，他们的模块打包策略是一样的，区别是更高版本的ESM还支持了`dynamic imports`、`import.meta`和`top level await`之类的东西。\n\n补充的是，nodejs的模块打包策略也早就支持esm了，具体参照package.json的设置：https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext\n\n## moduleResolution\n\n加载模块的策略，也就是指用什么策略去解析`import xxx from 'pathA'`这里的`pathA`。**注意区分和module的关系，module指的是项目的模块化是如何打包的，而moduleResolution指的是项目如何加载模块的**。截至2023支持如下策略：\n\n* node16/nodenext，对于Node12+版本，本策略可自由根据import/require选择合适的算法去加载模块。\n* node10，对于Node12之前的版本，本策略只支持require算法加载模块。**基本不用关心了**\n* bundler，和node16一样，但不要求模块有后缀名。\n* classic，早期的策略，不用管了。\n\n**这东西还要和module搭配使用，并且！并且！和package.json还有扯不清的关系。强烈建议阅读上文提到的[模块理论](https://www.typescriptlang.org/docs/handbook/modules/theory.html)**\n\n另外，由于自己对这块的理解也不足深，还参考了这篇文章：https://zhuanlan.zhihu.com/p/621795173。\n\n## moduleSuffixes\n\n模块搜索时的文件扩展名补充，比如以下配置项：\n\n```json\n{\n  \"compilerOptions\": {\n    \"moduleSuffixes\": [\".ios\", \".native\", \"\"]\n  }\n}\n```\n\n```typescript\nimport * as foo from \"./foo\";\n```\nTypeScript 会按顺序寻找`./foo.ios.ts`、`./foo.native.ts`、`./foo.ts`。\n\n## paths\n\n在加载模块路径时，加入一个别名匹配。可以理解为webpack的alias。\n\n## resolveJsonModule\n\n允许加载json模块（文件）。\n\n## resolvePackageJsonExports\n\n引用`node_modules`包时，强制遵循包package.json的exports字段的定义。还是那句话，阅读下模块理论那篇文章，不然很难理解前面这句话的信息量。\n\n## resolvePackageJsonImports\n\n强制typescript使用package.json中imports字段的定义去加载`#`符号开头的模块路径。例：\n\n```typescript\n// package.json\n\"imports\": {\n   \"#test/*\": \"./src/test/*\"\n}\n```\n\n```typescript\n// src/test/1.ts\nexport const a = 123;\n```\n\n```typescript\n// src/b.ts\nimport { a } from '#test/1';\nconsole.log('==a', a);\n```\n\n## rootDir\n\n指定项目的根目录，默认值可以理解为所有ts文件目录的最大集。例如：\n\n```shell\nMyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts\n```\n\n如上的项目，rootDir的推断值是\"core\"。但是你可以手工指定为`tsconfig.json`的相对目录\"，比如.\"。\n\n另外，如果设置了`composite`，`rootDir`的默认值就是`tsconfig.json`文件的目录。\n\n## rootDirs\n\n这个属性有点拽，它可以将多个目录虚拟成一个目录。这样在`import`的时候，就当成同一个目录就行啦。\n\n## typeRoots\n\n类型定义文件的目录，默认所有@types目录都会被包含，包括node_modules下的@types目录。\n如果指定了typeRoots，那么@types目录的相关规则会被忽略。\n\n ## types\n\n类型定义文件的具体目录，规则和`typeRoots`一样，不同点是`types`只指定具体目录，而非`*`这种匹配型目录。\n\n<!--hexo-->\n\n# compilerOptions - Emit\n\n编译策略。\n\n## outDir\n\n编译文件放置的目录，默认和源码放同一个目录。\n\n## noEmit\n\n不要编译ts。\n\n项目中一般使用babel去编译，typescript仅用来做静态检查，所以设置noEmit就可以不生成js、sourcemap、declaration文件了。\n\n## noEmitOnError\n\n顾名思义，在检查到错误的时候，不要继续编译了。\n\n## declaration / emitDeclarationOnly / declarationDir\n\n生成类型描述文件。\n\n这个是typescript最重要的几个特性之一了，为`.ts`文件生成类型定义文件`.d.ts`。如果不想同时生成`.js`文件，则使用`emitDeclarationOnly`。\n\n同时，可以使用`declarationDir`指定类型定义文件的生成目录。\n\n## declarationMap\n\n给`.d.ts`文件增加一个map标识到`.ts`源文件，类似sourceMap。\n\n## sourceMap / inlineSourceMap / inlineSources / mapRoot / sourceRoot\n\ntypescript也是支持souce map的，这里就不解释sourcemap是什么了。它的相关配置项有：\n\nsourceMap，生成sourcemap文件。\ninlineSourceMap，不生成sourcemap文件，而是直接把source内容写在.js文件中。\ninlineSources，同inlineSourceMap。\nmapRoot，指定sourceMap文件的路径，比如部署到网络中，可以指定为\"[http://xxxx.com\"。](http://xxxx.com\"./)\nsourceRoot，指定source文件的路径，同mapRoot。\n\n## downlevelIteration\n\n对迭代器的降级解析。\n\n在es6中增加了for/of，spread等迭代特性，typescript在编译成es5的时候，要使用何种语法。文档中有个字符遍历的例子说明开启与否的迭代影响，这对业务计算结果是有影响的。\n\n不过项目中使用了babel之类的编译器，就不用担心这些影响了。\n\n## importHelpers\n\n引入降级解析的包。\n\n将es6的某些特新编译成es5，如迭代器、异步语法等，会将模块中每个相应的代码都编译成降级代码，使得类似代码重复。如：\n\n```typescript\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n```\n\n如果同时开启了`downlevelIteration`和`importHelpers`，并且安装了`tslib`包，那么代码会编译成类似这样：\n\n```typescript\nimport { __read, __spreadArray } from \"tslib\";\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n ```\n\n## noEmitHelpers\n\ntypescript处理迭代器、异步等的降级策略是生成一堆降级代码，也可以使用\"importHelpers\"和\"tslib\"来提取公共代码。但通过这个配置，可以自定义降级代码了。具体参照文档。\n\n## preserveConstEnums\n\n是否在编辑结果中移除`const enum`的定义。因为javascript没有enum概念，typescript会将enum的引用编译成具体的值。如：\n\n```typescript\nconst enum Album {\n  JimmyEatWorldFutures = 1,\n  TubRingZooHypothesis = 2,\n  DogFashionDiscoAdultery = 3,\n}\n \nconst selectedAlbum = Album.JimmyEatWorldFutures;\nif (selectedAlbum === Album.JimmyEatWorldFutures) {\n  console.log(\"That is a great choice.\");\n}\n```\n\n编译结果如下：\n\n```javascript\n\"use strict\";\nconst selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;\nif (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {\n    console.log(\"That is a great choice.\");\n}\n```\n\n如果开启此项，则编译结果中会描述出该enum的结构。如下：\n\n```javascript\n\"use strict\";\nvar Album;\n(function (Album) {\n    Album[Album[\"JimmyEatWorldFutures\"] = 1] = \"JimmyEatWorldFutures\";\n    Album[Album[\"TubRingZooHypothesis\"] = 2] = \"TubRingZooHypothesis\";\n    Album[Album[\"DogFashionDiscoAdultery\"] = 3] = \"DogFashionDiscoAdultery\";\n})(Album || (Album = {}));\nconst selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;\nif (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {\n    console.log(\"That is a great choice.\");\n}\n\n```\n\n## preserveValueImports\n\n通常，打包器会将未使用的\"import\"移除掉，但开启了该特性后，会在编译中保留未使用的\"import\"。例如：\n\n```typescript\nimport { Animal } from \"./animal.js\";\neval(\"console.log(new Animal().isDangerous())\");\n```\n\n## removeComments\n\n移除代码中的注释。\n\n\n<!--hexo-->\n\n# compilerOptions - JavaScript Support\n\n对javascript文件的支持\n\n## allowJs\n\n允许`.ts`文件引用`.js`文件，这常用在javascript项目升级为typescript的过程中。\n\n## checkJs\n\n是否开启对`.js`文件的错误检查。\n\n## maxNodeModuleJsDepth\n\n为`.js`文件寻找类型定义文件时，允许的最大依赖深度。\n\n正常情况下，我们会在`.js`文件的同级补写`.d.ts`文件，tsc会很快找到类型定义。但有时候确实要扩大搜索范围去找部分`.js`文件的类型定义文件。\n\n<!--hexo-->\n\n# compilerOptions - Interop Constraints\n\n(模块)互相操作的约束\n\n## allowSyntheticDefaultImports\n\n允许合成`default`。\n\n如果一个模块A没有`export default`，那么另一个模块B在`import defaultA from './a'`的时候，会抛出错误说A中没有default。\n\n有一个做法是`import * as defaultA from './a'`曲线救国，但开启这个配置项后，可以直接使用`import defaultA from './a'`这样的语法了。\n\n## esModuleInterop\n\nesm在使用`import default from 'xxx'`方式导入cjs的时候会抛出一个错误，因为cjs模块中没有default。开启此选项后，typescript会使用一些helpers去兼容cjs的default问题。\n\n## forceConsistentCasingInFileNames\n\n强制引用的模块文件名，和磁盘中的文件名保持一致的大小写。\n\n<!--hexo-->\n\n# compilerOptions - Language and Environment\n\n和语言、环境有关的配置项。\n\n## jsx\n\n如何解析`.tsx`文件中jsx语法？在2023年，react17+后，用`react-jsx`就行了。\n\n## lib\n\n在项目中使用的api类型定义集合。\n\nts是需要知道你用的每一个javascript方法、属性的定义的，所以它内置了一批定义（比如Math.abs方法）。但是呢，后面新增方法的定义，需要你手工指定包含，ts才能理解了，比如Array.include方法，你就要包含ES2016。但好在你不需要记住这些，因为当你指定`target`字段时，lib会被默认设置成对应的值的。\n\n另外，大部分情况下，我们要访问一些和特定环境有关的特性，比如浏览器里的Dom特性，那么这儿额外引入`DOM`定义就行了。\n\n## target\n\n项目编译的目标javascript版本。\n\n也就是你的目标客户端支持的最低javascript版本。注意它会影响默认的`lib`配置项。\n\n\n<!--hexo-->\n\n# compilerOptions - Compiler Diagnostics\n\n编译诊断配置项。\n\n## diagnostics / extendedDiagnostics\n\n打印出编译的信息，比如多少文件、编译时间等。\n\nextendedDiagnostics包含了diagnostics给出的所有信息，所以用extendedDiagnostics就行了。这是一个开启extendedDiagnostics的编译信息：\n\n```bash\nFiles:                         143\nLines of Library:            38663\nLines of Definitions:        82578\nSymbols:                     73362\nTypes:                        1495\nParse time:                  0.50s\nResolveModule time:          0.03s\nTotal time:                  1.01s\n```\n\n## explainFiles\n\n打印出文件被编译的原因，也就是它们的引用链。\n\n## listEmittedFiles / listFiles\n\n列出参与编译的文件。\n\n## traceResolution\n\n打印每一个文件的编译流程。\n\n\n<!--hexo-->\n\n# compilerOptions - Completeness\n\n完整性检测的配置项\n\n## skipLibCheck\n\n跳过lib库的类型检测。\n\n\n\n","slug":"tsconfig-json","published":1,"updated":"2024-01-03T09:22:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxkljy50003jgq99l4of3q1","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/23\">https://github.com/taoliujun/blog/issues/23</a></p>\n<!--hexo\n---\nurl: tsconfig-json\ntags:\n  - typescript\n---\n-->\n\n<p><strong>截至TypeScript 5.2</strong>，<code>tsconfig.json</code>的配置项已经有百十个之多，它的某些选项甚至影响了项目的执行结果，所以尽量多的了解它们能让程序员更深的了解ts，写出优美语句让CTO赞赏，甚至避免写出bug。</p>\n<p>本issue的内容，只是个人在工作经验的影响下，对官方文档的内容理解。且内容有所欠缺，基本只记录了我工作涉及到的配置项，比如不怎么使用class，对class的配置项就略过了。</p>\n<p>官方文档：<a href=\"https://www.typescriptlang.org/tsconfig\">https://www.typescriptlang.org/tsconfig</a></p>\n<hr>\n<!--hexo-->\n\n<h1 id=\"Top-Level\"><a href=\"#Top-Level\" class=\"headerlink\" title=\"Top Level\"></a>Top Level</h1><p>一些根配置项。</p>\n<h2 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h2><p>继承另一个配置文件，推荐的一些官方的配置文件来继承使用：<a href=\"https://github.com/tsconfig/bases/tree/main/bases\">https://github.com/tsconfig/bases/tree/main/bases</a></p>\n<h2 id=\"files-include-exclude\"><a href=\"#files-include-exclude\" class=\"headerlink\" title=\"files, include, exclude\"></a>files, include, exclude</h2><p>这几项指定了在项目里，被ts作用的文件集合。配置本身没什么好说的，记录下它们之间的关系。</p>\n<ul>\n<li>如果files指定了，那么include的默认值是<code>[]</code>，否则include的默认值是<code>**/*</code>；</li>\n<li>exclude用于排除include已指定的文件集合，但这些文件仍然是可以在项目里被引用的；</li>\n<li>exclude默认排除了<code>node_modules</code>、<code>outDir</code>；</li>\n</ul>\n<h2 id=\"references\"><a href=\"#references\" class=\"headerlink\" title=\"references\"></a>references</h2><p>用于项目文件夹分别打包，并且其中有缓存机制的参与，所以编译速度会快很多。</p>\n<p>如下项目结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./interface</span><br><span class=\"line\">./components</span><br><span class=\"line\">./user</span><br><span class=\"line\">./admin</span><br><span class=\"line\">./tsconfig.json</span><br></pre></td></tr></table></figure>\n\n<p>在上面，user和admin文件夹分别是业务用户端、业务管理端，interface是接口定义，components是通用组件。在以往，改动了任何文件，都需要整个项目重新编译。而在使用references之后，将4个文件夹中放入对应的tsconfig.json并各有配置，在根tsconfig中指定好references的path后，tsc利用缓存机制，会只打包改动过的文件夹。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions\"><a href=\"#compilerOptions\" class=\"headerlink\" title=\"compilerOptions\"></a>compilerOptions</h1><p>编译器配置项太多了，按作用拆分成几个评论来说。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Type-Checking\"><a href=\"#compilerOptions-Type-Checking\" class=\"headerlink\" title=\"compilerOptions - Type Checking\"></a>compilerOptions - Type Checking</h1><p>和类型检查有关的配置项。</p>\n<h2 id=\"strict\"><a href=\"#strict\" class=\"headerlink\" title=\"strict\"></a>strict</h2><p>strict是一个严格模式的快捷开关，开启后会默认打开strictNullChecks、noImplicitAny等选项。并且随着typescript的升级，它可能会默认开启新增特性，列出截至5.2默认开启的选项：</p>\n<p><a href=\"https://www.typescriptlang.org/tsconfig#alwaysStrict\">alwaysStrict</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictNullChecks\">strictNullChecks</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictBindCallApply\">strictBindCallApply</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictFunctionTypes\">strictFunctionTypes</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictPropertyInitialization\">strictPropertyInitialization</a><br><a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a><br><a href=\"https://www.typescriptlang.org/tsconfig#noImplicitThis\">noImplicitThis</a><br><a href=\"https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables\">useUnknownInCatchVariables</a></p>\n<h2 id=\"alwaysStrict\"><a href=\"#alwaysStrict\" class=\"headerlink\" title=\"alwaysStrict\"></a>alwaysStrict</h2><p>对所有文件启用javascript strict模式。注意，这和typescript strict不是同一个东西。参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode</a></p>\n<h2 id=\"allowUnreachableCode\"><a href=\"#allowUnreachableCode\" class=\"headerlink\" title=\"allowUnreachableCode\"></a>allowUnreachableCode</h2><p>对未使用的代码的处理策略，可设置警告(默认)、错误、忽略。</p>\n<h2 id=\"allowUnusedLabels\"><a href=\"#allowUnusedLabels\" class=\"headerlink\" title=\"allowUnusedLabels\"></a>allowUnusedLabels</h2><p>对未使用的Label的处理策略，可设置警告(默认)、错误、忽略。</p>\n<h2 id=\"exactOptionalPropertyTypes\"><a href=\"#exactOptionalPropertyTypes\" class=\"headerlink\" title=\"exactOptionalPropertyTypes\"></a>exactOptionalPropertyTypes</h2><p>对可选项设置为undefined的策略。</p>\n<p>举例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    sex?: <span class=\"number\">1</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">man</span>: <span class=\"title class_\">User</span> = &#123;&#125;;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>User.sex</code>是一个可选项，它的预期值是<code>0|1|undefined</code>。但是呢，<code>sex</code>可选想表达的意思是未被定义，而不是值真的是undefined。那么开启本选项后，<code>man.sex = undefined</code>这个赋值语句会给一个报错。</p>\n<h2 id=\"noImplicitAny\"><a href=\"#noImplicitAny\" class=\"headerlink\" title=\"noImplicitAny\"></a>noImplicitAny</h2><p>对推导类型为any的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s.<span class=\"title function_\">subtr</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>入参<code>s</code>推导为<code>any</code>，在选项开启情况下会报错。</p>\n<h2 id=\"noImplicitReturns\"><a href=\"#noImplicitReturns\" class=\"headerlink\" title=\"noImplicitReturns\"></a>noImplicitReturns</h2><p>对函数每个分支必须有return语句的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;nothing&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开启后，ts报错认为<code>fn</code>函数的最后没有return语句。</p>\n<h2 id=\"noPropertyAccessFromIndexSignature\"><a href=\"#noPropertyAccessFromIndexSignature\" class=\"headerlink\" title=\"noPropertyAccessFromIndexSignature\"></a>noPropertyAccessFromIndexSignature</h2><p>对访问未定义的对象属性的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a</span>: <span class=\"title class_\">User</span> = &#123;&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>, a[<span class=\"string\">&#x27;name&#x27;</span>], a.<span class=\"property\">sex</span>, a[<span class=\"string\">&#x27;sex&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>访问对象属性有<code>.</code>和<code>[index]</code>两个方式，访问未定义的属性，开启本选项后，在<code>a.sex</code>处会抛出一个错误。</p>\n<h2 id=\"noUncheckedIndexedAccess\"><a href=\"#noUncheckedIndexedAccess\" class=\"headerlink\" title=\"noUncheckedIndexedAccess\"></a>noUncheckedIndexedAccess</h2><p>未定义的对象属性值类型，给追加上<code>undefined</code>类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> <span class=\"attr\">admin</span>: <span class=\"title class_\">User</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (property) User.name: string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"comment\">// (index) User[string]: string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上例中，birthday的值类型是<code>string</code>，开启本项后，类型追加上<code>undefined</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (index) User[string]: string | undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noUnusedLocals\"><a href=\"#noUnusedLocals\" class=\"headerlink\" title=\"noUnusedLocals\"></a>noUnusedLocals</h2><p>局部变量未使用，抛出错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModelID = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;defaultModelID&#x27; is declared but its value is never read.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noUnusedParameters\"><a href=\"#noUnusedParameters\" class=\"headerlink\" title=\"noUnusedParameters\"></a>noUnusedParameters</h2><p>入参未使用，抛出错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createDefaultKeyboard</span> = (<span class=\"params\">modelID: <span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;modelID&#x27; is declared but its value is never read.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModelID = <span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;keyboard&quot;</span>, <span class=\"attr\">modelID</span>: defaultModelID &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strictBindCallApply\"><a href=\"#strictBindCallApply\" class=\"headerlink\" title=\"strictBindCallApply\"></a>strictBindCallApply</h2><p>在使用函数的call、bind、apply时，是否要检查传入参数的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> n1 = fn.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> n2 = fn.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，第二个call中的入参false和string类型不匹配而报错。</p>\n<h2 id=\"strictFunctionTypes\"><a href=\"#strictFunctionTypes\" class=\"headerlink\" title=\"strictFunctionTypes\"></a>strictFunctionTypes</h2><p>更精确的检查函数入参类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetUser</span> = <span class=\"function\">(<span class=\"params\">id: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getUser</span>: <span class=\"title class_\">GetUser</span> = test;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，GetUser的入参类型<code>string | number</code>不能精确的分配给test的入参类型<code>string</code>。</p>\n<h2 id=\"strictNullChecks\"><a href=\"#strictNullChecks\" class=\"headerlink\" title=\"strictNullChecks\"></a>strictNullChecks</h2><p>是否校验<code>null</code>, <code>undefined</code>的属性访问？</p>\n<p>在以往的纯js项目中，容易忽略变量为undefined后仍然访问其属性的场景，比如在如下代码中，忽略了<code>a</code>为<code>undefined</code>的情况，导致运行时引发异常。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = arr1.<span class=\"title function_\">find</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本选项开启后，在静态检查时就提示开发者，变量可能是<code>null</code>, <code>undefined</code>，不能访问到<code>name</code>属性。</p>\n<h2 id=\"useUnknownInCatchVariables\"><a href=\"#useUnknownInCatchVariables\" class=\"headerlink\" title=\"useUnknownInCatchVariables\"></a>useUnknownInCatchVariables</h2><p>有时候我们并不知道catch的err类型是什么，它的类型由try里的实际运行分支决定，而如果当成any处理，那么访问它的属性是危险的。当开启本项后，err的类型是unknown，必须先限定其类型再安全的访问其属性，如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Error</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Modules\"><a href=\"#compilerOptions-Modules\" class=\"headerlink\" title=\"compilerOptions - Modules\"></a>compilerOptions - Modules</h1><p>模块的处理策略。</p>\n<h2 id=\"allowArbitraryExtensions\"><a href=\"#allowArbitraryExtensions\" class=\"headerlink\" title=\"allowArbitraryExtensions\"></a>allowArbitraryExtensions</h2><p>ts默认支持了ts、js、cjs、jsx等模块的解析描述，通过<code>global.d.ts</code>的定义扩展，还可以支持css、jpg等模块的解析描述（你要自己保证webpack loader之类的解析器去真实支持加载这些模块）。而有时候，需要对特定模块文件（不管是否已全局定义过该模块的描述）做特别的描述，就可以开启该选项，并且创建一个<code>&#123;file basename&#125;.d.&#123;extension&#125;.ts</code>文件。</p>\n<p>如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错：Cannot find module &#x27;./a.jpk&#x27; or its corresponding type declarations.ts(2307)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.jpk&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// doTest类型是any</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">doTest</span>());</span><br></pre></td></tr></table></figure>\n\n<p>开启该项，并增加<code>a.d.jpk.ts</code>文件：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.d.jpk.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> <span class=\"attr\">jpk</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">doTest</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> jpk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.jpk&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// doTest的类型：(property) doTest: () =&gt; void</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">doTest</span>());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allowImportingTsExtensions\"><a href=\"#allowImportingTsExtensions\" class=\"headerlink\" title=\"allowImportingTsExtensions\"></a>allowImportingTsExtensions</h2><p>是否允许在import path带入ts、tsx等后缀名。</p>\n<p>ts项目需要编译成js代码后执行，如果我们使用ts-node来执行项目，可以启用<code>noEmit</code>来禁止这个编译行为，并且在项目源码中直接引入<code>.ts</code>来引入正确的、完整的路径。</p>\n<p>举例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; wait &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/utils.ts&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allowUmdGlobalAccess\"><a href=\"#allowUmdGlobalAccess\" class=\"headerlink\" title=\"allowUmdGlobalAccess\"></a>allowUmdGlobalAccess</h2><p>&#x2F;&#x2F; TODO<br>和umd的声明有关系，不过我还不明确它的意义。见：<a href=\"https://github.com/microsoft/TypeScript/pull/30776%E3%80%82\">https://github.com/microsoft/TypeScript/pull/30776。</a></p>\n<h2 id=\"baseUrl\"><a href=\"#baseUrl\" class=\"headerlink\" title=\"baseUrl\"></a>baseUrl</h2><p>为解析无路径修饰的模块，设置一个基础路径。 什么叫做无路径修饰？就是该模块不是一个绝对或相对路径，如<code>import a from &#39;@/hello/world&#39;</code>。</p>\n<p>如果配置了该项，那么ts从该项指定的目录中开始查找模块，优先级也高于<code>node_modules</code>。</p>\n<h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><p>模块打包的策略，也就是指编译后的模块加载代码是require、import之类的语法。推荐大家阅读：<a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html\">模块理论</a>。</p>\n<p>这个话题有点繁琐，也涉及到javascript的模块化amd、umd之类的历史，对于2023年这个时间点来说，关注下CommonJS、ESM即可，ESM还细分为ES2015、ES20XX等版本，他们的模块打包策略是一样的，区别是更高版本的ESM还支持了<code>dynamic imports</code>、<code>import.meta</code>和<code>top level await</code>之类的东西。</p>\n<p>补充的是，nodejs的模块打包策略也早就支持esm了，具体参照package.json的设置：<a href=\"https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext\">https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext</a></p>\n<h2 id=\"moduleResolution\"><a href=\"#moduleResolution\" class=\"headerlink\" title=\"moduleResolution\"></a>moduleResolution</h2><p>加载模块的策略，也就是指用什么策略去解析<code>import xxx from &#39;pathA&#39;</code>这里的<code>pathA</code>。<strong>注意区分和module的关系，module指的是项目的模块化是如何打包的，而moduleResolution指的是项目如何加载模块的</strong>。截至2023支持如下策略：</p>\n<ul>\n<li>node16&#x2F;nodenext，对于Node12+版本，本策略可自由根据import&#x2F;require选择合适的算法去加载模块。</li>\n<li>node10，对于Node12之前的版本，本策略只支持require算法加载模块。<strong>基本不用关心了</strong></li>\n<li>bundler，和node16一样，但不要求模块有后缀名。</li>\n<li>classic，早期的策略，不用管了。</li>\n</ul>\n<p><strong>这东西还要和module搭配使用，并且！并且！和package.json还有扯不清的关系。强烈建议阅读上文提到的<a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html\">模块理论</a></strong></p>\n<p>另外，由于自己对这块的理解也不足深，还参考了这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/621795173%E3%80%82\">https://zhuanlan.zhihu.com/p/621795173。</a></p>\n<h2 id=\"moduleSuffixes\"><a href=\"#moduleSuffixes\" class=\"headerlink\" title=\"moduleSuffixes\"></a>moduleSuffixes</h2><p>模块搜索时的文件扩展名补充，比如以下配置项：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleSuffixes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.ios&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.native&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> foo <span class=\"keyword\">from</span> <span class=\"string\">&quot;./foo&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>TypeScript 会按顺序寻找<code>./foo.ios.ts</code>、<code>./foo.native.ts</code>、<code>./foo.ts</code>。</p>\n<h2 id=\"paths\"><a href=\"#paths\" class=\"headerlink\" title=\"paths\"></a>paths</h2><p>在加载模块路径时，加入一个别名匹配。可以理解为webpack的alias。</p>\n<h2 id=\"resolveJsonModule\"><a href=\"#resolveJsonModule\" class=\"headerlink\" title=\"resolveJsonModule\"></a>resolveJsonModule</h2><p>允许加载json模块（文件）。</p>\n<h2 id=\"resolvePackageJsonExports\"><a href=\"#resolvePackageJsonExports\" class=\"headerlink\" title=\"resolvePackageJsonExports\"></a>resolvePackageJsonExports</h2><p>引用<code>node_modules</code>包时，强制遵循包package.json的exports字段的定义。还是那句话，阅读下模块理论那篇文章，不然很难理解前面这句话的信息量。</p>\n<h2 id=\"resolvePackageJsonImports\"><a href=\"#resolvePackageJsonImports\" class=\"headerlink\" title=\"resolvePackageJsonImports\"></a>resolvePackageJsonImports</h2><p>强制typescript使用package.json中imports字段的定义去加载<code>#</code>符号开头的模块路径。例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"string\">&quot;imports&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;#test/*&quot;</span>: <span class=\"string\">&quot;./src/test/*&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/test/1.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/b.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;#test/1&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==a&#x27;</span>, a);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rootDir\"><a href=\"#rootDir\" class=\"headerlink\" title=\"rootDir\"></a>rootDir</h2><p>指定项目的根目录，默认值可以理解为所有ts文件目录的最大集。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyProj</span><br><span class=\"line\">├── tsconfig.json</span><br><span class=\"line\">├── core</span><br><span class=\"line\">│   ├── a.ts</span><br><span class=\"line\">│   ├── b.ts</span><br><span class=\"line\">│   ├── sub</span><br><span class=\"line\">│   │   ├── c.ts</span><br><span class=\"line\">├── types.d.ts</span><br></pre></td></tr></table></figure>\n\n<p>如上的项目，rootDir的推断值是”core”。但是你可以手工指定为<code>tsconfig.json</code>的相对目录”，比如.”。</p>\n<p>另外，如果设置了<code>composite</code>，<code>rootDir</code>的默认值就是<code>tsconfig.json</code>文件的目录。</p>\n<h2 id=\"rootDirs\"><a href=\"#rootDirs\" class=\"headerlink\" title=\"rootDirs\"></a>rootDirs</h2><p>这个属性有点拽，它可以将多个目录虚拟成一个目录。这样在<code>import</code>的时候，就当成同一个目录就行啦。</p>\n<h2 id=\"typeRoots\"><a href=\"#typeRoots\" class=\"headerlink\" title=\"typeRoots\"></a>typeRoots</h2><p>类型定义文件的目录，默认所有@types目录都会被包含，包括node_modules下的@types目录。<br>如果指定了typeRoots，那么@types目录的相关规则会被忽略。</p>\n<h2 id=\"types\"><a href=\"#types\" class=\"headerlink\" title=\"types\"></a>types</h2><p>类型定义文件的具体目录，规则和<code>typeRoots</code>一样，不同点是<code>types</code>只指定具体目录，而非<code>*</code>这种匹配型目录。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Emit\"><a href=\"#compilerOptions-Emit\" class=\"headerlink\" title=\"compilerOptions - Emit\"></a>compilerOptions - Emit</h1><p>编译策略。</p>\n<h2 id=\"outDir\"><a href=\"#outDir\" class=\"headerlink\" title=\"outDir\"></a>outDir</h2><p>编译文件放置的目录，默认和源码放同一个目录。</p>\n<h2 id=\"noEmit\"><a href=\"#noEmit\" class=\"headerlink\" title=\"noEmit\"></a>noEmit</h2><p>不要编译ts。</p>\n<p>项目中一般使用babel去编译，typescript仅用来做静态检查，所以设置noEmit就可以不生成js、sourcemap、declaration文件了。</p>\n<h2 id=\"noEmitOnError\"><a href=\"#noEmitOnError\" class=\"headerlink\" title=\"noEmitOnError\"></a>noEmitOnError</h2><p>顾名思义，在检查到错误的时候，不要继续编译了。</p>\n<h2 id=\"declaration-x2F-emitDeclarationOnly-x2F-declarationDir\"><a href=\"#declaration-x2F-emitDeclarationOnly-x2F-declarationDir\" class=\"headerlink\" title=\"declaration &#x2F; emitDeclarationOnly &#x2F; declarationDir\"></a>declaration &#x2F; emitDeclarationOnly &#x2F; declarationDir</h2><p>生成类型描述文件。</p>\n<p>这个是typescript最重要的几个特性之一了，为<code>.ts</code>文件生成类型定义文件<code>.d.ts</code>。如果不想同时生成<code>.js</code>文件，则使用<code>emitDeclarationOnly</code>。</p>\n<p>同时，可以使用<code>declarationDir</code>指定类型定义文件的生成目录。</p>\n<h2 id=\"declarationMap\"><a href=\"#declarationMap\" class=\"headerlink\" title=\"declarationMap\"></a>declarationMap</h2><p>给<code>.d.ts</code>文件增加一个map标识到<code>.ts</code>源文件，类似sourceMap。</p>\n<h2 id=\"sourceMap-x2F-inlineSourceMap-x2F-inlineSources-x2F-mapRoot-x2F-sourceRoot\"><a href=\"#sourceMap-x2F-inlineSourceMap-x2F-inlineSources-x2F-mapRoot-x2F-sourceRoot\" class=\"headerlink\" title=\"sourceMap &#x2F; inlineSourceMap &#x2F; inlineSources &#x2F; mapRoot &#x2F; sourceRoot\"></a>sourceMap &#x2F; inlineSourceMap &#x2F; inlineSources &#x2F; mapRoot &#x2F; sourceRoot</h2><p>typescript也是支持souce map的，这里就不解释sourcemap是什么了。它的相关配置项有：</p>\n<p>sourceMap，生成sourcemap文件。<br>inlineSourceMap，不生成sourcemap文件，而是直接把source内容写在.js文件中。<br>inlineSources，同inlineSourceMap。<br>mapRoot，指定sourceMap文件的路径，比如部署到网络中，可以指定为”<a href=\"http://xxxx.com\"./\">http://xxxx.com\"。</a><br>sourceRoot，指定source文件的路径，同mapRoot。</p>\n<h2 id=\"downlevelIteration\"><a href=\"#downlevelIteration\" class=\"headerlink\" title=\"downlevelIteration\"></a>downlevelIteration</h2><p>对迭代器的降级解析。</p>\n<p>在es6中增加了for&#x2F;of，spread等迭代特性，typescript在编译成es5的时候，要使用何种语法。文档中有个字符遍历的例子说明开启与否的迭代影响，这对业务计算结果是有影响的。</p>\n<p>不过项目中使用了babel之类的编译器，就不用担心这些影响了。</p>\n<h2 id=\"importHelpers\"><a href=\"#importHelpers\" class=\"headerlink\" title=\"importHelpers\"></a>importHelpers</h2><p>引入降级解析的包。</p>\n<p>将es6的某些特新编译成es5，如迭代器、异步语法等，会将模块中每个相应的代码都编译成降级代码，使得类似代码重复。如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __read = (<span class=\"variable language_\">this</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">__read</span>) || <span class=\"keyword\">function</span> (<span class=\"params\">o, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; o[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = m.<span class=\"title function_\">call</span>(o), r, ar = [], e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((n === <span class=\"built_in\">void</span> <span class=\"number\">0</span> || n-- &gt; <span class=\"number\">0</span>) &amp;&amp; !(r = i.<span class=\"title function_\">next</span>()).<span class=\"property\">done</span>) ar.<span class=\"title function_\">push</span>(r.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (error) &#123; e = &#123; <span class=\"attr\">error</span>: error &#125;; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &amp;&amp; !r.<span class=\"property\">done</span> &amp;&amp; (m = i[<span class=\"string\">&quot;return&quot;</span>])) m.<span class=\"title function_\">call</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123; <span class=\"keyword\">if</span> (e) <span class=\"keyword\">throw</span> e.<span class=\"property\">error</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ar;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> __spreadArray = (<span class=\"variable language_\">this</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">__spreadArray</span>) || <span class=\"keyword\">function</span> (<span class=\"params\">to, <span class=\"keyword\">from</span>, pack</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pack || <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">from</span>.<span class=\"property\">length</span>, ar; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ar || !(i <span class=\"keyword\">in</span> <span class=\"keyword\">from</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ar) ar = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">from</span>, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            ar[i] = <span class=\"keyword\">from</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> to.<span class=\"title function_\">concat</span>(ar || <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">from</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr2 = <span class=\"title function_\">__spreadArray</span>([<span class=\"number\">1</span>], <span class=\"title function_\">__read</span>(arr), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果同时开启了<code>downlevelIteration</code>和<code>importHelpers</code>，并且安装了<code>tslib</code>包，那么代码会编译成类似这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; __read, __spreadArray &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;tslib&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr2 = <span class=\"title function_\">__spreadArray</span>([<span class=\"number\">1</span>], <span class=\"title function_\">__read</span>(arr), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noEmitHelpers\"><a href=\"#noEmitHelpers\" class=\"headerlink\" title=\"noEmitHelpers\"></a>noEmitHelpers</h2><p>typescript处理迭代器、异步等的降级策略是生成一堆降级代码，也可以使用”importHelpers”和”tslib”来提取公共代码。但通过这个配置，可以自定义降级代码了。具体参照文档。</p>\n<h2 id=\"preserveConstEnums\"><a href=\"#preserveConstEnums\" class=\"headerlink\" title=\"preserveConstEnums\"></a>preserveConstEnums</h2><p>是否在编辑结果中移除<code>const enum</code>的定义。因为javascript没有enum概念，typescript会将enum的引用编译成具体的值。如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Album</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">JimmyEatWorldFutures</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">TubRingZooHypothesis</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DogFashionDiscoAdultery</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"title class_\">Album</span>.<span class=\"property\">JimmyEatWorldFutures</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"title class_\">Album</span>.<span class=\"property\">JimmyEatWorldFutures</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果开启此项，则编译结果中会描述出该enum的结构。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Album</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Album</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;JimmyEatWorldFutures&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;JimmyEatWorldFutures&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;TubRingZooHypothesis&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;TubRingZooHypothesis&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;DogFashionDiscoAdultery&quot;</span>] = <span class=\"number\">3</span>] = <span class=\"string\">&quot;DogFashionDiscoAdultery&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Album</span> || (<span class=\"title class_\">Album</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"preserveValueImports\"><a href=\"#preserveValueImports\" class=\"headerlink\" title=\"preserveValueImports\"></a>preserveValueImports</h2><p>通常，打包器会将未使用的”import”移除掉，但开启了该特性后，会在编译中保留未使用的”import”。例如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Animal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./animal.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;console.log(new Animal().isDangerous())&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"removeComments\"><a href=\"#removeComments\" class=\"headerlink\" title=\"removeComments\"></a>removeComments</h2><p>移除代码中的注释。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-JavaScript-Support\"><a href=\"#compilerOptions-JavaScript-Support\" class=\"headerlink\" title=\"compilerOptions - JavaScript Support\"></a>compilerOptions - JavaScript Support</h1><p>对javascript文件的支持</p>\n<h2 id=\"allowJs\"><a href=\"#allowJs\" class=\"headerlink\" title=\"allowJs\"></a>allowJs</h2><p>允许<code>.ts</code>文件引用<code>.js</code>文件，这常用在javascript项目升级为typescript的过程中。</p>\n<h2 id=\"checkJs\"><a href=\"#checkJs\" class=\"headerlink\" title=\"checkJs\"></a>checkJs</h2><p>是否开启对<code>.js</code>文件的错误检查。</p>\n<h2 id=\"maxNodeModuleJsDepth\"><a href=\"#maxNodeModuleJsDepth\" class=\"headerlink\" title=\"maxNodeModuleJsDepth\"></a>maxNodeModuleJsDepth</h2><p>为<code>.js</code>文件寻找类型定义文件时，允许的最大依赖深度。</p>\n<p>正常情况下，我们会在<code>.js</code>文件的同级补写<code>.d.ts</code>文件，tsc会很快找到类型定义。但有时候确实要扩大搜索范围去找部分<code>.js</code>文件的类型定义文件。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Interop-Constraints\"><a href=\"#compilerOptions-Interop-Constraints\" class=\"headerlink\" title=\"compilerOptions - Interop Constraints\"></a>compilerOptions - Interop Constraints</h1><p>(模块)互相操作的约束</p>\n<h2 id=\"allowSyntheticDefaultImports\"><a href=\"#allowSyntheticDefaultImports\" class=\"headerlink\" title=\"allowSyntheticDefaultImports\"></a>allowSyntheticDefaultImports</h2><p>允许合成<code>default</code>。</p>\n<p>如果一个模块A没有<code>export default</code>，那么另一个模块B在<code>import defaultA from &#39;./a&#39;</code>的时候，会抛出错误说A中没有default。</p>\n<p>有一个做法是<code>import * as defaultA from &#39;./a&#39;</code>曲线救国，但开启这个配置项后，可以直接使用<code>import defaultA from &#39;./a&#39;</code>这样的语法了。</p>\n<h2 id=\"esModuleInterop\"><a href=\"#esModuleInterop\" class=\"headerlink\" title=\"esModuleInterop\"></a>esModuleInterop</h2><p>esm在使用<code>import default from &#39;xxx&#39;</code>方式导入cjs的时候会抛出一个错误，因为cjs模块中没有default。开启此选项后，typescript会使用一些helpers去兼容cjs的default问题。</p>\n<h2 id=\"forceConsistentCasingInFileNames\"><a href=\"#forceConsistentCasingInFileNames\" class=\"headerlink\" title=\"forceConsistentCasingInFileNames\"></a>forceConsistentCasingInFileNames</h2><p>强制引用的模块文件名，和磁盘中的文件名保持一致的大小写。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Language-and-Environment\"><a href=\"#compilerOptions-Language-and-Environment\" class=\"headerlink\" title=\"compilerOptions - Language and Environment\"></a>compilerOptions - Language and Environment</h1><p>和语言、环境有关的配置项。</p>\n<h2 id=\"jsx\"><a href=\"#jsx\" class=\"headerlink\" title=\"jsx\"></a>jsx</h2><p>如何解析<code>.tsx</code>文件中jsx语法？在2023年，react17+后，用<code>react-jsx</code>就行了。</p>\n<h2 id=\"lib\"><a href=\"#lib\" class=\"headerlink\" title=\"lib\"></a>lib</h2><p>在项目中使用的api类型定义集合。</p>\n<p>ts是需要知道你用的每一个javascript方法、属性的定义的，所以它内置了一批定义（比如Math.abs方法）。但是呢，后面新增方法的定义，需要你手工指定包含，ts才能理解了，比如Array.include方法，你就要包含ES2016。但好在你不需要记住这些，因为当你指定<code>target</code>字段时，lib会被默认设置成对应的值的。</p>\n<p>另外，大部分情况下，我们要访问一些和特定环境有关的特性，比如浏览器里的Dom特性，那么这儿额外引入<code>DOM</code>定义就行了。</p>\n<h2 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h2><p>项目编译的目标javascript版本。</p>\n<p>也就是你的目标客户端支持的最低javascript版本。注意它会影响默认的<code>lib</code>配置项。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Compiler-Diagnostics\"><a href=\"#compilerOptions-Compiler-Diagnostics\" class=\"headerlink\" title=\"compilerOptions - Compiler Diagnostics\"></a>compilerOptions - Compiler Diagnostics</h1><p>编译诊断配置项。</p>\n<h2 id=\"diagnostics-x2F-extendedDiagnostics\"><a href=\"#diagnostics-x2F-extendedDiagnostics\" class=\"headerlink\" title=\"diagnostics &#x2F; extendedDiagnostics\"></a>diagnostics &#x2F; extendedDiagnostics</h2><p>打印出编译的信息，比如多少文件、编译时间等。</p>\n<p>extendedDiagnostics包含了diagnostics给出的所有信息，所以用extendedDiagnostics就行了。这是一个开启extendedDiagnostics的编译信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Files:                         143</span><br><span class=\"line\">Lines of Library:            38663</span><br><span class=\"line\">Lines of Definitions:        82578</span><br><span class=\"line\">Symbols:                     73362</span><br><span class=\"line\">Types:                        1495</span><br><span class=\"line\">Parse time:                  0.50s</span><br><span class=\"line\">ResolveModule time:          0.03s</span><br><span class=\"line\">Total time:                  1.01s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explainFiles\"><a href=\"#explainFiles\" class=\"headerlink\" title=\"explainFiles\"></a>explainFiles</h2><p>打印出文件被编译的原因，也就是它们的引用链。</p>\n<h2 id=\"listEmittedFiles-x2F-listFiles\"><a href=\"#listEmittedFiles-x2F-listFiles\" class=\"headerlink\" title=\"listEmittedFiles &#x2F; listFiles\"></a>listEmittedFiles &#x2F; listFiles</h2><p>列出参与编译的文件。</p>\n<h2 id=\"traceResolution\"><a href=\"#traceResolution\" class=\"headerlink\" title=\"traceResolution\"></a>traceResolution</h2><p>打印每一个文件的编译流程。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Completeness\"><a href=\"#compilerOptions-Completeness\" class=\"headerlink\" title=\"compilerOptions - Completeness\"></a>compilerOptions - Completeness</h1><p>完整性检测的配置项</p>\n<h2 id=\"skipLibCheck\"><a href=\"#skipLibCheck\" class=\"headerlink\" title=\"skipLibCheck\"></a>skipLibCheck</h2><p>跳过lib库的类型检测。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/23\">https://github.com/taoliujun/blog/issues/23</a></p>\n<!--hexo\n---\nurl: tsconfig-json\ntags:\n  - typescript\n---\n-->\n\n<p><strong>截至TypeScript 5.2</strong>，<code>tsconfig.json</code>的配置项已经有百十个之多，它的某些选项甚至影响了项目的执行结果，所以尽量多的了解它们能让程序员更深的了解ts，写出优美语句让CTO赞赏，甚至避免写出bug。</p>\n<p>本issue的内容，只是个人在工作经验的影响下，对官方文档的内容理解。且内容有所欠缺，基本只记录了我工作涉及到的配置项，比如不怎么使用class，对class的配置项就略过了。</p>\n<p>官方文档：<a href=\"https://www.typescriptlang.org/tsconfig\">https://www.typescriptlang.org/tsconfig</a></p>\n<hr>\n<!--hexo-->\n\n<h1 id=\"Top-Level\"><a href=\"#Top-Level\" class=\"headerlink\" title=\"Top Level\"></a>Top Level</h1><p>一些根配置项。</p>\n<h2 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h2><p>继承另一个配置文件，推荐的一些官方的配置文件来继承使用：<a href=\"https://github.com/tsconfig/bases/tree/main/bases\">https://github.com/tsconfig/bases/tree/main/bases</a></p>\n<h2 id=\"files-include-exclude\"><a href=\"#files-include-exclude\" class=\"headerlink\" title=\"files, include, exclude\"></a>files, include, exclude</h2><p>这几项指定了在项目里，被ts作用的文件集合。配置本身没什么好说的，记录下它们之间的关系。</p>\n<ul>\n<li>如果files指定了，那么include的默认值是<code>[]</code>，否则include的默认值是<code>**/*</code>；</li>\n<li>exclude用于排除include已指定的文件集合，但这些文件仍然是可以在项目里被引用的；</li>\n<li>exclude默认排除了<code>node_modules</code>、<code>outDir</code>；</li>\n</ul>\n<h2 id=\"references\"><a href=\"#references\" class=\"headerlink\" title=\"references\"></a>references</h2><p>用于项目文件夹分别打包，并且其中有缓存机制的参与，所以编译速度会快很多。</p>\n<p>如下项目结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./interface</span><br><span class=\"line\">./components</span><br><span class=\"line\">./user</span><br><span class=\"line\">./admin</span><br><span class=\"line\">./tsconfig.json</span><br></pre></td></tr></table></figure>\n\n<p>在上面，user和admin文件夹分别是业务用户端、业务管理端，interface是接口定义，components是通用组件。在以往，改动了任何文件，都需要整个项目重新编译。而在使用references之后，将4个文件夹中放入对应的tsconfig.json并各有配置，在根tsconfig中指定好references的path后，tsc利用缓存机制，会只打包改动过的文件夹。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions\"><a href=\"#compilerOptions\" class=\"headerlink\" title=\"compilerOptions\"></a>compilerOptions</h1><p>编译器配置项太多了，按作用拆分成几个评论来说。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Type-Checking\"><a href=\"#compilerOptions-Type-Checking\" class=\"headerlink\" title=\"compilerOptions - Type Checking\"></a>compilerOptions - Type Checking</h1><p>和类型检查有关的配置项。</p>\n<h2 id=\"strict\"><a href=\"#strict\" class=\"headerlink\" title=\"strict\"></a>strict</h2><p>strict是一个严格模式的快捷开关，开启后会默认打开strictNullChecks、noImplicitAny等选项。并且随着typescript的升级，它可能会默认开启新增特性，列出截至5.2默认开启的选项：</p>\n<p><a href=\"https://www.typescriptlang.org/tsconfig#alwaysStrict\">alwaysStrict</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictNullChecks\">strictNullChecks</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictBindCallApply\">strictBindCallApply</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictFunctionTypes\">strictFunctionTypes</a><br><a href=\"https://www.typescriptlang.org/tsconfig#strictPropertyInitialization\">strictPropertyInitialization</a><br><a href=\"https://www.typescriptlang.org/tsconfig#noImplicitAny\">noImplicitAny</a><br><a href=\"https://www.typescriptlang.org/tsconfig#noImplicitThis\">noImplicitThis</a><br><a href=\"https://www.typescriptlang.org/tsconfig#useUnknownInCatchVariables\">useUnknownInCatchVariables</a></p>\n<h2 id=\"alwaysStrict\"><a href=\"#alwaysStrict\" class=\"headerlink\" title=\"alwaysStrict\"></a>alwaysStrict</h2><p>对所有文件启用javascript strict模式。注意，这和typescript strict不是同一个东西。参考：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode</a></p>\n<h2 id=\"allowUnreachableCode\"><a href=\"#allowUnreachableCode\" class=\"headerlink\" title=\"allowUnreachableCode\"></a>allowUnreachableCode</h2><p>对未使用的代码的处理策略，可设置警告(默认)、错误、忽略。</p>\n<h2 id=\"allowUnusedLabels\"><a href=\"#allowUnusedLabels\" class=\"headerlink\" title=\"allowUnusedLabels\"></a>allowUnusedLabels</h2><p>对未使用的Label的处理策略，可设置警告(默认)、错误、忽略。</p>\n<h2 id=\"exactOptionalPropertyTypes\"><a href=\"#exactOptionalPropertyTypes\" class=\"headerlink\" title=\"exactOptionalPropertyTypes\"></a>exactOptionalPropertyTypes</h2><p>对可选项设置为undefined的策略。</p>\n<p>举例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    sex?: <span class=\"number\">1</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">man</span>: <span class=\"title class_\">User</span> = &#123;&#125;;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">man.<span class=\"property\">sex</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>User.sex</code>是一个可选项，它的预期值是<code>0|1|undefined</code>。但是呢，<code>sex</code>可选想表达的意思是未被定义，而不是值真的是undefined。那么开启本选项后，<code>man.sex = undefined</code>这个赋值语句会给一个报错。</p>\n<h2 id=\"noImplicitAny\"><a href=\"#noImplicitAny\" class=\"headerlink\" title=\"noImplicitAny\"></a>noImplicitAny</h2><p>对推导类型为any的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s.<span class=\"title function_\">subtr</span>(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>入参<code>s</code>推导为<code>any</code>，在选项开启情况下会报错。</p>\n<h2 id=\"noImplicitReturns\"><a href=\"#noImplicitReturns\" class=\"headerlink\" title=\"noImplicitReturns\"></a>noImplicitReturns</h2><p>对函数每个分支必须有return语句的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.<span class=\"title function_\">substring</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;nothing&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开启后，ts报错认为<code>fn</code>函数的最后没有return语句。</p>\n<h2 id=\"noPropertyAccessFromIndexSignature\"><a href=\"#noPropertyAccessFromIndexSignature\" class=\"headerlink\" title=\"noPropertyAccessFromIndexSignature\"></a>noPropertyAccessFromIndexSignature</h2><p>对访问未定义的对象属性的策略。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">a</span>: <span class=\"title class_\">User</span> = &#123;&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>, a[<span class=\"string\">&#x27;name&#x27;</span>], a.<span class=\"property\">sex</span>, a[<span class=\"string\">&#x27;sex&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>访问对象属性有<code>.</code>和<code>[index]</code>两个方式，访问未定义的属性，开启本选项后，在<code>a.sex</code>处会抛出一个错误。</p>\n<h2 id=\"noUncheckedIndexedAccess\"><a href=\"#noUncheckedIndexedAccess\" class=\"headerlink\" title=\"noUncheckedIndexedAccess\"></a>noUncheckedIndexedAccess</h2><p>未定义的对象属性值类型，给追加上<code>undefined</code>类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> <span class=\"attr\">admin</span>: <span class=\"title class_\">User</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (property) User.name: string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"comment\">// (index) User[string]: string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上例中，birthday的值类型是<code>string</code>，开启本项后，类型追加上<code>undefined</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// (index) User[string]: string | undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(admin.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noUnusedLocals\"><a href=\"#noUnusedLocals\" class=\"headerlink\" title=\"noUnusedLocals\"></a>noUnusedLocals</h2><p>局部变量未使用，抛出错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModelID = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;defaultModelID&#x27; is declared but its value is never read.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noUnusedParameters\"><a href=\"#noUnusedParameters\" class=\"headerlink\" title=\"noUnusedParameters\"></a>noUnusedParameters</h2><p>入参未使用，抛出错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createDefaultKeyboard</span> = (<span class=\"params\">modelID: <span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;modelID&#x27; is declared but its value is never read.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultModelID = <span class=\"number\">23</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;keyboard&quot;</span>, <span class=\"attr\">modelID</span>: defaultModelID &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strictBindCallApply\"><a href=\"#strictBindCallApply\" class=\"headerlink\" title=\"strictBindCallApply\"></a>strictBindCallApply</h2><p>在使用函数的call、bind、apply时，是否要检查传入参数的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> n1 = fn.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> n2 = fn.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，第二个call中的入参false和string类型不匹配而报错。</p>\n<h2 id=\"strictFunctionTypes\"><a href=\"#strictFunctionTypes\" class=\"headerlink\" title=\"strictFunctionTypes\"></a>strictFunctionTypes</h2><p>更精确的检查函数入参类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetUser</span> = <span class=\"function\">(<span class=\"params\">id: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">getUser</span>: <span class=\"title class_\">GetUser</span> = test;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码中，GetUser的入参类型<code>string | number</code>不能精确的分配给test的入参类型<code>string</code>。</p>\n<h2 id=\"strictNullChecks\"><a href=\"#strictNullChecks\" class=\"headerlink\" title=\"strictNullChecks\"></a>strictNullChecks</h2><p>是否校验<code>null</code>, <code>undefined</code>的属性访问？</p>\n<p>在以往的纯js项目中，容易忽略变量为undefined后仍然访问其属性的场景，比如在如下代码中，忽略了<code>a</code>为<code>undefined</code>的情况，导致运行时引发异常。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = arr1.<span class=\"title function_\">find</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>)</span><br></pre></td></tr></table></figure>\n\n<p>本选项开启后，在静态检查时就提示开发者，变量可能是<code>null</code>, <code>undefined</code>，不能访问到<code>name</code>属性。</p>\n<h2 id=\"useUnknownInCatchVariables\"><a href=\"#useUnknownInCatchVariables\" class=\"headerlink\" title=\"useUnknownInCatchVariables\"></a>useUnknownInCatchVariables</h2><p>有时候我们并不知道catch的err类型是什么，它的类型由try里的实际运行分支决定，而如果当成any处理，那么访问它的属性是危险的。当开启本项后，err的类型是unknown，必须先限定其类型再安全的访问其属性，如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Error</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Modules\"><a href=\"#compilerOptions-Modules\" class=\"headerlink\" title=\"compilerOptions - Modules\"></a>compilerOptions - Modules</h1><p>模块的处理策略。</p>\n<h2 id=\"allowArbitraryExtensions\"><a href=\"#allowArbitraryExtensions\" class=\"headerlink\" title=\"allowArbitraryExtensions\"></a>allowArbitraryExtensions</h2><p>ts默认支持了ts、js、cjs、jsx等模块的解析描述，通过<code>global.d.ts</code>的定义扩展，还可以支持css、jpg等模块的解析描述（你要自己保证webpack loader之类的解析器去真实支持加载这些模块）。而有时候，需要对特定模块文件（不管是否已全局定义过该模块的描述）做特别的描述，就可以开启该选项，并且创建一个<code>&#123;file basename&#125;.d.&#123;extension&#125;.ts</code>文件。</p>\n<p>如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// test.ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错：Cannot find module &#x27;./a.jpk&#x27; or its corresponding type declarations.ts(2307)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.jpk&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// doTest类型是any</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">doTest</span>());</span><br></pre></td></tr></table></figure>\n\n<p>开启该项，并增加<code>a.d.jpk.ts</code>文件：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.d.jpk.ts</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> <span class=\"attr\">jpk</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">doTest</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> jpk;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./a.jpk&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// doTest的类型：(property) doTest: () =&gt; void</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">doTest</span>());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allowImportingTsExtensions\"><a href=\"#allowImportingTsExtensions\" class=\"headerlink\" title=\"allowImportingTsExtensions\"></a>allowImportingTsExtensions</h2><p>是否允许在import path带入ts、tsx等后缀名。</p>\n<p>ts项目需要编译成js代码后执行，如果我们使用ts-node来执行项目，可以启用<code>noEmit</code>来禁止这个编译行为，并且在项目源码中直接引入<code>.ts</code>来引入正确的、完整的路径。</p>\n<p>举例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; wait &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/utils.ts&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"allowUmdGlobalAccess\"><a href=\"#allowUmdGlobalAccess\" class=\"headerlink\" title=\"allowUmdGlobalAccess\"></a>allowUmdGlobalAccess</h2><p>&#x2F;&#x2F; TODO<br>和umd的声明有关系，不过我还不明确它的意义。见：<a href=\"https://github.com/microsoft/TypeScript/pull/30776%E3%80%82\">https://github.com/microsoft/TypeScript/pull/30776。</a></p>\n<h2 id=\"baseUrl\"><a href=\"#baseUrl\" class=\"headerlink\" title=\"baseUrl\"></a>baseUrl</h2><p>为解析无路径修饰的模块，设置一个基础路径。 什么叫做无路径修饰？就是该模块不是一个绝对或相对路径，如<code>import a from &#39;@/hello/world&#39;</code>。</p>\n<p>如果配置了该项，那么ts从该项指定的目录中开始查找模块，优先级也高于<code>node_modules</code>。</p>\n<h2 id=\"module\"><a href=\"#module\" class=\"headerlink\" title=\"module\"></a>module</h2><p>模块打包的策略，也就是指编译后的模块加载代码是require、import之类的语法。推荐大家阅读：<a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html\">模块理论</a>。</p>\n<p>这个话题有点繁琐，也涉及到javascript的模块化amd、umd之类的历史，对于2023年这个时间点来说，关注下CommonJS、ESM即可，ESM还细分为ES2015、ES20XX等版本，他们的模块打包策略是一样的，区别是更高版本的ESM还支持了<code>dynamic imports</code>、<code>import.meta</code>和<code>top level await</code>之类的东西。</p>\n<p>补充的是，nodejs的模块打包策略也早就支持esm了，具体参照package.json的设置：<a href=\"https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext\">https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-nodenext</a></p>\n<h2 id=\"moduleResolution\"><a href=\"#moduleResolution\" class=\"headerlink\" title=\"moduleResolution\"></a>moduleResolution</h2><p>加载模块的策略，也就是指用什么策略去解析<code>import xxx from &#39;pathA&#39;</code>这里的<code>pathA</code>。<strong>注意区分和module的关系，module指的是项目的模块化是如何打包的，而moduleResolution指的是项目如何加载模块的</strong>。截至2023支持如下策略：</p>\n<ul>\n<li>node16&#x2F;nodenext，对于Node12+版本，本策略可自由根据import&#x2F;require选择合适的算法去加载模块。</li>\n<li>node10，对于Node12之前的版本，本策略只支持require算法加载模块。<strong>基本不用关心了</strong></li>\n<li>bundler，和node16一样，但不要求模块有后缀名。</li>\n<li>classic，早期的策略，不用管了。</li>\n</ul>\n<p><strong>这东西还要和module搭配使用，并且！并且！和package.json还有扯不清的关系。强烈建议阅读上文提到的<a href=\"https://www.typescriptlang.org/docs/handbook/modules/theory.html\">模块理论</a></strong></p>\n<p>另外，由于自己对这块的理解也不足深，还参考了这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/621795173%E3%80%82\">https://zhuanlan.zhihu.com/p/621795173。</a></p>\n<h2 id=\"moduleSuffixes\"><a href=\"#moduleSuffixes\" class=\"headerlink\" title=\"moduleSuffixes\"></a>moduleSuffixes</h2><p>模块搜索时的文件扩展名补充，比如以下配置项：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleSuffixes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.ios&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.native&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> foo <span class=\"keyword\">from</span> <span class=\"string\">&quot;./foo&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>TypeScript 会按顺序寻找<code>./foo.ios.ts</code>、<code>./foo.native.ts</code>、<code>./foo.ts</code>。</p>\n<h2 id=\"paths\"><a href=\"#paths\" class=\"headerlink\" title=\"paths\"></a>paths</h2><p>在加载模块路径时，加入一个别名匹配。可以理解为webpack的alias。</p>\n<h2 id=\"resolveJsonModule\"><a href=\"#resolveJsonModule\" class=\"headerlink\" title=\"resolveJsonModule\"></a>resolveJsonModule</h2><p>允许加载json模块（文件）。</p>\n<h2 id=\"resolvePackageJsonExports\"><a href=\"#resolvePackageJsonExports\" class=\"headerlink\" title=\"resolvePackageJsonExports\"></a>resolvePackageJsonExports</h2><p>引用<code>node_modules</code>包时，强制遵循包package.json的exports字段的定义。还是那句话，阅读下模块理论那篇文章，不然很难理解前面这句话的信息量。</p>\n<h2 id=\"resolvePackageJsonImports\"><a href=\"#resolvePackageJsonImports\" class=\"headerlink\" title=\"resolvePackageJsonImports\"></a>resolvePackageJsonImports</h2><p>强制typescript使用package.json中imports字段的定义去加载<code>#</code>符号开头的模块路径。例：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"string\">&quot;imports&quot;</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">&quot;#test/*&quot;</span>: <span class=\"string\">&quot;./src/test/*&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/test/1.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/b.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;#test/1&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==a&#x27;</span>, a);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rootDir\"><a href=\"#rootDir\" class=\"headerlink\" title=\"rootDir\"></a>rootDir</h2><p>指定项目的根目录，默认值可以理解为所有ts文件目录的最大集。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyProj</span><br><span class=\"line\">├── tsconfig.json</span><br><span class=\"line\">├── core</span><br><span class=\"line\">│   ├── a.ts</span><br><span class=\"line\">│   ├── b.ts</span><br><span class=\"line\">│   ├── sub</span><br><span class=\"line\">│   │   ├── c.ts</span><br><span class=\"line\">├── types.d.ts</span><br></pre></td></tr></table></figure>\n\n<p>如上的项目，rootDir的推断值是”core”。但是你可以手工指定为<code>tsconfig.json</code>的相对目录”，比如.”。</p>\n<p>另外，如果设置了<code>composite</code>，<code>rootDir</code>的默认值就是<code>tsconfig.json</code>文件的目录。</p>\n<h2 id=\"rootDirs\"><a href=\"#rootDirs\" class=\"headerlink\" title=\"rootDirs\"></a>rootDirs</h2><p>这个属性有点拽，它可以将多个目录虚拟成一个目录。这样在<code>import</code>的时候，就当成同一个目录就行啦。</p>\n<h2 id=\"typeRoots\"><a href=\"#typeRoots\" class=\"headerlink\" title=\"typeRoots\"></a>typeRoots</h2><p>类型定义文件的目录，默认所有@types目录都会被包含，包括node_modules下的@types目录。<br>如果指定了typeRoots，那么@types目录的相关规则会被忽略。</p>\n<h2 id=\"types\"><a href=\"#types\" class=\"headerlink\" title=\"types\"></a>types</h2><p>类型定义文件的具体目录，规则和<code>typeRoots</code>一样，不同点是<code>types</code>只指定具体目录，而非<code>*</code>这种匹配型目录。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Emit\"><a href=\"#compilerOptions-Emit\" class=\"headerlink\" title=\"compilerOptions - Emit\"></a>compilerOptions - Emit</h1><p>编译策略。</p>\n<h2 id=\"outDir\"><a href=\"#outDir\" class=\"headerlink\" title=\"outDir\"></a>outDir</h2><p>编译文件放置的目录，默认和源码放同一个目录。</p>\n<h2 id=\"noEmit\"><a href=\"#noEmit\" class=\"headerlink\" title=\"noEmit\"></a>noEmit</h2><p>不要编译ts。</p>\n<p>项目中一般使用babel去编译，typescript仅用来做静态检查，所以设置noEmit就可以不生成js、sourcemap、declaration文件了。</p>\n<h2 id=\"noEmitOnError\"><a href=\"#noEmitOnError\" class=\"headerlink\" title=\"noEmitOnError\"></a>noEmitOnError</h2><p>顾名思义，在检查到错误的时候，不要继续编译了。</p>\n<h2 id=\"declaration-x2F-emitDeclarationOnly-x2F-declarationDir\"><a href=\"#declaration-x2F-emitDeclarationOnly-x2F-declarationDir\" class=\"headerlink\" title=\"declaration &#x2F; emitDeclarationOnly &#x2F; declarationDir\"></a>declaration &#x2F; emitDeclarationOnly &#x2F; declarationDir</h2><p>生成类型描述文件。</p>\n<p>这个是typescript最重要的几个特性之一了，为<code>.ts</code>文件生成类型定义文件<code>.d.ts</code>。如果不想同时生成<code>.js</code>文件，则使用<code>emitDeclarationOnly</code>。</p>\n<p>同时，可以使用<code>declarationDir</code>指定类型定义文件的生成目录。</p>\n<h2 id=\"declarationMap\"><a href=\"#declarationMap\" class=\"headerlink\" title=\"declarationMap\"></a>declarationMap</h2><p>给<code>.d.ts</code>文件增加一个map标识到<code>.ts</code>源文件，类似sourceMap。</p>\n<h2 id=\"sourceMap-x2F-inlineSourceMap-x2F-inlineSources-x2F-mapRoot-x2F-sourceRoot\"><a href=\"#sourceMap-x2F-inlineSourceMap-x2F-inlineSources-x2F-mapRoot-x2F-sourceRoot\" class=\"headerlink\" title=\"sourceMap &#x2F; inlineSourceMap &#x2F; inlineSources &#x2F; mapRoot &#x2F; sourceRoot\"></a>sourceMap &#x2F; inlineSourceMap &#x2F; inlineSources &#x2F; mapRoot &#x2F; sourceRoot</h2><p>typescript也是支持souce map的，这里就不解释sourcemap是什么了。它的相关配置项有：</p>\n<p>sourceMap，生成sourcemap文件。<br>inlineSourceMap，不生成sourcemap文件，而是直接把source内容写在.js文件中。<br>inlineSources，同inlineSourceMap。<br>mapRoot，指定sourceMap文件的路径，比如部署到网络中，可以指定为”<a href=\"http://xxxx.com\"./\">http://xxxx.com\"。</a><br>sourceRoot，指定source文件的路径，同mapRoot。</p>\n<h2 id=\"downlevelIteration\"><a href=\"#downlevelIteration\" class=\"headerlink\" title=\"downlevelIteration\"></a>downlevelIteration</h2><p>对迭代器的降级解析。</p>\n<p>在es6中增加了for&#x2F;of，spread等迭代特性，typescript在编译成es5的时候，要使用何种语法。文档中有个字符遍历的例子说明开启与否的迭代影响，这对业务计算结果是有影响的。</p>\n<p>不过项目中使用了babel之类的编译器，就不用担心这些影响了。</p>\n<h2 id=\"importHelpers\"><a href=\"#importHelpers\" class=\"headerlink\" title=\"importHelpers\"></a>importHelpers</h2><p>引入降级解析的包。</p>\n<p>将es6的某些特新编译成es5，如迭代器、异步语法等，会将模块中每个相应的代码都编译成降级代码，使得类似代码重复。如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __read = (<span class=\"variable language_\">this</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">__read</span>) || <span class=\"keyword\">function</span> (<span class=\"params\">o, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; o[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m) <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = m.<span class=\"title function_\">call</span>(o), r, ar = [], e;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((n === <span class=\"built_in\">void</span> <span class=\"number\">0</span> || n-- &gt; <span class=\"number\">0</span>) &amp;&amp; !(r = i.<span class=\"title function_\">next</span>()).<span class=\"property\">done</span>) ar.<span class=\"title function_\">push</span>(r.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (error) &#123; e = &#123; <span class=\"attr\">error</span>: error &#125;; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r &amp;&amp; !r.<span class=\"property\">done</span> &amp;&amp; (m = i[<span class=\"string\">&quot;return&quot;</span>])) m.<span class=\"title function_\">call</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123; <span class=\"keyword\">if</span> (e) <span class=\"keyword\">throw</span> e.<span class=\"property\">error</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ar;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> __spreadArray = (<span class=\"variable language_\">this</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">__spreadArray</span>) || <span class=\"keyword\">function</span> (<span class=\"params\">to, <span class=\"keyword\">from</span>, pack</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pack || <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = <span class=\"keyword\">from</span>.<span class=\"property\">length</span>, ar; i &lt; l; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ar || !(i <span class=\"keyword\">in</span> <span class=\"keyword\">from</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ar) ar = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">from</span>, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            ar[i] = <span class=\"keyword\">from</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> to.<span class=\"title function_\">concat</span>(ar || <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">from</span>));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr2 = <span class=\"title function_\">__spreadArray</span>([<span class=\"number\">1</span>], <span class=\"title function_\">__read</span>(arr), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果同时开启了<code>downlevelIteration</code>和<code>importHelpers</code>，并且安装了<code>tslib</code>包，那么代码会编译成类似这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; __read, __spreadArray &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;tslib&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr2 = <span class=\"title function_\">__spreadArray</span>([<span class=\"number\">1</span>], <span class=\"title function_\">__read</span>(arr), <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"noEmitHelpers\"><a href=\"#noEmitHelpers\" class=\"headerlink\" title=\"noEmitHelpers\"></a>noEmitHelpers</h2><p>typescript处理迭代器、异步等的降级策略是生成一堆降级代码，也可以使用”importHelpers”和”tslib”来提取公共代码。但通过这个配置，可以自定义降级代码了。具体参照文档。</p>\n<h2 id=\"preserveConstEnums\"><a href=\"#preserveConstEnums\" class=\"headerlink\" title=\"preserveConstEnums\"></a>preserveConstEnums</h2><p>是否在编辑结果中移除<code>const enum</code>的定义。因为javascript没有enum概念，typescript会将enum的引用编译成具体的值。如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Album</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">JimmyEatWorldFutures</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">TubRingZooHypothesis</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DogFashionDiscoAdultery</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"title class_\">Album</span>.<span class=\"property\">JimmyEatWorldFutures</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"title class_\">Album</span>.<span class=\"property\">JimmyEatWorldFutures</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译结果如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果开启此项，则编译结果中会描述出该enum的结构。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Album</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Album</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;JimmyEatWorldFutures&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;JimmyEatWorldFutures&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;TubRingZooHypothesis&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;TubRingZooHypothesis&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Album</span>[<span class=\"title class_\">Album</span>[<span class=\"string\">&quot;DogFashionDiscoAdultery&quot;</span>] = <span class=\"number\">3</span>] = <span class=\"string\">&quot;DogFashionDiscoAdultery&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Album</span> || (<span class=\"title class_\">Album</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">const</span> selectedAlbum = <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (selectedAlbum === <span class=\"number\">1</span> <span class=\"comment\">/* Album.JimmyEatWorldFutures */</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;That is a great choice.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"preserveValueImports\"><a href=\"#preserveValueImports\" class=\"headerlink\" title=\"preserveValueImports\"></a>preserveValueImports</h2><p>通常，打包器会将未使用的”import”移除掉，但开启了该特性后，会在编译中保留未使用的”import”。例如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Animal</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./animal.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;console.log(new Animal().isDangerous())&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"removeComments\"><a href=\"#removeComments\" class=\"headerlink\" title=\"removeComments\"></a>removeComments</h2><p>移除代码中的注释。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-JavaScript-Support\"><a href=\"#compilerOptions-JavaScript-Support\" class=\"headerlink\" title=\"compilerOptions - JavaScript Support\"></a>compilerOptions - JavaScript Support</h1><p>对javascript文件的支持</p>\n<h2 id=\"allowJs\"><a href=\"#allowJs\" class=\"headerlink\" title=\"allowJs\"></a>allowJs</h2><p>允许<code>.ts</code>文件引用<code>.js</code>文件，这常用在javascript项目升级为typescript的过程中。</p>\n<h2 id=\"checkJs\"><a href=\"#checkJs\" class=\"headerlink\" title=\"checkJs\"></a>checkJs</h2><p>是否开启对<code>.js</code>文件的错误检查。</p>\n<h2 id=\"maxNodeModuleJsDepth\"><a href=\"#maxNodeModuleJsDepth\" class=\"headerlink\" title=\"maxNodeModuleJsDepth\"></a>maxNodeModuleJsDepth</h2><p>为<code>.js</code>文件寻找类型定义文件时，允许的最大依赖深度。</p>\n<p>正常情况下，我们会在<code>.js</code>文件的同级补写<code>.d.ts</code>文件，tsc会很快找到类型定义。但有时候确实要扩大搜索范围去找部分<code>.js</code>文件的类型定义文件。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Interop-Constraints\"><a href=\"#compilerOptions-Interop-Constraints\" class=\"headerlink\" title=\"compilerOptions - Interop Constraints\"></a>compilerOptions - Interop Constraints</h1><p>(模块)互相操作的约束</p>\n<h2 id=\"allowSyntheticDefaultImports\"><a href=\"#allowSyntheticDefaultImports\" class=\"headerlink\" title=\"allowSyntheticDefaultImports\"></a>allowSyntheticDefaultImports</h2><p>允许合成<code>default</code>。</p>\n<p>如果一个模块A没有<code>export default</code>，那么另一个模块B在<code>import defaultA from &#39;./a&#39;</code>的时候，会抛出错误说A中没有default。</p>\n<p>有一个做法是<code>import * as defaultA from &#39;./a&#39;</code>曲线救国，但开启这个配置项后，可以直接使用<code>import defaultA from &#39;./a&#39;</code>这样的语法了。</p>\n<h2 id=\"esModuleInterop\"><a href=\"#esModuleInterop\" class=\"headerlink\" title=\"esModuleInterop\"></a>esModuleInterop</h2><p>esm在使用<code>import default from &#39;xxx&#39;</code>方式导入cjs的时候会抛出一个错误，因为cjs模块中没有default。开启此选项后，typescript会使用一些helpers去兼容cjs的default问题。</p>\n<h2 id=\"forceConsistentCasingInFileNames\"><a href=\"#forceConsistentCasingInFileNames\" class=\"headerlink\" title=\"forceConsistentCasingInFileNames\"></a>forceConsistentCasingInFileNames</h2><p>强制引用的模块文件名，和磁盘中的文件名保持一致的大小写。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Language-and-Environment\"><a href=\"#compilerOptions-Language-and-Environment\" class=\"headerlink\" title=\"compilerOptions - Language and Environment\"></a>compilerOptions - Language and Environment</h1><p>和语言、环境有关的配置项。</p>\n<h2 id=\"jsx\"><a href=\"#jsx\" class=\"headerlink\" title=\"jsx\"></a>jsx</h2><p>如何解析<code>.tsx</code>文件中jsx语法？在2023年，react17+后，用<code>react-jsx</code>就行了。</p>\n<h2 id=\"lib\"><a href=\"#lib\" class=\"headerlink\" title=\"lib\"></a>lib</h2><p>在项目中使用的api类型定义集合。</p>\n<p>ts是需要知道你用的每一个javascript方法、属性的定义的，所以它内置了一批定义（比如Math.abs方法）。但是呢，后面新增方法的定义，需要你手工指定包含，ts才能理解了，比如Array.include方法，你就要包含ES2016。但好在你不需要记住这些，因为当你指定<code>target</code>字段时，lib会被默认设置成对应的值的。</p>\n<p>另外，大部分情况下，我们要访问一些和特定环境有关的特性，比如浏览器里的Dom特性，那么这儿额外引入<code>DOM</code>定义就行了。</p>\n<h2 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h2><p>项目编译的目标javascript版本。</p>\n<p>也就是你的目标客户端支持的最低javascript版本。注意它会影响默认的<code>lib</code>配置项。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Compiler-Diagnostics\"><a href=\"#compilerOptions-Compiler-Diagnostics\" class=\"headerlink\" title=\"compilerOptions - Compiler Diagnostics\"></a>compilerOptions - Compiler Diagnostics</h1><p>编译诊断配置项。</p>\n<h2 id=\"diagnostics-x2F-extendedDiagnostics\"><a href=\"#diagnostics-x2F-extendedDiagnostics\" class=\"headerlink\" title=\"diagnostics &#x2F; extendedDiagnostics\"></a>diagnostics &#x2F; extendedDiagnostics</h2><p>打印出编译的信息，比如多少文件、编译时间等。</p>\n<p>extendedDiagnostics包含了diagnostics给出的所有信息，所以用extendedDiagnostics就行了。这是一个开启extendedDiagnostics的编译信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Files:                         143</span><br><span class=\"line\">Lines of Library:            38663</span><br><span class=\"line\">Lines of Definitions:        82578</span><br><span class=\"line\">Symbols:                     73362</span><br><span class=\"line\">Types:                        1495</span><br><span class=\"line\">Parse time:                  0.50s</span><br><span class=\"line\">ResolveModule time:          0.03s</span><br><span class=\"line\">Total time:                  1.01s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explainFiles\"><a href=\"#explainFiles\" class=\"headerlink\" title=\"explainFiles\"></a>explainFiles</h2><p>打印出文件被编译的原因，也就是它们的引用链。</p>\n<h2 id=\"listEmittedFiles-x2F-listFiles\"><a href=\"#listEmittedFiles-x2F-listFiles\" class=\"headerlink\" title=\"listEmittedFiles &#x2F; listFiles\"></a>listEmittedFiles &#x2F; listFiles</h2><p>列出参与编译的文件。</p>\n<h2 id=\"traceResolution\"><a href=\"#traceResolution\" class=\"headerlink\" title=\"traceResolution\"></a>traceResolution</h2><p>打印每一个文件的编译流程。</p>\n<!--hexo-->\n\n<h1 id=\"compilerOptions-Completeness\"><a href=\"#compilerOptions-Completeness\" class=\"headerlink\" title=\"compilerOptions - Completeness\"></a>compilerOptions - Completeness</h1><p>完整性检测的配置项</p>\n<h2 id=\"skipLibCheck\"><a href=\"#skipLibCheck\" class=\"headerlink\" title=\"skipLibCheck\"></a>skipLibCheck</h2><p>跳过lib库的类型检测。</p>\n"},{"title":"TypeScript的小手段，最后更新2023/12月...","date":"2023-08-02T17:52:04.000Z","url":"typescript-means","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/22](https://github.com/taoliujun/blog/issues/22)\n\n<!--hexo\n---\nurl: typescript-means\ntags:\n  - typescript\n---\n-->\n\nTypeScript有一些小手段，评论区见。\n\n\n- [as断言的另外写法](#issuecomment-1663199481)\n- [as const](#issuecomment-1663206615)\n- [非null | undefined声明](#issuecomment-1663206898)\n- [const enum](#issuecomment-1838108783)\n- [@ts-expect-error](#issuecomment-1841954904)\n- [解构变量可标记为“不使用”](#issuecomment-1842016788)\n\n<!--hexo-->\n\n# as断言的另外写法\n\n```typescript\nconst myCanvas = <HTMLCanvasElement>document.getElementById(\"main_canvas\");\n```\n\n将断言类型写在前面的括号里，等同于：\n\n```typescript\nconst myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;\n```\n\n但是不能再`.tsx`中使用。\n<!--hexo-->\n\n# as const\n\n```typescript\nfunction test1(name: 'html' | 'css') {\n    console.log(name);\n}\n\nconst obj1 = { name: 'html' };\ntest1(obj1.name);\n```\n\n上面的例子有一个类型错误：`Argument of type 'string' is not assignable to parameter of type '\"html\" | \"css\"'.`，这是因为，ts对可读写的变量，推断出的类型是非字面类型。\n\n改下代码：\n\n```typescript\nconst obj1 = { name: 'html' } as const;\n```\n\n`as const`是断言成该变量的字面类型，关于`const`的字面类型断言解释如下。\n\n```typescript\nlet a = '1';\nconst b = '2';\n```\n\nts对`a`的推断是`string`，对`b`的推断是`'2'`。在ts的类型推断的设计中，它总是尽可能的推断出更广的类型，但是对于`readOnly variable`，因为不可变，它的更广的类型就是字面类型。\n\n得益于 https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481 ，还可以写成`let a = <const>'1';` \n<!--hexo-->\n\n# 非null | undefined声明\n\n有时候虽然声明一个变量类型是`null`，但在某个逻辑中它不可能是`null`，可以使用`!`来表示它不是`null`。\n\n```typescript\nconst d1 = document.getElementById('test1');\n// 'd1' is possibly 'null'\nconsole.log(d1.getBoundingClientRect());\n// it is fine\nconsole.log(d1!.getBoundingClientRect());\n```\n<!--hexo-->\n\n# const enum\n\nts会将`enum`完整的编译出来，如下分别是ts源码和编译后的代码：\n\n```ts\n// 源码\nenum Sex {\n    Man,\n    Woman,\n}\nconst sex = Sex.Man;\n```\n\n```javascript\n// 编译结果\nvar Sex;\n(function (Sex) {\n    Sex[Sex[\"Man\"] = 0] = \"Man\";\n    Sex[Sex[\"Woman\"] = 1] = \"Woman\";\n})(Sex || (Sex = {}));\nconst sex = Sex.Man;\n```\n\n而很多时候，我们只是将`enum`当安全值来用，编译后只保留安全值就行了。加上`const`就可以：\n\n```typescript\n// 源码\nconst enum Sex {\n    Man,\n    Woman,\n}\nconst sex = Sex.Man;\n```\n\n```javascript\n// 编译结果\nconst sex = 0;\n```\n<!--hexo-->\n\n# @ts-expect-error\n\n在一些场景下，我们需要故意传一个错误类型的变量，比如在写单元测试的时候。如下：\n\n```ts\n// util.ts\nfunction test1(p1: number) {\n  // do\n}\n\n// __test__\ntest1('hello');\n```\n\n在如上的单元测试代码中，ts会反馈`'hello'`不是一个number，但这个类型错误正是我们期望的。那么就增加一个标记来处理它：\n\n```ts\n// __test__\n\n// @ts-expect-error\ntest1('hello');\n```\n\n并且，如果这行语句没有类型错误的话，该注释本身会被认为是一个错误，以及时提醒开发者。\n\n```ts\n// Unused '@ts-expect-error' directive.ts(2578)\n// @ts-expect-error\ntest1(123);\n```\n\n它和`ts-ignore`的区别在这：https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error\n<!--hexo-->\n\n# 解构变量可标记为“不使用”\n\n如下语句，ts会告诉你`first`未使用。\n\n```ts\n// 'first' is declared but its value is never read.ts(6133)\nconst [first, second] = [1, 2];\nconsole.log('==', second);\n```\n\n但在场景里，就不需要使用第一个变量，ts提供了一个写法标记来忽略检查未使用的解构变量，就是在变量前加`_`。\n\n```ts\nconst [_first, second] = [1, 2];\nconsole.log('==', second);\n```\n\n**补充：** 以上是ts4.2的特性，在更新的版本里，只要这样写就行了：`const [, second] = [1, 2]`。\n\n\n","source":"_posts/typescript-means.md","raw":"---\ntitle: \"TypeScript的小手段，最后更新2023/12月...\"\ndate: \"2023-08-03T01:52:04Z\"\ncategories:\n  - [TypeScript]\n\nurl: typescript-means\ntags:\n  - typescript\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/22](https://github.com/taoliujun/blog/issues/22)\n\n<!--hexo\n---\nurl: typescript-means\ntags:\n  - typescript\n---\n-->\n\nTypeScript有一些小手段，评论区见。\n\n\n- [as断言的另外写法](#issuecomment-1663199481)\n- [as const](#issuecomment-1663206615)\n- [非null | undefined声明](#issuecomment-1663206898)\n- [const enum](#issuecomment-1838108783)\n- [@ts-expect-error](#issuecomment-1841954904)\n- [解构变量可标记为“不使用”](#issuecomment-1842016788)\n\n<!--hexo-->\n\n# as断言的另外写法\n\n```typescript\nconst myCanvas = <HTMLCanvasElement>document.getElementById(\"main_canvas\");\n```\n\n将断言类型写在前面的括号里，等同于：\n\n```typescript\nconst myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;\n```\n\n但是不能再`.tsx`中使用。\n<!--hexo-->\n\n# as const\n\n```typescript\nfunction test1(name: 'html' | 'css') {\n    console.log(name);\n}\n\nconst obj1 = { name: 'html' };\ntest1(obj1.name);\n```\n\n上面的例子有一个类型错误：`Argument of type 'string' is not assignable to parameter of type '\"html\" | \"css\"'.`，这是因为，ts对可读写的变量，推断出的类型是非字面类型。\n\n改下代码：\n\n```typescript\nconst obj1 = { name: 'html' } as const;\n```\n\n`as const`是断言成该变量的字面类型，关于`const`的字面类型断言解释如下。\n\n```typescript\nlet a = '1';\nconst b = '2';\n```\n\nts对`a`的推断是`string`，对`b`的推断是`'2'`。在ts的类型推断的设计中，它总是尽可能的推断出更广的类型，但是对于`readOnly variable`，因为不可变，它的更广的类型就是字面类型。\n\n得益于 https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481 ，还可以写成`let a = <const>'1';` \n<!--hexo-->\n\n# 非null | undefined声明\n\n有时候虽然声明一个变量类型是`null`，但在某个逻辑中它不可能是`null`，可以使用`!`来表示它不是`null`。\n\n```typescript\nconst d1 = document.getElementById('test1');\n// 'd1' is possibly 'null'\nconsole.log(d1.getBoundingClientRect());\n// it is fine\nconsole.log(d1!.getBoundingClientRect());\n```\n<!--hexo-->\n\n# const enum\n\nts会将`enum`完整的编译出来，如下分别是ts源码和编译后的代码：\n\n```ts\n// 源码\nenum Sex {\n    Man,\n    Woman,\n}\nconst sex = Sex.Man;\n```\n\n```javascript\n// 编译结果\nvar Sex;\n(function (Sex) {\n    Sex[Sex[\"Man\"] = 0] = \"Man\";\n    Sex[Sex[\"Woman\"] = 1] = \"Woman\";\n})(Sex || (Sex = {}));\nconst sex = Sex.Man;\n```\n\n而很多时候，我们只是将`enum`当安全值来用，编译后只保留安全值就行了。加上`const`就可以：\n\n```typescript\n// 源码\nconst enum Sex {\n    Man,\n    Woman,\n}\nconst sex = Sex.Man;\n```\n\n```javascript\n// 编译结果\nconst sex = 0;\n```\n<!--hexo-->\n\n# @ts-expect-error\n\n在一些场景下，我们需要故意传一个错误类型的变量，比如在写单元测试的时候。如下：\n\n```ts\n// util.ts\nfunction test1(p1: number) {\n  // do\n}\n\n// __test__\ntest1('hello');\n```\n\n在如上的单元测试代码中，ts会反馈`'hello'`不是一个number，但这个类型错误正是我们期望的。那么就增加一个标记来处理它：\n\n```ts\n// __test__\n\n// @ts-expect-error\ntest1('hello');\n```\n\n并且，如果这行语句没有类型错误的话，该注释本身会被认为是一个错误，以及时提醒开发者。\n\n```ts\n// Unused '@ts-expect-error' directive.ts(2578)\n// @ts-expect-error\ntest1(123);\n```\n\n它和`ts-ignore`的区别在这：https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error\n<!--hexo-->\n\n# 解构变量可标记为“不使用”\n\n如下语句，ts会告诉你`first`未使用。\n\n```ts\n// 'first' is declared but its value is never read.ts(6133)\nconst [first, second] = [1, 2];\nconsole.log('==', second);\n```\n\n但在场景里，就不需要使用第一个变量，ts提供了一个写法标记来忽略检查未使用的解构变量，就是在变量前加`_`。\n\n```ts\nconst [_first, second] = [1, 2];\nconsole.log('==', second);\n```\n\n**补充：** 以上是ts4.2的特性，在更新的版本里，只要这样写就行了：`const [, second] = [1, 2]`。\n\n\n","slug":"typescript-means","published":1,"updated":"2024-01-03T09:22:47.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxkljy60005jgq9acu45xw0","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/22\">https://github.com/taoliujun/blog/issues/22</a></p>\n<!--hexo\n---\nurl: typescript-means\ntags:\n  - typescript\n---\n-->\n\n<p>TypeScript有一些小手段，评论区见。</p>\n<ul>\n<li><a href=\"#issuecomment-1663199481\">as断言的另外写法</a></li>\n<li><a href=\"#issuecomment-1663206615\">as const</a></li>\n<li><a href=\"#issuecomment-1663206898\">非null | undefined声明</a></li>\n<li><a href=\"#issuecomment-1838108783\">const enum</a></li>\n<li><a href=\"#issuecomment-1841954904\">@ts-expect-error</a></li>\n<li><a href=\"#issuecomment-1842016788\">解构变量可标记为“不使用”</a></li>\n</ul>\n<!--hexo-->\n\n<h1 id=\"as断言的另外写法\"><a href=\"#as断言的另外写法\" class=\"headerlink\" title=\"as断言的另外写法\"></a>as断言的另外写法</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCanvas = &lt;<span class=\"title class_\">HTMLCanvasElement</span>&gt;<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将断言类型写在前面的括号里，等同于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCanvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main_canvas&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLCanvasElement</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是不能再<code>.tsx</code>中使用。</p>\n<!--hexo-->\n\n<h1 id=\"as-const\"><a href=\"#as-const\" class=\"headerlink\" title=\"as const\"></a>as const</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\">name: <span class=\"string\">&#x27;html&#x27;</span> | <span class=\"string\">&#x27;css&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;html&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">test1</span>(obj1.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子有一个类型错误：<code>Argument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;html&quot; | &quot;css&quot;&#39;.</code>，这是因为，ts对可读写的变量，推断出的类型是非字面类型。</p>\n<p>改下代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;html&#x27;</span> &#125; <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>as const</code>是断言成该变量的字面类型，关于<code>const</code>的字面类型断言解释如下。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>ts对<code>a</code>的推断是<code>string</code>，对<code>b</code>的推断是<code>&#39;2&#39;</code>。在ts的类型推断的设计中，它总是尽可能的推断出更广的类型，但是对于<code>readOnly variable</code>，因为不可变，它的更广的类型就是字面类型。</p>\n<p>得益于 <a href=\"https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481\">https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481</a> ，还可以写成<code>let a = &lt;const&gt;&#39;1&#39;;</code> </p>\n<!--hexo-->\n\n<h1 id=\"非null-undefined声明\"><a href=\"#非null-undefined声明\" class=\"headerlink\" title=\"非null | undefined声明\"></a>非null | undefined声明</h1><p>有时候虽然声明一个变量类型是<code>null</code>，但在某个逻辑中它不可能是<code>null</code>，可以使用<code>!</code>来表示它不是<code>null</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> d1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;test1&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#x27;d1&#x27; is possibly &#x27;null&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1.<span class=\"title function_\">getBoundingClientRect</span>());</span><br><span class=\"line\"><span class=\"comment\">// it is fine</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1!.<span class=\"title function_\">getBoundingClientRect</span>());</span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"const-enum\"><a href=\"#const-enum\" class=\"headerlink\" title=\"const enum\"></a>const enum</h1><p>ts会将<code>enum</code>完整的编译出来，如下分别是ts源码和编译后的代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Sex</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Man</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Woman</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Sex</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Sex</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Sex</span>[<span class=\"title class_\">Sex</span>[<span class=\"string\">&quot;Man&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;Man&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Sex</span>[<span class=\"title class_\">Sex</span>[<span class=\"string\">&quot;Woman&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;Woman&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Sex</span> || (<span class=\"title class_\">Sex</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<p>而很多时候，我们只是将<code>enum</code>当安全值来用，编译后只保留安全值就行了。加上<code>const</code>就可以：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Sex</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Man</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Woman</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译结果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"ts-expect-error\"><a href=\"#ts-expect-error\" class=\"headerlink\" title=\"@ts-expect-error\"></a>@ts-expect-error</h1><p>在一些场景下，我们需要故意传一个错误类型的变量，比如在写单元测试的时候。如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// util.ts</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\">p1: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __test__</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在如上的单元测试代码中，ts会反馈<code>&#39;hello&#39;</code>不是一个number，但这个类型错误正是我们期望的。那么就增加一个标记来处理它：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// __test__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>并且，如果这行语句没有类型错误的话，该注释本身会被认为是一个错误，以及时提醒开发者。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Unused &#x27;@ts-expect-error&#x27; directive.ts(2578)</span></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它和<code>ts-ignore</code>的区别在这：<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error\">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error</a></p>\n<!--hexo-->\n\n<h1 id=\"解构变量可标记为“不使用”\"><a href=\"#解构变量可标记为“不使用”\" class=\"headerlink\" title=\"解构变量可标记为“不使用”\"></a>解构变量可标记为“不使用”</h1><p>如下语句，ts会告诉你<code>first</code>未使用。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#x27;first&#x27; is declared but its value is never read.ts(6133)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==&#x27;</span>, second);</span><br></pre></td></tr></table></figure>\n\n<p>但在场景里，就不需要使用第一个变量，ts提供了一个写法标记来忽略检查未使用的解构变量，就是在变量前加<code>_</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [_first, second] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==&#x27;</span>, second);</span><br></pre></td></tr></table></figure>\n\n<p><strong>补充：</strong> 以上是ts4.2的特性，在更新的版本里，只要这样写就行了：<code>const [, second] = [1, 2]</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/22\">https://github.com/taoliujun/blog/issues/22</a></p>\n<!--hexo\n---\nurl: typescript-means\ntags:\n  - typescript\n---\n-->\n\n<p>TypeScript有一些小手段，评论区见。</p>\n<ul>\n<li><a href=\"#issuecomment-1663199481\">as断言的另外写法</a></li>\n<li><a href=\"#issuecomment-1663206615\">as const</a></li>\n<li><a href=\"#issuecomment-1663206898\">非null | undefined声明</a></li>\n<li><a href=\"#issuecomment-1838108783\">const enum</a></li>\n<li><a href=\"#issuecomment-1841954904\">@ts-expect-error</a></li>\n<li><a href=\"#issuecomment-1842016788\">解构变量可标记为“不使用”</a></li>\n</ul>\n<!--hexo-->\n\n<h1 id=\"as断言的另外写法\"><a href=\"#as断言的另外写法\" class=\"headerlink\" title=\"as断言的另外写法\"></a>as断言的另外写法</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCanvas = &lt;<span class=\"title class_\">HTMLCanvasElement</span>&gt;<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main_canvas&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将断言类型写在前面的括号里，等同于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myCanvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;main_canvas&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLCanvasElement</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是不能再<code>.tsx</code>中使用。</p>\n<!--hexo-->\n\n<h1 id=\"as-const\"><a href=\"#as-const\" class=\"headerlink\" title=\"as const\"></a>as const</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\">name: <span class=\"string\">&#x27;html&#x27;</span> | <span class=\"string\">&#x27;css&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;html&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">test1</span>(obj1.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子有一个类型错误：<code>Argument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;html&quot; | &quot;css&quot;&#39;.</code>，这是因为，ts对可读写的变量，推断出的类型是非字面类型。</p>\n<p>改下代码：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;html&#x27;</span> &#125; <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>as const</code>是断言成该变量的字面类型，关于<code>const</code>的字面类型断言解释如下。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"string\">&#x27;2&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>ts对<code>a</code>的推断是<code>string</code>，对<code>b</code>的推断是<code>&#39;2&#39;</code>。在ts的类型推断的设计中，它总是尽可能的推断出更广的类型，但是对于<code>readOnly variable</code>，因为不可变，它的更广的类型就是字面类型。</p>\n<p>得益于 <a href=\"https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481\">https://github.com/taoliujun/blog/issues/22#issuecomment-1663199481</a> ，还可以写成<code>let a = &lt;const&gt;&#39;1&#39;;</code> </p>\n<!--hexo-->\n\n<h1 id=\"非null-undefined声明\"><a href=\"#非null-undefined声明\" class=\"headerlink\" title=\"非null | undefined声明\"></a>非null | undefined声明</h1><p>有时候虽然声明一个变量类型是<code>null</code>，但在某个逻辑中它不可能是<code>null</code>，可以使用<code>!</code>来表示它不是<code>null</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> d1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;test1&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// &#x27;d1&#x27; is possibly &#x27;null&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1.<span class=\"title function_\">getBoundingClientRect</span>());</span><br><span class=\"line\"><span class=\"comment\">// it is fine</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1!.<span class=\"title function_\">getBoundingClientRect</span>());</span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"const-enum\"><a href=\"#const-enum\" class=\"headerlink\" title=\"const enum\"></a>const enum</h1><p>ts会将<code>enum</code>完整的编译出来，如下分别是ts源码和编译后的代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Sex</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Man</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Woman</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Sex</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Sex</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Sex</span>[<span class=\"title class_\">Sex</span>[<span class=\"string\">&quot;Man&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;Man&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Sex</span>[<span class=\"title class_\">Sex</span>[<span class=\"string\">&quot;Woman&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;Woman&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Sex</span> || (<span class=\"title class_\">Sex</span> = &#123;&#125;));</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<p>而很多时候，我们只是将<code>enum</code>当安全值来用，编译后只保留安全值就行了。加上<code>const</code>就可以：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 源码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Sex</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Man</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Woman</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"title class_\">Sex</span>.<span class=\"property\">Man</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译结果</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sex = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<!--hexo-->\n\n<h1 id=\"ts-expect-error\"><a href=\"#ts-expect-error\" class=\"headerlink\" title=\"@ts-expect-error\"></a>@ts-expect-error</h1><p>在一些场景下，我们需要故意传一个错误类型的变量，比如在写单元测试的时候。如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// util.ts</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test1</span>(<span class=\"params\">p1: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __test__</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在如上的单元测试代码中，ts会反馈<code>&#39;hello&#39;</code>不是一个number，但这个类型错误正是我们期望的。那么就增加一个标记来处理它：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// __test__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>并且，如果这行语句没有类型错误的话，该注释本身会被认为是一个错误，以及时提醒开发者。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Unused &#x27;@ts-expect-error&#x27; directive.ts(2578)</span></span><br><span class=\"line\"><span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\"><span class=\"title function_\">test1</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它和<code>ts-ignore</code>的区别在这：<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error\">https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html#ts-ignore-or-ts-expect-error</a></p>\n<!--hexo-->\n\n<h1 id=\"解构变量可标记为“不使用”\"><a href=\"#解构变量可标记为“不使用”\" class=\"headerlink\" title=\"解构变量可标记为“不使用”\"></a>解构变量可标记为“不使用”</h1><p>如下语句，ts会告诉你<code>first</code>未使用。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#x27;first&#x27; is declared but its value is never read.ts(6133)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, second] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==&#x27;</span>, second);</span><br></pre></td></tr></table></figure>\n\n<p>但在场景里，就不需要使用第一个变量，ts提供了一个写法标记来忽略检查未使用的解构变量，就是在变量前加<code>_</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [_first, second] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;==&#x27;</span>, second);</span><br></pre></td></tr></table></figure>\n\n<p><strong>补充：</strong> 以上是ts4.2的特性，在更新的版本里，只要这样写就行了：<code>const [, second] = [1, 2]</code>。</p>\n"},{"title":"整理ES6：Promise的忽略点和几个方法的区别","date":"2023-07-05T22:21:12.000Z","url":"es6-promise","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/2](https://github.com/taoliujun/blog/issues/2)\n\n<!--hexo\n---\nurl: es6-promise\ntags:\n  - es6\n  - javascript\n---\n-->\n\n**Promise**是业务开发中使用率最高的ES6方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。\n\n## 容易忽略的点\n\n* `catch`是`then`的语法糖，但是`catch`可以捕获`then`中的异常，而`then`的第二个回调函数不行。\n* 如果没有使用`catch`捕获错误，那么Promise的错误不会传递到外层，即使外层有`try...catch`也捕获不到。\n* 因为`catch`捕获了`rejected`且返回新的实例，所以在`all`等方法中，p1实现了`catch`方法，则p1的`rejected`不会触发p的`catch`。\n\n## 几个方法的区别\n\n| 方法 | resolved的前提 | rejected的前提 | 说明 |\n| --- | ------------- | ------------- | --- |\n| all | 全部resolved | 任一rejected | - |\n| race | 任一resolved | 任一rejected | 任一率先改变的状态，传递给p |\n| allSettled | 全部改变 | - | 状态全部改变，传递给p。格式为: <br /> `{status: 'fulfilled', value: value}` <br/> 或者 <br/> `{status: 'rejected', reason: reason}` |\n| any | 任一resolved | 全部rejected | 传递给`catch`的是一个`AggregateError`实例 |\n\n\n<!--hexo-->\n\n# AggregateError\n\nAggregateError封装了Error数组，它的结构是：\n\n> AggregateError(errors[, message])\n\n`AggregateError()`构造函数可以接受两个参数。\n\n* errors：数组，它的每个成员都是一个错误对象。该参数是必须的。\n* message：字符串，表示 AggregateError 抛出时的提示信息。该参数是可选的。\n\n","source":"_posts/es6-promise.md","raw":"---\ntitle: \"整理ES6：Promise的忽略点和几个方法的区别\"\ndate: \"2023-07-06T06:21:12Z\"\ncategories:\n  - [JavaScript]\n\nurl: es6-promise\ntags:\n  - es6\n  - javascript\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/2](https://github.com/taoliujun/blog/issues/2)\n\n<!--hexo\n---\nurl: es6-promise\ntags:\n  - es6\n  - javascript\n---\n-->\n\n**Promise**是业务开发中使用率最高的ES6方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。\n\n## 容易忽略的点\n\n* `catch`是`then`的语法糖，但是`catch`可以捕获`then`中的异常，而`then`的第二个回调函数不行。\n* 如果没有使用`catch`捕获错误，那么Promise的错误不会传递到外层，即使外层有`try...catch`也捕获不到。\n* 因为`catch`捕获了`rejected`且返回新的实例，所以在`all`等方法中，p1实现了`catch`方法，则p1的`rejected`不会触发p的`catch`。\n\n## 几个方法的区别\n\n| 方法 | resolved的前提 | rejected的前提 | 说明 |\n| --- | ------------- | ------------- | --- |\n| all | 全部resolved | 任一rejected | - |\n| race | 任一resolved | 任一rejected | 任一率先改变的状态，传递给p |\n| allSettled | 全部改变 | - | 状态全部改变，传递给p。格式为: <br /> `{status: 'fulfilled', value: value}` <br/> 或者 <br/> `{status: 'rejected', reason: reason}` |\n| any | 任一resolved | 全部rejected | 传递给`catch`的是一个`AggregateError`实例 |\n\n\n<!--hexo-->\n\n# AggregateError\n\nAggregateError封装了Error数组，它的结构是：\n\n> AggregateError(errors[, message])\n\n`AggregateError()`构造函数可以接受两个参数。\n\n* errors：数组，它的每个成员都是一个错误对象。该参数是必须的。\n* message：字符串，表示 AggregateError 抛出时的提示信息。该参数是可选的。\n\n","slug":"es6-promise","published":1,"updated":"2024-01-03T09:39:31.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxl72ze0000lfoyclk23juo","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/2\">https://github.com/taoliujun/blog/issues/2</a></p>\n<!--hexo\n---\nurl: es6-promise\ntags:\n  - es6\n  - javascript\n---\n-->\n\n<p><strong>Promise</strong>是业务开发中使用率最高的ES6方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。</p>\n<h2 id=\"容易忽略的点\"><a href=\"#容易忽略的点\" class=\"headerlink\" title=\"容易忽略的点\"></a>容易忽略的点</h2><ul>\n<li><code>catch</code>是<code>then</code>的语法糖，但是<code>catch</code>可以捕获<code>then</code>中的异常，而<code>then</code>的第二个回调函数不行。</li>\n<li>如果没有使用<code>catch</code>捕获错误，那么Promise的错误不会传递到外层，即使外层有<code>try...catch</code>也捕获不到。</li>\n<li>因为<code>catch</code>捕获了<code>rejected</code>且返回新的实例，所以在<code>all</code>等方法中，p1实现了<code>catch</code>方法，则p1的<code>rejected</code>不会触发p的<code>catch</code>。</li>\n</ul>\n<h2 id=\"几个方法的区别\"><a href=\"#几个方法的区别\" class=\"headerlink\" title=\"几个方法的区别\"></a>几个方法的区别</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>resolved的前提</th>\n<th>rejected的前提</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>全部resolved</td>\n<td>任一rejected</td>\n<td>-</td>\n</tr>\n<tr>\n<td>race</td>\n<td>任一resolved</td>\n<td>任一rejected</td>\n<td>任一率先改变的状态，传递给p</td>\n</tr>\n<tr>\n<td>allSettled</td>\n<td>全部改变</td>\n<td>-</td>\n<td>状态全部改变，传递给p。格式为: <br /> <code>&#123;status: &#39;fulfilled&#39;, value: value&#125;</code> <br/> 或者 <br/> <code>&#123;status: &#39;rejected&#39;, reason: reason&#125;</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td>任一resolved</td>\n<td>全部rejected</td>\n<td>传递给<code>catch</code>的是一个<code>AggregateError</code>实例</td>\n</tr>\n</tbody></table>\n<!--hexo-->\n\n<h1 id=\"AggregateError\"><a href=\"#AggregateError\" class=\"headerlink\" title=\"AggregateError\"></a>AggregateError</h1><p>AggregateError封装了Error数组，它的结构是：</p>\n<blockquote>\n<p>AggregateError(errors[, message])</p>\n</blockquote>\n<p><code>AggregateError()</code>构造函数可以接受两个参数。</p>\n<ul>\n<li>errors：数组，它的每个成员都是一个错误对象。该参数是必须的。</li>\n<li>message：字符串，表示 AggregateError 抛出时的提示信息。该参数是可选的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/2\">https://github.com/taoliujun/blog/issues/2</a></p>\n<!--hexo\n---\nurl: es6-promise\ntags:\n  - es6\n  - javascript\n---\n-->\n\n<p><strong>Promise</strong>是业务开发中使用率最高的ES6方法了，但日常容易忽略几个点，以及记不得它几个方法的区别，现记录。</p>\n<h2 id=\"容易忽略的点\"><a href=\"#容易忽略的点\" class=\"headerlink\" title=\"容易忽略的点\"></a>容易忽略的点</h2><ul>\n<li><code>catch</code>是<code>then</code>的语法糖，但是<code>catch</code>可以捕获<code>then</code>中的异常，而<code>then</code>的第二个回调函数不行。</li>\n<li>如果没有使用<code>catch</code>捕获错误，那么Promise的错误不会传递到外层，即使外层有<code>try...catch</code>也捕获不到。</li>\n<li>因为<code>catch</code>捕获了<code>rejected</code>且返回新的实例，所以在<code>all</code>等方法中，p1实现了<code>catch</code>方法，则p1的<code>rejected</code>不会触发p的<code>catch</code>。</li>\n</ul>\n<h2 id=\"几个方法的区别\"><a href=\"#几个方法的区别\" class=\"headerlink\" title=\"几个方法的区别\"></a>几个方法的区别</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>resolved的前提</th>\n<th>rejected的前提</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all</td>\n<td>全部resolved</td>\n<td>任一rejected</td>\n<td>-</td>\n</tr>\n<tr>\n<td>race</td>\n<td>任一resolved</td>\n<td>任一rejected</td>\n<td>任一率先改变的状态，传递给p</td>\n</tr>\n<tr>\n<td>allSettled</td>\n<td>全部改变</td>\n<td>-</td>\n<td>状态全部改变，传递给p。格式为: <br /> <code>&#123;status: &#39;fulfilled&#39;, value: value&#125;</code> <br/> 或者 <br/> <code>&#123;status: &#39;rejected&#39;, reason: reason&#125;</code></td>\n</tr>\n<tr>\n<td>any</td>\n<td>任一resolved</td>\n<td>全部rejected</td>\n<td>传递给<code>catch</code>的是一个<code>AggregateError</code>实例</td>\n</tr>\n</tbody></table>\n<!--hexo-->\n\n<h1 id=\"AggregateError\"><a href=\"#AggregateError\" class=\"headerlink\" title=\"AggregateError\"></a>AggregateError</h1><p>AggregateError封装了Error数组，它的结构是：</p>\n<blockquote>\n<p>AggregateError(errors[, message])</p>\n</blockquote>\n<p><code>AggregateError()</code>构造函数可以接受两个参数。</p>\n<ul>\n<li>errors：数组，它的每个成员都是一个错误对象。该参数是必须的。</li>\n<li>message：字符串，表示 AggregateError 抛出时的提示信息。该参数是可选的。</li>\n</ul>\n"},{"title":"整理ES6：ES6是什么？","date":"2023-07-05T22:18:38.000Z","url":"what-is-es6","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/1](https://github.com/taoliujun/blog/issues/1)\n\n<!--hexo\n---\nurl: what-is-es6\ntags:\n  - es6\n  - javascript\n---\n-->\n\n## 注\n\n本系列文章不是技术教程，只是个人的知识点整理。\n\n## 第一段废话\n\n就在昨晚，我突然冒出了奇怪的心思想要对10年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。\n\n## 为什么写ES6？\n\n我从IE6时代开始写JavaScript，到2016年左右迎接真正的成年JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像IE6一样一去不复返。如上所说，总有一些技术如TypeScript那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而ES6正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。\n\n如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于polyfill(s)、浏览器厂商、github开源等好多组织的相辅相成，ES6才成为了现在这样。\n\n## ES6到底是什么？\n\n大家或多或少看了ES6的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对ES6做以下的介绍。\n\nJavaScript在上世纪90年代被提交给标准化组织ECMA，紧接着制定出第一个该语言标准并命名为ECMAScript 1.0，ES便是其简称。JavaScript是该标准的实现之一，被广泛使用，我们可以简单的认为JavaScript就是ECMAScript。\n\n之后该标准不断推出新版本一直到5.1，当要制定6.0标准的时候，发现要加入的语法功能太多了，要不断地推出6.1、6.2，难以规划和命名。于是ECMA组织改变了策略，定于每年6月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是ES 6.0摇身变成ES2015，之后的年份一直推出ES2016、ES2017等。\n\n**虽然从历史上讲，ES6单指ES2015；但大众更容易理解的是，ES6泛指ES2015及以后的新语法功能。**\n\n这些年的互联网文章在特别的介绍ES6的语法功能，用于与ES5进行对比，或许再过一些年，人们不再提起ES6了，那时候的文章会统一讲整个ECMAScript，再有每年6月份单独的讲解ES20xx了吧。\n\n## ES6的相关技术\n\n### polyfill、babel是什么？\n\nES2015之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用babel将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用polyfill用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护polyfill列表了，babel中使用core-js库根据browserrc配置项智能的去引入polyfill了。\n\n### 和TypeScript的关系？\n\nTypeScript是对ES的类型补充，它存在一个配置项，来表明在ts检查、编译过程中去支持什么标准的ES。\n\n## 最后，欢迎大家在此讨论\n\n积极汲取大家的讨论，补充我的文章（偷笑）。\n\n\n<!--hexo-->\n\n# core-js\n\n虽然大部分开发者不直接使用core-js，甚至不知道它。我们使用webpack将ES6编译成老语法，实际上它在使用babel，而babel在使用core-js。\n\n它是一个伟大的库，其原理是维护一系列polyfill进行版本、浏览器支持度、草案阶段等维度的分类。你既可以直接引用具体的polyfill，也可以根据草案阶段引入，也可以根据浏览器支持度引入。\n\n它的作者是一个非常有趣，实诚的人。\n\n","source":"_posts/what-is-es6.md","raw":"---\ntitle: \"整理ES6：ES6是什么？\"\ndate: \"2023-07-06T06:18:38Z\"\ncategories:\n  - [JavaScript]\n\nurl: what-is-es6\ntags:\n  - es6\n  - javascript\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/1](https://github.com/taoliujun/blog/issues/1)\n\n<!--hexo\n---\nurl: what-is-es6\ntags:\n  - es6\n  - javascript\n---\n-->\n\n## 注\n\n本系列文章不是技术教程，只是个人的知识点整理。\n\n## 第一段废话\n\n就在昨晚，我突然冒出了奇怪的心思想要对10年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。\n\n## 为什么写ES6？\n\n我从IE6时代开始写JavaScript，到2016年左右迎接真正的成年JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像IE6一样一去不复返。如上所说，总有一些技术如TypeScript那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而ES6正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。\n\n如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于polyfill(s)、浏览器厂商、github开源等好多组织的相辅相成，ES6才成为了现在这样。\n\n## ES6到底是什么？\n\n大家或多或少看了ES6的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对ES6做以下的介绍。\n\nJavaScript在上世纪90年代被提交给标准化组织ECMA，紧接着制定出第一个该语言标准并命名为ECMAScript 1.0，ES便是其简称。JavaScript是该标准的实现之一，被广泛使用，我们可以简单的认为JavaScript就是ECMAScript。\n\n之后该标准不断推出新版本一直到5.1，当要制定6.0标准的时候，发现要加入的语法功能太多了，要不断地推出6.1、6.2，难以规划和命名。于是ECMA组织改变了策略，定于每年6月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是ES 6.0摇身变成ES2015，之后的年份一直推出ES2016、ES2017等。\n\n**虽然从历史上讲，ES6单指ES2015；但大众更容易理解的是，ES6泛指ES2015及以后的新语法功能。**\n\n这些年的互联网文章在特别的介绍ES6的语法功能，用于与ES5进行对比，或许再过一些年，人们不再提起ES6了，那时候的文章会统一讲整个ECMAScript，再有每年6月份单独的讲解ES20xx了吧。\n\n## ES6的相关技术\n\n### polyfill、babel是什么？\n\nES2015之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用babel将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用polyfill用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护polyfill列表了，babel中使用core-js库根据browserrc配置项智能的去引入polyfill了。\n\n### 和TypeScript的关系？\n\nTypeScript是对ES的类型补充，它存在一个配置项，来表明在ts检查、编译过程中去支持什么标准的ES。\n\n## 最后，欢迎大家在此讨论\n\n积极汲取大家的讨论，补充我的文章（偷笑）。\n\n\n<!--hexo-->\n\n# core-js\n\n虽然大部分开发者不直接使用core-js，甚至不知道它。我们使用webpack将ES6编译成老语法，实际上它在使用babel，而babel在使用core-js。\n\n它是一个伟大的库，其原理是维护一系列polyfill进行版本、浏览器支持度、草案阶段等维度的分类。你既可以直接引用具体的polyfill，也可以根据草案阶段引入，也可以根据浏览器支持度引入。\n\n它的作者是一个非常有趣，实诚的人。\n\n","slug":"what-is-es6","published":1,"updated":"2024-01-03T09:39:31.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxl72zk0001lfoy0bb1g26h","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/1\">https://github.com/taoliujun/blog/issues/1</a></p>\n<!--hexo\n---\nurl: what-is-es6\ntags:\n  - es6\n  - javascript\n---\n-->\n\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p>本系列文章不是技术教程，只是个人的知识点整理。</p>\n<h2 id=\"第一段废话\"><a href=\"#第一段废话\" class=\"headerlink\" title=\"第一段废话\"></a>第一段废话</h2><p>就在昨晚，我突然冒出了奇怪的心思想要对10年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。</p>\n<h2 id=\"为什么写ES6？\"><a href=\"#为什么写ES6？\" class=\"headerlink\" title=\"为什么写ES6？\"></a>为什么写ES6？</h2><p>我从IE6时代开始写JavaScript，到2016年左右迎接真正的成年JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像IE6一样一去不复返。如上所说，总有一些技术如TypeScript那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而ES6正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。</p>\n<p>如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于polyfill(s)、浏览器厂商、github开源等好多组织的相辅相成，ES6才成为了现在这样。</p>\n<h2 id=\"ES6到底是什么？\"><a href=\"#ES6到底是什么？\" class=\"headerlink\" title=\"ES6到底是什么？\"></a>ES6到底是什么？</h2><p>大家或多或少看了ES6的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对ES6做以下的介绍。</p>\n<p>JavaScript在上世纪90年代被提交给标准化组织ECMA，紧接着制定出第一个该语言标准并命名为ECMAScript 1.0，ES便是其简称。JavaScript是该标准的实现之一，被广泛使用，我们可以简单的认为JavaScript就是ECMAScript。</p>\n<p>之后该标准不断推出新版本一直到5.1，当要制定6.0标准的时候，发现要加入的语法功能太多了，要不断地推出6.1、6.2，难以规划和命名。于是ECMA组织改变了策略，定于每年6月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是ES 6.0摇身变成ES2015，之后的年份一直推出ES2016、ES2017等。</p>\n<p><strong>虽然从历史上讲，ES6单指ES2015；但大众更容易理解的是，ES6泛指ES2015及以后的新语法功能。</strong></p>\n<p>这些年的互联网文章在特别的介绍ES6的语法功能，用于与ES5进行对比，或许再过一些年，人们不再提起ES6了，那时候的文章会统一讲整个ECMAScript，再有每年6月份单独的讲解ES20xx了吧。</p>\n<h2 id=\"ES6的相关技术\"><a href=\"#ES6的相关技术\" class=\"headerlink\" title=\"ES6的相关技术\"></a>ES6的相关技术</h2><h3 id=\"polyfill、babel是什么？\"><a href=\"#polyfill、babel是什么？\" class=\"headerlink\" title=\"polyfill、babel是什么？\"></a>polyfill、babel是什么？</h3><p>ES2015之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用babel将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用polyfill用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护polyfill列表了，babel中使用core-js库根据browserrc配置项智能的去引入polyfill了。</p>\n<h3 id=\"和TypeScript的关系？\"><a href=\"#和TypeScript的关系？\" class=\"headerlink\" title=\"和TypeScript的关系？\"></a>和TypeScript的关系？</h3><p>TypeScript是对ES的类型补充，它存在一个配置项，来表明在ts检查、编译过程中去支持什么标准的ES。</p>\n<h2 id=\"最后，欢迎大家在此讨论\"><a href=\"#最后，欢迎大家在此讨论\" class=\"headerlink\" title=\"最后，欢迎大家在此讨论\"></a>最后，欢迎大家在此讨论</h2><p>积极汲取大家的讨论，补充我的文章（偷笑）。</p>\n<!--hexo-->\n\n<h1 id=\"core-js\"><a href=\"#core-js\" class=\"headerlink\" title=\"core-js\"></a>core-js</h1><p>虽然大部分开发者不直接使用core-js，甚至不知道它。我们使用webpack将ES6编译成老语法，实际上它在使用babel，而babel在使用core-js。</p>\n<p>它是一个伟大的库，其原理是维护一系列polyfill进行版本、浏览器支持度、草案阶段等维度的分类。你既可以直接引用具体的polyfill，也可以根据草案阶段引入，也可以根据浏览器支持度引入。</p>\n<p>它的作者是一个非常有趣，实诚的人。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/1\">https://github.com/taoliujun/blog/issues/1</a></p>\n<!--hexo\n---\nurl: what-is-es6\ntags:\n  - es6\n  - javascript\n---\n-->\n\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p>本系列文章不是技术教程，只是个人的知识点整理。</p>\n<h2 id=\"第一段废话\"><a href=\"#第一段废话\" class=\"headerlink\" title=\"第一段废话\"></a>第一段废话</h2><p>就在昨晚，我突然冒出了奇怪的心思想要对10年学习工作生涯做一个总结。但今早起来发现无从下手，一是没有优秀的文笔能力，不能科学优雅地整理出重点；二是实在没有牛逼的技术能力，羞于展示于众，这么多年的成长也不过是不断咀嚼大神们的产出。得益于互联网的开源精神和友善的讨论氛围，我这并不天资聪明的脑袋也算是学到了点皮毛能一直工作以温饱无忧。但是说了废话这么多，对写总结仍是没有帮助的，我翻来覆去后打算，不如抓近几年的重点，给某个技术点做一些总结，一来锻炼自己的文笔能力，二来做一次高质量的复习也是能提升自我能力。</p>\n<h2 id=\"为什么写ES6？\"><a href=\"#为什么写ES6？\" class=\"headerlink\" title=\"为什么写ES6？\"></a>为什么写ES6？</h2><p>我从IE6时代开始写JavaScript，到2016年左右迎接真正的成年JS：ES6，接下来是前端爆发时代：CoffeeScript、TypeScript、Webpack、Angular、React、Node、Eslint等百十个技术点或框架层出不穷走向成熟。我和大部分人一样，在有限的精力里不断地消化它们，它们或成为我们工作的一部分，或像IE6一样一去不复返。如上所说，总有一些技术如TypeScript那般坚持了多年之久仍然在坚强的活着，它们如此受欢迎必然有它的闪光点。而ES6正是如此，用稳定优秀的迭代力，现代化的设计理念、牢牢的抓住了各大厂商和开发者的心。</p>\n<p>如果看这篇文档的人儿中有一些近几年加入的开发者，我想对大家说，ES6并不是自古就有，它的出生并不一帆风顺，甚至在推出稳定版本后，得到了一些开发者诸如“浏览器都不支持，要你何用”的嘲笑。但得益于polyfill(s)、浏览器厂商、github开源等好多组织的相辅相成，ES6才成为了现在这样。</p>\n<h2 id=\"ES6到底是什么？\"><a href=\"#ES6到底是什么？\" class=\"headerlink\" title=\"ES6到底是什么？\"></a>ES6到底是什么？</h2><p>大家或多或少看了ES6的介绍文章，正如每个人心中哈姆雷特是不一样的，我参考总结了一些文章，加上自身的工作经验，对ES6做以下的介绍。</p>\n<p>JavaScript在上世纪90年代被提交给标准化组织ECMA，紧接着制定出第一个该语言标准并命名为ECMAScript 1.0，ES便是其简称。JavaScript是该标准的实现之一，被广泛使用，我们可以简单的认为JavaScript就是ECMAScript。</p>\n<p>之后该标准不断推出新版本一直到5.1，当要制定6.0标准的时候，发现要加入的语法功能太多了，要不断地推出6.1、6.2，难以规划和命名。于是ECMA组织改变了策略，定于每年6月推出一个新版本并按年份命名，在这一年期间，若干草案得到充分讨论和经过几个草案步骤后加入到新标准中。于是ES 6.0摇身变成ES2015，之后的年份一直推出ES2016、ES2017等。</p>\n<p><strong>虽然从历史上讲，ES6单指ES2015；但大众更容易理解的是，ES6泛指ES2015及以后的新语法功能。</strong></p>\n<p>这些年的互联网文章在特别的介绍ES6的语法功能，用于与ES5进行对比，或许再过一些年，人们不再提起ES6了，那时候的文章会统一讲整个ECMAScript，再有每年6月份单独的讲解ES20xx了吧。</p>\n<h2 id=\"ES6的相关技术\"><a href=\"#ES6的相关技术\" class=\"headerlink\" title=\"ES6的相关技术\"></a>ES6的相关技术</h2><h3 id=\"polyfill、babel是什么？\"><a href=\"#polyfill、babel是什么？\" class=\"headerlink\" title=\"polyfill、babel是什么？\"></a>polyfill、babel是什么？</h3><p>ES2015之后每一年会发布新的语法功能，我们在代码中使用新语法和功能，但用户的浏览器、Node客户端大概率不是最新版本，并不支持这些新语法。于是发展出两个方案解决这个问题，一是使用babel将新语法编译为老语法（按浏览器版本覆盖率、指定标准等配置，略过不表），二是使用polyfill用老语法模拟出新功能。有了这两者，我们基本可以放心的写出优雅的新代码，然后由它们编译后供浏览器解析。值的说明的是，新功能那么多，现代开发者不需要去维护polyfill列表了，babel中使用core-js库根据browserrc配置项智能的去引入polyfill了。</p>\n<h3 id=\"和TypeScript的关系？\"><a href=\"#和TypeScript的关系？\" class=\"headerlink\" title=\"和TypeScript的关系？\"></a>和TypeScript的关系？</h3><p>TypeScript是对ES的类型补充，它存在一个配置项，来表明在ts检查、编译过程中去支持什么标准的ES。</p>\n<h2 id=\"最后，欢迎大家在此讨论\"><a href=\"#最后，欢迎大家在此讨论\" class=\"headerlink\" title=\"最后，欢迎大家在此讨论\"></a>最后，欢迎大家在此讨论</h2><p>积极汲取大家的讨论，补充我的文章（偷笑）。</p>\n<!--hexo-->\n\n<h1 id=\"core-js\"><a href=\"#core-js\" class=\"headerlink\" title=\"core-js\"></a>core-js</h1><p>虽然大部分开发者不直接使用core-js，甚至不知道它。我们使用webpack将ES6编译成老语法，实际上它在使用babel，而babel在使用core-js。</p>\n<p>它是一个伟大的库，其原理是维护一系列polyfill进行版本、浏览器支持度、草案阶段等维度的分类。你既可以直接引用具体的polyfill，也可以根据草案阶段引入，也可以根据浏览器支持度引入。</p>\n<p>它的作者是一个非常有趣，实诚的人。</p>\n"},{"title":"从Radix看如何优雅写组件","date":"2023-07-05T22:25:58.000Z","url":"write-components-elegantly-using-radix","_content":"\n\n原文链接：[https://github.com/taoliujun/blog/issues/3](https://github.com/taoliujun/blog/issues/3)\n\n<!--hexo\n---\nurl: write-components-elegantly-using-radix\ntags:\n  - radix\n---\n-->\n\n## 组件的困扰\n\n在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来React/Vue等框架的到来，使网页应用变得愈发复杂，于是使用Element、Ant、Mui之类的UI组件来提高开发效率，但使用后发现一些问题，其中常见的是：  \n1. 难以改变样式。\n1. 几乎不能改变dom结构。\n\n虽然很多组件库提供了css variables、less/sass包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件dom结构让开发者难以完成产品、UI设计师要求的定制化二次开发。\n\n于是部分人开始从0或基于更基础的UI组件来开发自定义组件以满足自定义样式和dom结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个dom结构？\n\n于是，有开源项目在解决这样的事，比较出众的是Mui-Base、Radix，它们都旨在提供一套Uncontrolled、Unstyled、Opened的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用Radix继续深入下去，主要是因为Radix将组件拆分的更为精细。\n\n## Radix的理念\n\n它提出了几个特性，一起看看吧。\n\n### Accessible 可访问性\n\n如果你的应用对可访问性有要求，那Radix会有很大帮助，它遵循了一个 `WAI-ARIA` 的设计规范。但我对可访问性的研究不多，在此不表了。\n\n### Unstyled 无样式\n\n顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。\n\n### Opened 开放\n\n我认为Radix的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。\n\n### Incremental 渐进的\n\n可以只安装我们需要用到的组件库，比如`npm install @radix-ui/react-tooltip`。\n\n## 一个小例子\n\n我们要做一个tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在Radix里，采用简单的封装和自定义样式即可：\n\n```typescript\nimport * as Popover from '@radix-ui/react-popover';\nimport { FC } from 'react';\n\nexport const Main: FC = () => {\n    return (\n        <Popover.Root>\n            <Popover.Trigger>点击我</Popover.Trigger>\n            <Popover.Portal>\n                <Popover.Content sideOffset={5}>\n                    要显示的内容\n                    <Popover.Arrow />\n                </Popover.Content>\n            </Popover.Portal>\n        </Popover.Root>\n    );\n};\n```\n\n在上面的代码中，组装Radix提供的popover组件的颗粒，不加任意className就得到一个简单的tooltip，并且\"点击我\"可进行交互。如图：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271427990.png)\n\n接着，我随便加了点tailwindcss。\n\n```typescript\n return (\n        <Popover.Root>\n            <Popover.Trigger className=\"text-red\">点击我</Popover.Trigger>\n            <Popover.Portal>\n                <Popover.Content className=\"border border-solid border-black\" sideOffset={5}>\n                    要显示的内容\n                    <Popover.Arrow />\n                </Popover.Content>\n            </Popover.Portal>\n        </Popover.Root>\n    );\n```\n\n就得到如图的效果：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271430207.png)\n\nRadix的组件将几乎所有的state变化，反馈到`data-state`上方便你精细的定制样式了。\n\n## 其他\n\nRadix提供了很多小细节让你可以优雅的封装组件，不限于：\n\n* 提供`forceMount`以方便你的组件能运行完整的动画。\n* 提供`asChild`以方便你更精细的自定义dom。\n* 支持SSR。\n* 提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。\n\n相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。\n\n## 参考\n\n* https://www.radix-ui.com/\n\n\n\n\n","source":"_posts/write-components-elegantly-using-radix.md","raw":"---\ntitle: \"从Radix看如何优雅写组件\"\ndate: \"2023-07-06T06:25:58Z\"\ncategories:\n  - [React]\n\nurl: write-components-elegantly-using-radix\ntags:\n  - radix\n\n---\n\n\n原文链接：[https://github.com/taoliujun/blog/issues/3](https://github.com/taoliujun/blog/issues/3)\n\n<!--hexo\n---\nurl: write-components-elegantly-using-radix\ntags:\n  - radix\n---\n-->\n\n## 组件的困扰\n\n在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来React/Vue等框架的到来，使网页应用变得愈发复杂，于是使用Element、Ant、Mui之类的UI组件来提高开发效率，但使用后发现一些问题，其中常见的是：  \n1. 难以改变样式。\n1. 几乎不能改变dom结构。\n\n虽然很多组件库提供了css variables、less/sass包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件dom结构让开发者难以完成产品、UI设计师要求的定制化二次开发。\n\n于是部分人开始从0或基于更基础的UI组件来开发自定义组件以满足自定义样式和dom结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个dom结构？\n\n于是，有开源项目在解决这样的事，比较出众的是Mui-Base、Radix，它们都旨在提供一套Uncontrolled、Unstyled、Opened的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用Radix继续深入下去，主要是因为Radix将组件拆分的更为精细。\n\n## Radix的理念\n\n它提出了几个特性，一起看看吧。\n\n### Accessible 可访问性\n\n如果你的应用对可访问性有要求，那Radix会有很大帮助，它遵循了一个 `WAI-ARIA` 的设计规范。但我对可访问性的研究不多，在此不表了。\n\n### Unstyled 无样式\n\n顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。\n\n### Opened 开放\n\n我认为Radix的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。\n\n### Incremental 渐进的\n\n可以只安装我们需要用到的组件库，比如`npm install @radix-ui/react-tooltip`。\n\n## 一个小例子\n\n我们要做一个tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在Radix里，采用简单的封装和自定义样式即可：\n\n```typescript\nimport * as Popover from '@radix-ui/react-popover';\nimport { FC } from 'react';\n\nexport const Main: FC = () => {\n    return (\n        <Popover.Root>\n            <Popover.Trigger>点击我</Popover.Trigger>\n            <Popover.Portal>\n                <Popover.Content sideOffset={5}>\n                    要显示的内容\n                    <Popover.Arrow />\n                </Popover.Content>\n            </Popover.Portal>\n        </Popover.Root>\n    );\n};\n```\n\n在上面的代码中，组装Radix提供的popover组件的颗粒，不加任意className就得到一个简单的tooltip，并且\"点击我\"可进行交互。如图：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271427990.png)\n\n接着，我随便加了点tailwindcss。\n\n```typescript\n return (\n        <Popover.Root>\n            <Popover.Trigger className=\"text-red\">点击我</Popover.Trigger>\n            <Popover.Portal>\n                <Popover.Content className=\"border border-solid border-black\" sideOffset={5}>\n                    要显示的内容\n                    <Popover.Arrow />\n                </Popover.Content>\n            </Popover.Portal>\n        </Popover.Root>\n    );\n```\n\n就得到如图的效果：\n\n![](https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271430207.png)\n\nRadix的组件将几乎所有的state变化，反馈到`data-state`上方便你精细的定制样式了。\n\n## 其他\n\nRadix提供了很多小细节让你可以优雅的封装组件，不限于：\n\n* 提供`forceMount`以方便你的组件能运行完整的动画。\n* 提供`asChild`以方便你更精细的自定义dom。\n* 支持SSR。\n* 提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。\n\n相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。\n\n## 参考\n\n* https://www.radix-ui.com/\n\n\n\n\n","slug":"write-components-elegantly-using-radix","published":1,"updated":"2024-01-03T09:39:31.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqxl72zp0003lfoyf954gh1j","content":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/3\">https://github.com/taoliujun/blog/issues/3</a></p>\n<!--hexo\n---\nurl: write-components-elegantly-using-radix\ntags:\n  - radix\n---\n-->\n\n<h2 id=\"组件的困扰\"><a href=\"#组件的困扰\" class=\"headerlink\" title=\"组件的困扰\"></a>组件的困扰</h2><p>在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来React&#x2F;Vue等框架的到来，使网页应用变得愈发复杂，于是使用Element、Ant、Mui之类的UI组件来提高开发效率，但使用后发现一些问题，其中常见的是：  </p>\n<ol>\n<li>难以改变样式。</li>\n<li>几乎不能改变dom结构。</li>\n</ol>\n<p>虽然很多组件库提供了css variables、less&#x2F;sass包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件dom结构让开发者难以完成产品、UI设计师要求的定制化二次开发。</p>\n<p>于是部分人开始从0或基于更基础的UI组件来开发自定义组件以满足自定义样式和dom结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个dom结构？</p>\n<p>于是，有开源项目在解决这样的事，比较出众的是Mui-Base、Radix，它们都旨在提供一套Uncontrolled、Unstyled、Opened的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用Radix继续深入下去，主要是因为Radix将组件拆分的更为精细。</p>\n<h2 id=\"Radix的理念\"><a href=\"#Radix的理念\" class=\"headerlink\" title=\"Radix的理念\"></a>Radix的理念</h2><p>它提出了几个特性，一起看看吧。</p>\n<h3 id=\"Accessible-可访问性\"><a href=\"#Accessible-可访问性\" class=\"headerlink\" title=\"Accessible 可访问性\"></a>Accessible 可访问性</h3><p>如果你的应用对可访问性有要求，那Radix会有很大帮助，它遵循了一个 <code>WAI-ARIA</code> 的设计规范。但我对可访问性的研究不多，在此不表了。</p>\n<h3 id=\"Unstyled-无样式\"><a href=\"#Unstyled-无样式\" class=\"headerlink\" title=\"Unstyled 无样式\"></a>Unstyled 无样式</h3><p>顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。</p>\n<h3 id=\"Opened-开放\"><a href=\"#Opened-开放\" class=\"headerlink\" title=\"Opened 开放\"></a>Opened 开放</h3><p>我认为Radix的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。</p>\n<h3 id=\"Incremental-渐进的\"><a href=\"#Incremental-渐进的\" class=\"headerlink\" title=\"Incremental 渐进的\"></a>Incremental 渐进的</h3><p>可以只安装我们需要用到的组件库，比如<code>npm install @radix-ui/react-tooltip</code>。</p>\n<h2 id=\"一个小例子\"><a href=\"#一个小例子\" class=\"headerlink\" title=\"一个小例子\"></a>一个小例子</h2><p>我们要做一个tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在Radix里，采用简单的封装和自定义样式即可：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Popover</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@radix-ui/react-popover&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，组装Radix提供的popover组件的颗粒，不加任意className就得到一个简单的tooltip，并且”点击我”可进行交互。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271427990.png\"></p>\n<p>接着，我随便加了点tailwindcss。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">       <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-red&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">               <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;border border-solid border-black&quot;</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                   要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">                   <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">               <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">       <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n\n<p>就得到如图的效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271430207.png\"></p>\n<p>Radix的组件将几乎所有的state变化，反馈到<code>data-state</code>上方便你精细的定制样式了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Radix提供了很多小细节让你可以优雅的封装组件，不限于：</p>\n<ul>\n<li>提供<code>forceMount</code>以方便你的组件能运行完整的动画。</li>\n<li>提供<code>asChild</code>以方便你更精细的自定义dom。</li>\n<li>支持SSR。</li>\n<li>提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。</li>\n</ul>\n<p>相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.radix-ui.com/\">https://www.radix-ui.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"https://github.com/taoliujun/blog/issues/3\">https://github.com/taoliujun/blog/issues/3</a></p>\n<!--hexo\n---\nurl: write-components-elegantly-using-radix\ntags:\n  - radix\n---\n-->\n\n<h2 id=\"组件的困扰\"><a href=\"#组件的困扰\" class=\"headerlink\" title=\"组件的困扰\"></a>组件的困扰</h2><p>在更早以前，网页应用很简单，开发者自己维护简单的交互组件，通过入参去控制组件有不一样的渲染、样式、交互。后来React&#x2F;Vue等框架的到来，使网页应用变得愈发复杂，于是使用Element、Ant、Mui之类的UI组件来提高开发效率，但使用后发现一些问题，其中常见的是：  </p>\n<ol>\n<li>难以改变样式。</li>\n<li>几乎不能改变dom结构。</li>\n</ol>\n<p>虽然很多组件库提供了css variables、less&#x2F;sass包等方式让人们来定义样式，但离精细定义差些距离。而且固化的组件dom结构让开发者难以完成产品、UI设计师要求的定制化二次开发。</p>\n<p>于是部分人开始从0或基于更基础的UI组件来开发自定义组件以满足自定义样式和dom结构的目的，但问题是维护这些基础组件又是一个麻烦，或者说这些组件放到另一个项目中，是否又需要是另一个dom结构？</p>\n<p>于是，有开源项目在解决这样的事，比较出众的是Mui-Base、Radix，它们都旨在提供一套Uncontrolled、Unstyled、Opened的基础组件以便大家二次封装。我在阅读实践了这两个方案后，选择了使用Radix继续深入下去，主要是因为Radix将组件拆分的更为精细。</p>\n<h2 id=\"Radix的理念\"><a href=\"#Radix的理念\" class=\"headerlink\" title=\"Radix的理念\"></a>Radix的理念</h2><p>它提出了几个特性，一起看看吧。</p>\n<h3 id=\"Accessible-可访问性\"><a href=\"#Accessible-可访问性\" class=\"headerlink\" title=\"Accessible 可访问性\"></a>Accessible 可访问性</h3><p>如果你的应用对可访问性有要求，那Radix会有很大帮助，它遵循了一个 <code>WAI-ARIA</code> 的设计规范。但我对可访问性的研究不多，在此不表了。</p>\n<h3 id=\"Unstyled-无样式\"><a href=\"#Unstyled-无样式\" class=\"headerlink\" title=\"Unstyled 无样式\"></a>Unstyled 无样式</h3><p>顾名思义的是，它提供的组件都是不带任何样式的，你可以使用任意样式方案去开发。这也解决了上文提到的重要问题：自定义样式。</p>\n<h3 id=\"Opened-开放\"><a href=\"#Opened-开放\" class=\"headerlink\" title=\"Opened 开放\"></a>Opened 开放</h3><p>我认为Radix的开发性做到了优秀的程度，它的每个组件都太颗粒了，你可以精细的自由搭配，组装成想要的。</p>\n<h3 id=\"Incremental-渐进的\"><a href=\"#Incremental-渐进的\" class=\"headerlink\" title=\"Incremental 渐进的\"></a>Incremental 渐进的</h3><p>可以只安装我们需要用到的组件库，比如<code>npm install @radix-ui/react-tooltip</code>。</p>\n<h2 id=\"一个小例子\"><a href=\"#一个小例子\" class=\"headerlink\" title=\"一个小例子\"></a>一个小例子</h2><p>我们要做一个tooltip，如果自己写，需要考虑样式、状态控制、可访问性等。但是在Radix里，采用简单的封装和自定义样式即可：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">Popover</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@radix-ui/react-popover&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"variable constant_\">FC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Main</span>: <span class=\"variable constant_\">FC</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，组装Radix提供的popover组件的颗粒，不加任意className就得到一个简单的tooltip，并且”点击我”可进行交互。如图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271427990.png\"></p>\n<p>接着，我随便加了点tailwindcss。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">       <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">Popover.Trigger</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;text-red&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">Popover.Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">               <span class=\"tag\">&lt;<span class=\"name\">Popover.Content</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;border border-solid border-black&quot;</span> <span class=\"attr\">sideOffset</span>=<span class=\"string\">&#123;5&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                   要显示的内容</span></span><br><span class=\"line\"><span class=\"language-xml\">                   <span class=\"tag\">&lt;<span class=\"name\">Popover.Arrow</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">               <span class=\"tag\">&lt;/<span class=\"name\">Popover.Content</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;/<span class=\"name\">Popover.Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">       <span class=\"tag\">&lt;/<span class=\"name\">Popover.Root</span>&gt;</span></span></span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n\n<p>就得到如图的效果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/taoliujun/static/blog/202306271430207.png\"></p>\n<p>Radix的组件将几乎所有的state变化，反馈到<code>data-state</code>上方便你精细的定制样式了。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Radix提供了很多小细节让你可以优雅的封装组件，不限于：</p>\n<ul>\n<li>提供<code>forceMount</code>以方便你的组件能运行完整的动画。</li>\n<li>提供<code>asChild</code>以方便你更精细的自定义dom。</li>\n<li>支持SSR。</li>\n<li>提供了许多现成组件，并且足够颗粒化，让你更快更优化的定制出自己的组件哟。</li>\n</ul>\n<p>相比较使用它，理解它的理念才能消化为自己的知识，个人认为即便是自己开发的基础组件，以精细颗粒控制为目标，也不失为一个很棒的思路。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.radix-ui.com/\">https://www.radix-ui.com/</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clqxk9r600000joor84vf3yg8","category_id":"clqxk9r670003joorffjb03fe","_id":"clqxk9r690008joor4imo859j"},{"post_id":"clqxk9r640001joorghsabmh1","category_id":"clqxk9r680005joor13xp87sb","_id":"clqxk9r6a0009joor69azc42l"},{"post_id":"clqxkljy20001jgq95scphg3x","category_id":"clqxk9r670003joorffjb03fe","_id":"clqxkljy80008jgq9185tdwf1"},{"post_id":"clqxkljxw0000jgq982f5bfr9","category_id":"clqxkljy50004jgq90cj62vr0","_id":"clqxkljya000djgq9bftkbc65"},{"post_id":"clqxkljxw0000jgq982f5bfr9","category_id":"clqxk9r670003joorffjb03fe","_id":"clqxkljya000fjgq99aiuerbh"},{"post_id":"clqxkljy50003jgq99l4of3q1","category_id":"clqxkljy70007jgq9hnyx6t6v","_id":"clqxkljyb000hjgq9dprh3lbp"},{"post_id":"clqxkljy60005jgq9acu45xw0","category_id":"clqxkljy70007jgq9hnyx6t6v","_id":"clqxkljyb000jjgq9fql883q1"},{"post_id":"clqxl72ze0000lfoyclk23juo","category_id":"clqxkljy50004jgq90cj62vr0","_id":"clqxl72zq0004lfoy9ydh0ub9"},{"post_id":"clqxl72zk0001lfoy0bb1g26h","category_id":"clqxkljy50004jgq90cj62vr0","_id":"clqxl72zr0006lfoya90qciol"},{"post_id":"clqxl72zp0003lfoyf954gh1j","category_id":"clqxk9r680005joor13xp87sb","_id":"clqxl72zr0007lfoy8ks8buzm"}],"PostTag":[{"post_id":"clqxk9r600000joor84vf3yg8","tag_id":"clqxk9r660002joorb3zc5fqo","_id":"clqxk9r690006joorhst22hj6"},{"post_id":"clqxk9r640001joorghsabmh1","tag_id":"clqxk9r680004joor9f4327js","_id":"clqxk9r6a000ajoorb4fqgt2j"},{"post_id":"clqxk9r640001joorghsabmh1","tag_id":"clqxk9r690007joor0mwh9cfx","_id":"clqxk9r6a000bjoor5eui8kh4"},{"post_id":"clqxkljxw0000jgq982f5bfr9","tag_id":"clqxkljy30002jgq93udkdqkb","_id":"clqxkljya000bjgq91732fqez"},{"post_id":"clqxkljxw0000jgq982f5bfr9","tag_id":"clqxkljy70006jgq90w38dldq","_id":"clqxkljya000cjgq9divbd2t7"},{"post_id":"clqxkljy20001jgq95scphg3x","tag_id":"clqxkljy80009jgq9dcfg8t91","_id":"clqxkljya000gjgq990oz71zx"},{"post_id":"clqxkljy50003jgq99l4of3q1","tag_id":"clqxkljya000ejgq98wae7vcr","_id":"clqxkljyb000kjgq92dxxaqss"},{"post_id":"clqxkljy60005jgq9acu45xw0","tag_id":"clqxkljya000ejgq98wae7vcr","_id":"clqxkljyc000ljgq90keo1lgt"},{"post_id":"clqxl72ze0000lfoyclk23juo","tag_id":"clqxl72zm0002lfoy4adbbvcp","_id":"clqxl72zt0009lfoy52yn5ona"},{"post_id":"clqxl72ze0000lfoyclk23juo","tag_id":"clqxl72zq0005lfoy3ysmdxep","_id":"clqxl72zt000alfoyeubq3jsf"},{"post_id":"clqxl72zk0001lfoy0bb1g26h","tag_id":"clqxl72zm0002lfoy4adbbvcp","_id":"clqxl72zu000dlfoyhpkkdb3z"},{"post_id":"clqxl72zk0001lfoy0bb1g26h","tag_id":"clqxl72zq0005lfoy3ysmdxep","_id":"clqxl72zu000elfoyew3jc5os"},{"post_id":"clqxl72zp0003lfoyf954gh1j","tag_id":"clqxl72zt000clfoyfh8tfuan","_id":"clqxl72zu000flfoyc5b6bxa2"}],"Tag":[{"name":"github actions","_id":"clqxk9r660002joorb3zc5fqo"},{"name":"zustand","_id":"clqxk9r680004joor9f4327js"},{"name":"react store","_id":"clqxk9r690007joor0mwh9cfx"},{"name":"ast","_id":"clqxkljy30002jgq93udkdqkb"},{"name":"css module","_id":"clqxkljy70006jgq90w38dldq"},{"name":"changesets","_id":"clqxkljy80009jgq9dcfg8t91"},{"name":"typescript","_id":"clqxkljya000ejgq98wae7vcr"},{"name":"es6","_id":"clqxl72zm0002lfoy4adbbvcp"},{"name":"javascript","_id":"clqxl72zq0005lfoy3ysmdxep"},{"name":"radix","_id":"clqxl72zt000clfoyfh8tfuan"}]}}